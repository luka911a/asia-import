var app =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(objectFitVideos) {'use strict';\n\n// modules \nvar domReady = __webpack_require__(2);\nvar header = __webpack_require__(3);\nvar vhUnitsView = __webpack_require__(9);\nvar file = __webpack_require__(60);\nvar formView = __webpack_require__(10);\nvar formFocusView = __webpack_require__(12);\nvar formResponceView = __webpack_require__(13);\nvar popupView = __webpack_require__(14);\nvar popupControlsView = __webpack_require__(17);\nvar popupCloseView = __webpack_require__(20);\nvar widthLicenseView = __webpack_require__(21);\nvar mapView = __webpack_require__(22);\nvar mapMarkersView = __webpack_require__(23);\nvar mapControlsView = __webpack_require__(25);\nvar mapChoiceView = __webpack_require__(26);\nvar imagesView = __webpack_require__(27);\nvar linksView = __webpack_require__(28);\nvar historyView = __webpack_require__(30);\nvar fetchView = __webpack_require__(32);\nvar simpleTransitionView = __webpack_require__(33);\nvar projectTransitionView = __webpack_require__(34);\nvar preloadView = __webpack_require__(35);\nvar projectHoverView = __webpack_require__(38);\nvar footerCtrlView = __webpack_require__(39);\nvar footerView = __webpack_require__(41);\nvar syntheticScrollView = __webpack_require__(42);\nvar scrollElemView = __webpack_require__(43);\nvar infiniteLoadControlsView = __webpack_require__(44);\nvar infiniteLoadView = __webpack_require__(46);\nvar imgCenterView = __webpack_require__(47);\nvar sliderView = __webpack_require__(48);\nvar shareView = __webpack_require__(50);\nvar leftRightView = __webpack_require__(51);\nvar countryView = __webpack_require__(52);\nvar tabView = __webpack_require__(54);\nvar uncoverView = __webpack_require__(55);\nvar addClassScrollView = __webpack_require__(56);\nvar scrollShowView = __webpack_require__(57);\nvar footerCloseView = __webpack_require__(58);\nvar autoRout = __webpack_require__(59);\n\ndomReady(function () {\n\tvhUnitsView.init();\n\tobjectFitVideos();\n\theader.init();\n\tfile.init();\n\tformView.init();\n\tformFocusView.init();\n\tformResponceView.init();\n\tpopupView.init();\n\tpopupControlsView.init();\n\tpopupCloseView.init();\n\twidthLicenseView.init();\n\tmapView.init();\n\tmapMarkersView.init();\n\tmapControlsView.init();\n\tmapChoiceView.init();\n\timagesView.init();\n\tlinksView.init();\n\thistoryView.init();\n\tfetchView.init();\n\tsimpleTransitionView.init();\n\tprojectTransitionView.init();\n\tpreloadView.init();\n\tprojectHoverView.init();\n\tfooterCtrlView.init();\n\tfooterView.init();\n\tsyntheticScrollView.init();\n\tscrollElemView.init();\n\tinfiniteLoadControlsView.init();\n\tinfiniteLoadView.init();\n\timgCenterView.init();\n\tsliderView.init();\n\tshareView.init();\n\tleftRightView.init();\n\tcountryView.init();\n\ttabView.init();\n\tuncoverView.init();\n\taddClassScrollView.init();\n\tscrollShowView.init();\n\tfooterCloseView.init();\n\tautoRout.init();\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nvar objectFitVideos = function objectFitVideos() {\n  \"use strict\";\n  function t(t) {\n    for (var e = getComputedStyle(t).fontFamily, o = null, n = {}; null !== (o = a.exec(e));) {\n      n[o[1]] = o[2];\n    }return n[\"object-position\"] ? i(n) : n;\n  }function e() {\n    for (var e = document.querySelectorAll(\"video\"), i = -1; e[++i];) {\n      var n = t(e[i]);(n[\"object-fit\"] || n[\"object-position\"]) && (n[\"object-fit\"] = n[\"object-fit\"] || \"fill\", o(e[i], n));\n    }\n  }function o(t, e) {\n    function o() {\n      var o = t.videoWidth,\n          n = t.videoHeight,\n          d = o / n,\n          c = r.clientWidth,\n          a = r.clientHeight,\n          p = c / a,\n          l = 0,\n          s = 0;i.marginLeft = i.marginTop = 0, (d < p ? \"contain\" === e[\"object-fit\"] : \"cover\" === e[\"object-fit\"]) ? (l = a * d, s = c / d, i.width = Math.round(l) + \"px\", i.height = a + \"px\", \"left\" === e[\"object-position-x\"] ? i.marginLeft = 0 : \"right\" === e[\"object-position-x\"] ? i.marginLeft = Math.round(c - l) + \"px\" : i.marginLeft = Math.round((c - l) / 2) + \"px\") : (s = c / d, i.width = c + \"px\", i.height = Math.round(s) + \"px\", \"top\" === e[\"object-position-y\"] ? i.marginTop = 0 : \"bottom\" === e[\"object-position-y\"] ? i.marginTop = Math.round(a - s) + \"px\" : i.marginTop = Math.round((a - s) / 2) + \"px\");\n    }if (\"fill\" !== e[\"object-fit\"]) {\n      var i = t.style,\n          n = window.getComputedStyle(t),\n          r = document.createElement(\"object-fit\");r.appendChild(t.parentNode.replaceChild(r, t));var d = { height: \"100%\", width: \"100%\", boxSizing: \"content-box\", display: \"inline-block\", overflow: \"hidden\" };\"backgroundColor backgroundImage borderColor borderStyle borderWidth bottom fontSize lineHeight left opacity margin position right top visibility\".replace(/\\w+/g, function (t) {\n        d[t] = n[t];\n      });for (var c in d) {\n        r.style[c] = d[c];\n      }i.border = i.margin = i.padding = 0, i.display = \"block\", i.opacity = 1, t.addEventListener(\"loadedmetadata\", o), window.addEventListener(\"optimizedResize\", o), t.readyState >= 1 && (t.removeEventListener(\"loadedmetadata\", o), o());\n    }\n  }function i(t) {\n    return ~t[\"object-position\"].indexOf(\"left\") ? t[\"object-position-x\"] = \"left\" : ~t[\"object-position\"].indexOf(\"right\") ? t[\"object-position-x\"] = \"right\" : t[\"object-position-x\"] = \"center\", ~t[\"object-position\"].indexOf(\"top\") ? t[\"object-position-y\"] = \"top\" : ~t[\"object-position\"].indexOf(\"bottom\") ? t[\"object-position-y\"] = \"bottom\" : t[\"object-position-y\"] = \"center\", t;\n  }function n(t, e, o) {\n    o = o || window;var i = !1,\n        n = null;try {\n      n = new CustomEvent(e);\n    } catch (t) {\n      n = document.createEvent(\"Event\"), n.initEvent(e, !0, !0);\n    }var r = function r() {\n      i || (i = !0, requestAnimationFrame(function () {\n        o.dispatchEvent(n), i = !1;\n      }));\n    };o.addEventListener(t, r);\n  }var r = new Image(),\n      d = \"object-fit\" in r.style,\n      c = \"object-position\" in r.style,\n      a = /(object-fit|object-position)\\s*:\\s*([-\\w\\s%]+)/g;d && c || (e(), n(\"resize\", \"optimizedResize\"));\n};\"undefined\" != typeof module && \"undefined\" != typeof module.exports && (module.exports = objectFitVideos);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n/**\n * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/domReady for details\n */\n/*jslint */\n/*global require: false, define: false, requirejs: false,\n  window: false, clearInterval: false, document: false,\n  self: false, setInterval: false */\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\n    'use strict';\n\n    var isTop,\n        testDiv,\n        scrollIntervalId,\n        isBrowser = typeof window !== \"undefined\" && window.document,\n        isPageLoaded = !isBrowser,\n        doc = isBrowser ? document : null,\n        readyCalls = [];\n\n    var IE = {\n        version: function () {\n            var version = 999;;\n            if (navigator.appVersion.indexOf(\"MSIE\") != -1) version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\n            return version;\n        }()\n    };\n\n    function runCallbacks(callbacks) {\n        var i;\n        for (i = 0; i < callbacks.length; i += 1) {\n            callbacks[i](doc);\n        }\n    }\n\n    function callReady() {\n        var callbacks = readyCalls;\n\n        if (isPageLoaded) {\n            //Call the DOM ready callbacks\n            if (callbacks.length) {\n                readyCalls = [];\n                runCallbacks(callbacks);\n            }\n        }\n    }\n\n    /**\n     * Sets the page as loaded.\n     */\n    function pageLoaded() {\n        if (!isPageLoaded) {\n            isPageLoaded = true;\n            if (scrollIntervalId) {\n                clearInterval(scrollIntervalId);\n            }\n\n            callReady();\n        }\n    }\n\n    if (isBrowser) {\n        if (document.addEventListener) {\n            //Standards. Hooray! Assumption here that if standards based,\n            //it knows about DOMContentLoaded.\n            document.addEventListener(\"DOMContentLoaded\", pageLoaded, false);\n            window.addEventListener(\"load\", pageLoaded, false);\n        } else if (window.attachEvent) {\n            window.attachEvent(\"onload\", pageLoaded);\n\n            testDiv = document.createElement('div');\n            try {\n                isTop = window.frameElement === null;\n            } catch (e) {}\n\n            //DOMContentLoaded approximation that uses a doScroll, as found by\n            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,\n            //but modified by other contributors, including jdalton\n            if (testDiv.doScroll && isTop && window.external) {\n                scrollIntervalId = setInterval(function () {\n                    try {\n                        testDiv.doScroll();\n                        pageLoaded();\n                    } catch (e) {}\n                }, 30);\n            }\n        }\n\n        //Check if document already complete, and if so, just trigger page load\n        //listeners. Latest webkit browsers also use \"interactive\", and\n        //will fire the onDOMContentLoaded before \"interactive\" but not after\n        //entering \"interactive\" or \"complete\". More details:\n        //http://dev.w3.org/html5/spec/the-end.html#the-end\n        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded\n        //Hmm, this is more complicated on further use, see \"firing too early\"\n        //bug: https://github.com/requirejs/domReady/issues/1\n        //so removing the || document.readyState === \"interactive\" test.\n        //There is still a window.onload binding that should get fired if\n        //DOMContentLoaded is missed.\n\n        if (IE.version > 9) {\n            if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n                pageLoaded();\n            }\n        } else {\n            if (document.readyState === \"complete\") {\n                pageLoaded();\n            }\n        }\n    }\n\n    /** START OF PUBLIC API **/\n\n    /**\n     * Registers a callback for DOM ready. If DOM is already ready, the\n     * callback is called immediately.\n     * @param {Function} callback\n     */\n    function domReady(callback) {\n        if (isPageLoaded) {\n            callback(doc);\n        } else {\n            readyCalls.push(callback);\n        }\n        return domReady;\n    }\n\n    domReady.version = '2.0.1';\n\n    /**\n     * Loader Plugin API method\n     */\n    domReady.load = function (name, req, onLoad, config) {\n        if (config.isBuild) {\n            onLoad(null);\n        } else {\n            domReady(onLoad);\n        }\n    };\n\n    /** END OF PUBLIC API **/\n\n    return domReady;\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar scroll = 50;\n\tvar classHeader;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData().top;\n\t\tfor (var key in items) {\n\t\t\tvar el = items[key].element;\n\t\t}\n\n\t\twindow.addEventListener('pageshow', function () {\n\t\t\tel.style.background = \"transparent\";\n\t\t\tel.classList.remove(\"whs\");\n\t\t\tel.style.transform = \"translateY(0)\";\n\t\t});\n\t\tif (storeData <= 50 && scroll !== 0) {\n\t\t\tel.style.background = \"transparent\";\n\t\t\tel.classList.remove(\"whs\");\n\t\t} else if (storeData > 50 && scroll !== 0) {\n\t\t\tel.style.transform = \"translateY(-100%)\";\n\n\t\t\tif (storeData > scroll) {\n\t\t\t\tel.style.transform = \"translateY(-100%)\";\n\t\t\t} else if (storeData <= scroll) {\n\t\t\t\tel.style.position = \"fixed\";\n\t\t\t\tel.classList.add(\"whs\");\n\t\t\t\tel.style.background = \"#fff\";\n\t\t\t\tel.style.transform = \"translateY(0)\";\n\t\t\t}\n\t\t}\n\n\t\tscroll = storeData;\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telement.classList.remove(\"whs\");\n\t\t\tclassHeader = element.getAttribute(\"class\");\n\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByTagName('header');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\tvar _handlers = [];\n\n\tvar dispatch = function dispatch(event) {\n\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t_handlers[i](event);\n\t\t}\n\t};\n\tvar subscribe = function subscribe(handler) {\n\t\t_handlers.push(handler);\n\t};\n\tvar unsubscribe = function unsubscribe(handler) {\n\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn {\n\t\tdispatch: dispatch,\n\t\tsubscribe: subscribe,\n\t\tunsubscribe: unsubscribe\n\t};\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Rpc3BhdGNoZXIuanM/OWQ3NiJdLCJuYW1lcyI6WyJfaGFuZGxlcnMiLCJkaXNwYXRjaCIsImV2ZW50IiwiaSIsImxlbmd0aCIsInN1YnNjcmliZSIsImhhbmRsZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQU8sWUFBVztBQUNqQixLQUFJQSxZQUFZLEVBQWhCOztBQUVBLEtBQUlDLFdBQVcsU0FBWEEsUUFBVyxDQUFTQyxLQUFULEVBQWdCO0FBQzlCLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxLQUFLSCxVQUFVSSxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQ0gsYUFBVUcsQ0FBVixFQUFhRCxLQUFiO0FBQ0E7QUFDRCxFQUpEO0FBS0EsS0FBSUcsWUFBWSxTQUFaQSxTQUFZLENBQVNDLE9BQVQsRUFBa0I7QUFDakNOLFlBQVVPLElBQVYsQ0FBZUQsT0FBZjtBQUNBLEVBRkQ7QUFHQSxLQUFJRSxjQUFjLFNBQWRBLFdBQWMsQ0FBU0YsT0FBVCxFQUFrQjtBQUNuQyxPQUFLLElBQUlILElBQUksQ0FBYixFQUFnQkEsS0FBS0gsVUFBVUksTUFBVixHQUFtQixDQUF4QyxFQUEyQ0QsR0FBM0MsRUFBZ0Q7QUFDL0MsT0FBSUgsVUFBVUcsQ0FBVixLQUFnQkcsT0FBcEIsRUFBNkI7QUFDNUJOLGNBQVVTLE1BQVYsQ0FBaUJOLEdBQWpCLEVBQXNCLENBQXRCO0FBQ0E7QUFDRDtBQUNELEVBTkQ7O0FBUUEsUUFBTztBQUNORixZQUFVQSxRQURKO0FBRU5JLGFBQVdBLFNBRkw7QUFHTkcsZUFBYUE7QUFIUCxFQUFQO0FBS0EsQ0F4QkQiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShmdW5jdGlvbigpIHtcblx0dmFyIF9oYW5kbGVycyA9IFtdO1xuXG5cdHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0X2hhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHR9XG5cdH1cblx0dmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRfaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblx0fVxuXHR2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0aWYgKF9oYW5kbGVyc1tpXSA9PSBoYW5kbGVyKSB7XG5cdFx0XHRcdF9oYW5kbGVycy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGRpc3BhdGNoOiBkaXNwYXRjaCxcblx0XHRzdWJzY3JpYmU6IHN1YnNjcmliZSxcblx0XHR1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9kaXNwYXRjaGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, utils) {\n\n\t\"use strict\";\n\t//global\n\n\tvar initialized = false;\n\tvar scrolledTop = 0;\n\tvar scrolledLeft = 0;\n\tvar disabled = false;\n\tvar requestAnimationFrame;\n\n\tvar _scrollPositionTop = function _scrollPositionTop() {\n\t\tvar position = (window.pageYOffset || window.document.scrollTop) - (window.document.clientTop || 0);\n\t\tif (isNaN(position)) position = 0;\n\t\treturn position;\n\t};\n\tvar _scrollPositionLeft = function _scrollPositionLeft() {\n\t\tvar position = (window.pageXOffset || window.document.scrollLeft) - (window.document.clientLeft || 0);\n\t\tif (isNaN(position)) position = 0;\n\t\treturn position;\n\t};\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'fire-scroll') {\n\t\t\tscrolledTop = _scrollPositionTop();\n\t\t\tscrolledLeft = _scrollPositionLeft();\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\n\t\tif (e.type === 'scroll-disable') {\n\t\t\tdisabled = true;\n\t\t}\n\t\tif (e.type === 'scroll-enable') {\n\t\t\tdisabled = false;\n\t\t}\n\t};\n\n\tvar _loop = function _loop() {\n\t\tvar tmpTop, tmpLeft;\n\n\t\ttmpTop = _scrollPositionTop();\n\t\ttmpLeft = _scrollPositionLeft();\n\n\t\tif (tmpTop !== scrolledTop || tmpLeft !== scrolledLeft) {\n\t\t\tscrolledTop = tmpTop;\n\t\t\tscrolledLeft = tmpLeft;\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\n\t\t\tif (!disabled) {\n\t\t\t\teventEmitter.dispatch({\n\t\t\t\t\ttype: 'change'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\trequestAnimationFrame(_loop);\n\t};\n\n\tvar _init = function _init() {\n\t\trequestAnimationFrame = utils.getRequestAnimationFrame();\n\n\t\tscrolledTop = _scrollPositionTop();\n\t\tscrolledLeft = _scrollPositionLeft();\n\n\t\tvar handleScroll = function handleScroll() {\n\t\t\tscrolledTop = _scrollPositionTop();\n\t\t\tscrolledLeft = _scrollPositionLeft();\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\n\t\t\tif (disabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t};\n\n\t\twindow.addEventListener('scroll', handleScroll, false);\n\n\t\t// _loop();\n\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar forcedEventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\ttop: scrolledTop,\n\t\t\tleft: scrolledLeft\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tforcedEventEmitter: forcedEventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t'use strict';\n\n\tvar offset = function offset(elem) {\n\t\tfunction getOffsetSum(elem) {\n\t\t\tvar top = 0,\n\t\t\t    left = 0;\n\t\t\twhile (elem) {\n\t\t\t\ttop = top + parseInt(elem.offsetTop);\n\t\t\t\tleft = left + parseInt(elem.offsetLeft);\n\t\t\t\telem = elem.offsetParent;\n\t\t\t}\n\n\t\t\treturn { top: top, left: left };\n\t\t}\n\n\t\tfunction getOffsetRect(elem) {\n\t\t\tvar box = elem.getBoundingClientRect();\n\n\t\t\tvar body = document.body;\n\t\t\tvar docElem = document.documentElement;\n\n\t\t\tvar scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n\t\t\tvar scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n\n\t\t\tvar clientTop = docElem.clientTop || body.clientTop || 0;\n\t\t\tvar clientLeft = docElem.clientLeft || body.clientLeft || 0;\n\n\t\t\tvar top = box.top + scrollTop - clientTop;\n\t\t\tvar left = box.left + scrollLeft - clientLeft;\n\n\t\t\treturn {\n\t\t\t\ttop: Math.round(top),\n\t\t\t\tleft: Math.round(left)\n\t\t\t};\n\t\t}\n\n\t\tif (elem.getBoundingClientRect) {\n\t\t\treturn getOffsetRect(elem);\n\t\t} else {\n\t\t\treturn getOffsetSum(elem);\n\t\t}\n\t};\n\n\tvar requestAnimFrame = function () {\n\t\treturn window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n\t\t\twindow.setTimeout(callback, 1000 / 60);\n\t\t};\n\t}();\n\n\tvar Tween = function Tween(from, to, duration, easing, func) {\n\t\tthis.i = 0;\n\t\tthis.duration = duration * 60;\n\t\tthis.current = from;\n\t\tthis.func = func;\n\t\tthis.to = to;\n\t\tthis.halt = false;\n\n\t\tthis.stop = function () {\n\t\t\tthis.halt = true;\n\t\t\tthis.i = 0;\n\t\t\tthis.current = from;\n\t\t};\n\n\t\tthis.animate = function () {\n\t\t\tvar scope = this;\n\t\t\tthis.halt = false;\n\n\t\t\tthis.func(this.current);\n\n\t\t\tvar loop = function loop() {\n\t\t\t\tvar progress;\n\t\t\t\tvar delta;\n\t\t\t\tvar current;\n\n\t\t\t\tif (scope.halt) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.i++;\n\t\t\t\tprogress = scope.i / scope.duration;\n\t\t\t\tif (progress > 1) {\n\t\t\t\t\tprogress = 1;\n\t\t\t\t}\n\n\t\t\t\tif (easing) {\n\t\t\t\t\tdelta = easing(progress);\n\t\t\t\t} else {\n\t\t\t\t\tdelta = progress;\n\t\t\t\t}\n\n\t\t\t\tscope.current = from + (to - from) * delta;\n\n\t\t\t\tscope.func(scope.current);\n\n\t\t\t\tif (Math.floor(scope.current - scope.to) === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trequestAnimFrame(loop);\n\t\t\t};\n\n\t\t\tloop();\n\t\t};\n\t};\n\n\tvar ajax = {\n\t\tsend: function send(url, callback, method, data, sync) {\n\t\t\tvar x = new XMLHttpRequest();\n\t\t\tx.open(method, url, sync);\n\t\t\tx.onreadystatechange = function () {\n\t\t\t\tif (x.readyState == 4) {\n\t\t\t\t\tcallback(x.responseText);\n\t\t\t\t}\n\t\t\t};\n\t\t\tx.send(data);\n\t\t},\n\t\tpost: function post(url, data, callback, async) {\n\t\t\tajax.send(url, callback, 'POST', data, async);\n\t\t}\n\t};\n\n\tvar getRequestAnimationFrame = function getRequestAnimationFrame() {\n\t\treturn requestAnimFrame;\n\t};\n\n\tvar queryParse = function queryParse(str) {\n\t\tif (typeof str !== 'string') {\n\t\t\treturn {};\n\t\t}\n\n\t\tstr = str.trim().replace(/^(\\?|#|&)/, '');\n\n\t\tif (!str) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn str.split('&').reduce(function (ret, param) {\n\t\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t\tvar key = parts[0];\n\t\t\tvar val = parts[1];\n\n\t\t\tkey = decodeURIComponent(key);\n\n\t\t\t// missing `=` should be `null`:\n\t\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\t\tval = val === undefined ? null : decodeURIComponent(val);\n\n\t\t\tif (!ret.hasOwnProperty(key)) {\n\t\t\t\tret[key] = val;\n\t\t\t} else if (Array.isArray(ret[key])) {\n\t\t\t\tret[key].push(val);\n\t\t\t} else {\n\t\t\t\tret[key] = [ret[key], val];\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}, {});\n\t};\n\n\tvar getIE = function getIE() {\n\t\tvar rv = -1,\n\t\t    ua = navigator.userAgent,\n\t\t    re;\n\n\t\tif (navigator.appName == 'Microsoft Internet Explorer') {\n\n\t\t\tre = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n\t\t\tif (re.exec(ua) != null) rv = parseFloat(RegExp.$1);\n\t\t} else if (navigator.appName == 'Netscape') {\n\t\t\tre = new RegExp(\"Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})\");\n\t\t\tif (re.exec(ua) != null) rv = parseFloat(RegExp.$1);\n\t\t}\n\n\t\treturn rv;\n\t};\n\n\tvar debounce = function debounce(f, ms) {\n\t\tvar state = null,\n\t\t    COOLDOWN = 1;\n\n\t\treturn function () {\n\t\t\tif (state) return;\n\n\t\t\tf.apply(this, arguments);\n\n\t\t\tstate = COOLDOWN;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tstate = null;\n\t\t\t}, ms);\n\t\t};\n\t};\n\n\tvar throttle = function throttle(func, ms) {\n\t\tvar isThrottled = false,\n\t\t    savedArgs,\n\t\t    savedThis;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) {\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments);\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false;\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t};\n\n\treturn {\n\t\toffset: offset,\n\t\tTween: Tween,\n\t\tgetRequestAnimationFrame: getRequestAnimationFrame,\n\t\tajax: ajax,\n\t\tqueryParse: queryParse,\n\t\tgetIE: getIE,\n\t\tdebounce: debounce,\n\t\tthrottle: throttle\n\t};\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */,
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\t//global\n\n\tvar initialized = false;\n\tvar size = {\n\t\twidth: 0,\n\t\theight: 0\n\t};\n\n\tvar disabled = false;\n\n\tvar _windowSize = function _windowSize() {\n\t\tvar width = 0,\n\t\t    height = 0;\n\t\tif (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {\n\t\t\twidth = document.documentElement.clientWidth;\n\t\t\theight = document.documentElement.clientHeight;\n\t\t} else if (typeof window.innerWidth === 'number') {\n\t\t\tconsole.dir(window);\n\t\t\twidth = window.innerWidth;\n\t\t\theight = window.innerHeight;\n\t\t} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {\n\t\t\twidth = document.body.clientWidth;\n\t\t\theight = document.body.clientHeight;\n\t\t}\n\t\treturn {\n\t\t\theight: height,\n\t\t\twidth: width\n\t\t};\n\t};\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'fire-resize') {\n\t\t\tsize = _windowSize();\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\n\t\tif (e.type === 'resize-disable') {\n\t\t\tdisabled = true;\n\t\t}\n\t\tif (e.type === 'resize-enable') {\n\t\t\tdisabled = false;\n\t\t}\n\t};\n\n\t// var _loop = function() {\n\t// \tvar tmpSize = {}\n\n\t// \ttmpSize = _windowSize();\n\n\t// \tif (tmpSize.width !== size.width || tmpSize.height !== size.height) {\n\t// \t\tsize.width  = tmpSize.width;\n\t// \t\tsize.height = tmpSize.height;\n\n\t// \t\tforcedEventEmitter.dispatch({\n\t// \t\t\ttype: 'change'\n\t// \t\t});\n\n\t// \t\tif (!disabled) {\n\t// \t\t\teventEmitter.dispatch({\n\t// \t\t\t\ttype: 'change'\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\n\t// \trequestAnimationFrame(_loop);\n\t// }\n\n\tvar _init = function _init() {\n\t\tsize = _windowSize();\n\n\t\t// _loop();\n\t\twindow.addEventListener('resize', function () {\n\t\t\tsize = _windowSize();\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\n\t\t\tif (disabled) return;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}, false);\n\t\twindow.addEventListener('orientationchange', function () {\n\t\t\tsize = _windowSize();\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\n\t\t\tif (disabled) return;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}, false);\n\t\twindow.addEventListener('load', function () {\n\t\t\tsize = _windowSize();\n\n\t\t\tforcedEventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\n\t\t\tif (disabled) return;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}, false);\n\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar forcedEventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\theight: size.height,\n\t\t\twidth: size.width\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tforcedEventEmitter: forcedEventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'vh-units-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t\tvar wh = storeData.height;\n\t\tvar ww = storeData.width;\n\n\t\t// document.documentElement.style.height = (window.innerHeight) + 'px';\n\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tif (ww >= 1000) {\n\t\t\t\titem.element.style.height = storeData.height - item.shift1000 + 'px';\n\t\t\t} else if (ww >= 640) {\n\t\t\t\titem.element.style.height = storeData.height - item.shift640 + 'px';\n\t\t\t} else if (ww >= 0) {\n\t\t\t\titem.element.style.height = storeData.height - item.shift0 + 'px';\n\t\t\t}\n\t\t};\n\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tcheckItem(items[id]);\n\t\t\t}\n\t\t}\n\n\t\t// dispatcher.dispatch({\n\t\t// \ttype: 'fire-resize',\n\t\t// \tme: 'vhUnits.view'\n\t\t// });\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar shift1000 = element.getAttribute('data-shift1000') || false;\n\t\tvar shift640 = element.getAttribute('data-shift640') || false;\n\t\tvar shift0 = element.getAttribute('data-shift0') || false;\n\n\t\tif (shift0 === false) {\n\t\t\tshift0 = 0;\n\t\t}\n\t\tif (shift640 === false) {\n\t\t\tshift640 = shift0;\n\t\t}\n\t\tif (shift1000 === false) {\n\t\t\tshift1000 = shift640;\n\t\t}\n\n\t\tshift1000 = parseInt(shift1000);\n\t\tshift640 = parseInt(shift640);\n\t\tshift0 = parseInt(shift0);\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\tshift1000: shift1000,\n\t\t\tshift640: shift640,\n\t\t\tshift0: shift0,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('vh-height');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t// if (Modernizr.cssvhunit) return;\n\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(11), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'form-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tvar id = item.id;\n\n\t\t\tif (!storeData.items.hasOwnProperty(id)) return;\n\t\t\tif (storeData.items[id].status === items[id].status) return;\n\n\t\t\titems[id].status = storeData.items[id].status;\n\t\t\titem.element.classList.remove('waiting');\n\t\t\titem.element.classList.remove('sending');\n\t\t\titem.element.classList.remove('submitted');\n\t\t\titem.element.classList.add(items[id].status);\n\t\t};\n\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tcheckItem(items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _handle = function _handle(item) {\n\t\tvar form = item.element;\n\t\tvar inputs = form.getElementsByTagName('input');\n\t\tvar textareas = form.getElementsByTagName('textarea');\n\t\tvar selects = form.getElementsByTagName('select');\n\t\tvar elements = form.elements;\n\n\t\tvar validate = function validate(form) {\n\t\t\tvar result = true;\n\t\t\tvar bindedData = false;\n\n\t\t\tvar checkField = function checkField(field) {\n\t\t\t\tif (!field.getAttribute('data-required')) return;\n\n\t\t\t\tif (field.type === 'checkbox' && !field.checked) {\n\t\t\t\t\tfield.parentNode.classList.add('error');\n\n\t\t\t\t\t// setTimeout(function() {\n\t\t\t\t\t// \tfield.parentNode.classList.remove('error');\n\t\t\t\t\t// }, 500);\n\t\t\t\t\tresult = false;\n\t\t\t\t}if (field.type !== 'checkbox' && !field.value || field.value === '') {\n\t\t\t\t\tfield.parentNode.classList.add('error');\n\n\t\t\t\t\t// setTimeout(function() {\n\t\t\t\t\t// \tfield.parentNode.classList.remove('error');\n\t\t\t\t\t// }, 500);\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\n\t\t\t\tif (field.parentNode.classList.contains('error')) {\n\t\t\t\t\tfield.addEventListener('change', function () {\n\t\t\t\t\t\tfield.parentNode.classList.remove('error');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar checkSelect = function checkSelect(select) {\n\t\t\t\tif (!select.getAttribute('data-required') || select.type !== 'select-one') return;\n\n\t\t\t\tif (select.selectedIndex === 0) {\n\t\t\t\t\tselect.parentNode.classList.add('error');\n\n\t\t\t\t\t// setTimeout(function() {\n\t\t\t\t\t// \tselect.parentNode.classList.remove('error');\n\t\t\t\t\t// }, 500);\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\n\t\t\t\tif (select.parentNode.classList.contains('error')) {\n\t\t\t\t\tselect.addEventListener('change', function () {\n\t\t\t\t\t\tselect.parentNode.classList.remove('error');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar checkBinded = function checkBinded(input) {\n\t\t\t\tif (!input.getAttribute('data-binded')) return;\n\t\t\t\tif (!input.value || input.value === '') return;\n\t\t\t\tif (!bindedData) {\n\t\t\t\t\tbindedData = input.value;\n\t\t\t\t} else {\n\t\t\t\t\tif (input.value !== bindedData) {\n\t\t\t\t\t\tinput.parentNode.classList.add('error');\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < inputs.length; i++) {\n\t\t\t\tcheckField(inputs[i]);\n\t\t\t\tcheckBinded(inputs[i]);\n\t\t\t}\n\t\t\tfor (var j = 0; j < textareas.length; j++) {\n\t\t\t\tcheckField(textareas[j]);\n\t\t\t\tcheckBinded(textareas[j]);\n\t\t\t}\n\t\t\tfor (var l = 0; l < selects.length; l++) {\n\t\t\t\tcheckSelect(selects[l]);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\titem.element.addEventListener('submit', function (e) {\n\t\t\tvar action = form.action;\n\t\t\tvar validated;\n\t\t\tvar data = new FormData();\n\t\t\tvar ajaxForm = this.getAttribute('data-ajax') || false;\n\n\t\t\tvalidated = validate(form);\n\n\t\t\tif (!validated || item.status !== 'waiting') {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ajaxForm) return;\n\n\t\t\te.preventDefault();\n\n\t\t\tfor (var i = elements.length - 1; i >= 0; i--) {\n\t\t\t\tconsole.dir(elements[i]);\n\t\t\t\tvar fe = elements[i];\n\t\t\t\tif (fe.name && fe.name !== \"file\") {\n\t\t\t\t\tdata.append(fe.name, fe.value);\n\t\t\t\t} else if (fe.name && fe.name === \"file\") {\n\t\t\t\t\tdata.append(fe.name, fe.files[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'ajax-form-send',\n\t\t\t\tid: item.id\n\t\t\t});\n\n\t\t\t// the actual code-----------------------------------------\n\t\t\tutils.ajax.post(action, data, function (response) {\n\t\t\t\tvar json = JSON.parse(response);\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'ajax-form-submit',\n\t\t\t\t\tid: item.id,\n\t\t\t\t\tresponse: json\n\t\t\t\t});\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'ajax-server-response',\n\t\t\t\t\tresponse: json\n\t\t\t\t});\n\t\t\t\tif (!json.hasOwnProperty('status') || json.status === 'error' || json.status === 'success-reset') {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\t\ttype: 'ajax-form-reset',\n\t\t\t\t\t\t\tid: item.id\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 3000);\n\t\t\t\t}\n\t\t\t}, true);\n\t\t\t//-----------------------------------------------------\n\n\n\t\t\t// a temporary plug for the client-----------------------\n\t\t\t// var testObj = {\n\t\t\t// \tstatus:   'success',\n\t\t\t// \tresponse: 'Your message has been successfully send. We will write you soon.'\n\t\t\t// };\n\n\t\t\t// var testJSON = JSON.stringify(testObj);\n\n\t\t\t// console.log(testJSON);\n\n\t\t\t// setTimeout(function() {\n\t\t\t// \t// item.status = 'submitted';\n\n\t\t\t// \tdispatcher.dispatch({\n\t\t\t// \t\ttype: 'ajax-form-submit',\n\t\t\t// \t\tid: item.id,\n\t\t\t// \t\tresponse: testObj\n\t\t\t// \t});\n\t\t\t// \tdispatcher.dispatch({\n\t\t\t// \t\ttype: 'ajax-server-response',\n\t\t\t// \t\tresponse: testObj\n\t\t\t// \t});\n\n\t\t\t// \tif (!testObj.hasOwnProperty('status') || testObj.status === 'error' || testObj.status === 'success-reset') {\n\t\t\t// \t\tsetTimeout(function() {\n\t\t\t// \t\t\tdispatcher.dispatch({\n\t\t\t// \t\t\t\ttype: 'ajax-form-reset',\n\t\t\t// \t\t\t\tid: item.id\n\t\t\t// \t\t\t});\n\t\t\t// \t\t}, 3000);\n\t\t\t// \t}\n\t\t\t// }, 2000);\n\t\t\t//----------------------------------------------------\n\n\t\t}, false);\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'ajax-form-add',\n\t\t\tid: id\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tstatus: false\n\t\t};\n\n\t\t_handle(items[id]);\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'ajax-form-remove',\n\t\t\tid: item.id\n\t\t});\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('view-form');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar items = {};\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'ajax-form-add') {\n\t\t\titems[e.id] = {\n\t\t\t\tid: e.id,\n\t\t\t\tstatus: 'waiting'\n\t\t\t};\n\t\t}\n\t\tif (e.type === 'ajax-form-remove') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tdelete items[e.id];\n\t\t}\n\n\t\tif (e.type === 'ajax-form-send') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tif (items[e.id].status === 'sending') return;\n\n\t\t\titems[e.id].status = 'sending';\n\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t\tif (e.type === 'ajax-form-submit') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tif (items[e.id].status === 'submitted') return;\n\n\t\t\titems[e.id].status = 'submitted';\n\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t\tif (e.type === 'ajax-form-reset') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tif (items[e.id].status === 'waiting') return;\n\n\t\t\titems[e.id].status = 'waiting';\n\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\titems: items\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZm9ybS5zdG9yZS5qcz81ODViIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpbml0aWFsaXplZCIsIml0ZW1zIiwiX2hhbmRsZUV2ZW50IiwiZSIsInR5cGUiLCJpZCIsInN0YXR1cyIsImhhc093blByb3BlcnR5IiwiZXZlbnRFbWl0dGVyIiwiZGlzcGF0Y2giLCJfaW5pdCIsInN1YnNjcmliZSIsIl9oYW5kbGVycyIsImV2ZW50IiwiaSIsImxlbmd0aCIsImhhbmRsZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJnZXREYXRhIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsQ0FBUCxrQ0FBMEIsVUFBU0EsVUFBVCxFQUFxQjs7QUFFOUM7O0FBRUEsS0FBSUMsY0FBYyxLQUFsQjtBQUNBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsQ0FBVCxFQUFZO0FBQzlCLE1BQUlBLEVBQUVDLElBQUYsS0FBVyxlQUFmLEVBQWdDO0FBQy9CSCxTQUFNRSxFQUFFRSxFQUFSLElBQWM7QUFDYkEsUUFBSUYsRUFBRUUsRUFETztBQUViQyxZQUFRO0FBRkssSUFBZDtBQUlBO0FBQ0QsTUFBSUgsRUFBRUMsSUFBRixLQUFXLGtCQUFmLEVBQW1DO0FBQ2xDLE9BQUksQ0FBQ0gsTUFBTU0sY0FBTixDQUFxQkosRUFBRUUsRUFBdkIsQ0FBTCxFQUFpQztBQUNqQyxVQUFPSixNQUFNRSxFQUFFRSxFQUFSLENBQVA7QUFDQTs7QUFHRCxNQUFJRixFQUFFQyxJQUFGLEtBQVcsZ0JBQWYsRUFBaUM7QUFDaEMsT0FBSSxDQUFDSCxNQUFNTSxjQUFOLENBQXFCSixFQUFFRSxFQUF2QixDQUFMLEVBQWlDO0FBQ2pDLE9BQUlKLE1BQU1FLEVBQUVFLEVBQVIsRUFBWUMsTUFBWixLQUF1QixTQUEzQixFQUFzQzs7QUFFdENMLFNBQU1FLEVBQUVFLEVBQVIsRUFBWUMsTUFBWixHQUFxQixTQUFyQjs7QUFFQUUsZ0JBQWFDLFFBQWI7QUFDQTtBQUNELE1BQUlOLEVBQUVDLElBQUYsS0FBVyxrQkFBZixFQUFtQztBQUNsQyxPQUFJLENBQUNILE1BQU1NLGNBQU4sQ0FBcUJKLEVBQUVFLEVBQXZCLENBQUwsRUFBaUM7QUFDakMsT0FBSUosTUFBTUUsRUFBRUUsRUFBUixFQUFZQyxNQUFaLEtBQXVCLFdBQTNCLEVBQXdDOztBQUV4Q0wsU0FBTUUsRUFBRUUsRUFBUixFQUFZQyxNQUFaLEdBQXFCLFdBQXJCOztBQUVBRSxnQkFBYUMsUUFBYjtBQUNBO0FBQ0QsTUFBSU4sRUFBRUMsSUFBRixLQUFXLGlCQUFmLEVBQWtDO0FBQ2pDLE9BQUksQ0FBQ0gsTUFBTU0sY0FBTixDQUFxQkosRUFBRUUsRUFBdkIsQ0FBTCxFQUFpQztBQUNqQyxPQUFJSixNQUFNRSxFQUFFRSxFQUFSLEVBQVlDLE1BQVosS0FBdUIsU0FBM0IsRUFBc0M7O0FBRXRDTCxTQUFNRSxFQUFFRSxFQUFSLEVBQVlDLE1BQVosR0FBcUIsU0FBckI7O0FBRUFFLGdCQUFhQyxRQUFiO0FBQ0E7QUFDRCxFQXJDRDs7QUF1Q0EsS0FBSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDdEJYLGFBQVdZLFNBQVgsQ0FBcUJULFlBQXJCO0FBQ0EsRUFGRDs7QUFJQSxLQUFJTSxlQUFlLFlBQVc7QUFDN0IsTUFBSUksWUFBWSxFQUFoQjs7QUFFQSxNQUFJSCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ksS0FBVCxFQUFnQjtBQUM5QixRQUFLLElBQUlDLElBQUlGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkNBLEdBQTNDLEVBQWdEO0FBQy9DRixjQUFVRSxDQUFWLEVBQWFELEtBQWI7QUFDQTtBQUNELEdBSkQ7QUFLQSxNQUFJRixZQUFZLFNBQVpBLFNBQVksQ0FBU0ssT0FBVCxFQUFrQjtBQUNqQ0osYUFBVUssSUFBVixDQUFlRCxPQUFmO0FBQ0EsR0FGRDtBQUdBLE1BQUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTRixPQUFULEVBQWtCO0FBQ25DLFFBQUssSUFBSUYsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixVQUFVRyxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJRixVQUFVRSxDQUFWLEtBQWdCRSxPQUFwQixFQUE2QjtBQUM1QkosZUFBVU8sTUFBVixDQUFpQkwsR0FBakIsRUFBc0IsQ0FBdEI7QUFDQTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05MLGFBQVVBLFFBREo7QUFFTkUsY0FBV0EsU0FGTDtBQUdOTyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ05uQixVQUFPQTtBQURELEdBQVA7QUFHQSxFQUpEOztBQU1BLEtBQUksQ0FBQ0QsV0FBTCxFQUFrQjtBQUNqQkEsZ0JBQWMsSUFBZDtBQUNBVTtBQUNBOztBQUVELFFBQU87QUFDTkYsZ0JBQWNBLFlBRFI7QUFFTlksV0FBU0E7QUFGSCxFQUFQO0FBSUEsQ0EzRkQiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi9kaXNwYXRjaGVyJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0dmFyIGl0ZW1zID0ge31cblxuXHR2YXIgX2hhbmRsZUV2ZW50ID0gZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnR5cGUgPT09ICdhamF4LWZvcm0tYWRkJykge1xuXHRcdFx0aXRlbXNbZS5pZF0gPSB7XG5cdFx0XHRcdGlkOiBlLmlkLFxuXHRcdFx0XHRzdGF0dXM6ICd3YWl0aW5nJ1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZS50eXBlID09PSAnYWpheC1mb3JtLXJlbW92ZScpIHtcblx0XHRcdGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkoZS5pZCkpIHJldHVybjtcblx0XHRcdGRlbGV0ZSBpdGVtc1tlLmlkXTtcblx0XHR9XG5cblxuXHRcdGlmIChlLnR5cGUgPT09ICdhamF4LWZvcm0tc2VuZCcpIHtcblx0XHRcdGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkoZS5pZCkpIHJldHVybjtcblx0XHRcdGlmIChpdGVtc1tlLmlkXS5zdGF0dXMgPT09ICdzZW5kaW5nJykgcmV0dXJuO1xuXG5cdFx0XHRpdGVtc1tlLmlkXS5zdGF0dXMgPSAnc2VuZGluZyc7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCgpO1xuXHRcdH1cblx0XHRpZiAoZS50eXBlID09PSAnYWpheC1mb3JtLXN1Ym1pdCcpIHtcblx0XHRcdGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkoZS5pZCkpIHJldHVybjtcblx0XHRcdGlmIChpdGVtc1tlLmlkXS5zdGF0dXMgPT09ICdzdWJtaXR0ZWQnKSByZXR1cm47XG5cblx0XHRcdGl0ZW1zW2UuaWRdLnN0YXR1cyA9ICdzdWJtaXR0ZWQnO1xuXG5cdFx0XHRldmVudEVtaXR0ZXIuZGlzcGF0Y2goKTtcblx0XHR9XG5cdFx0aWYgKGUudHlwZSA9PT0gJ2FqYXgtZm9ybS1yZXNldCcpIHtcblx0XHRcdGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkoZS5pZCkpIHJldHVybjtcblx0XHRcdGlmIChpdGVtc1tlLmlkXS5zdGF0dXMgPT09ICd3YWl0aW5nJykgcmV0dXJuO1xuXG5cdFx0XHRpdGVtc1tlLmlkXS5zdGF0dXMgPSAnd2FpdGluZyc7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCgpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKF9oYW5kbGVFdmVudCk7XG5cdH1cblxuXHR2YXIgZXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIF9oYW5kbGVycyA9IFtdO1xuXG5cdFx0dmFyIGRpc3BhdGNoID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0X2hhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdF9oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdH1cblx0XHR2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRcdGlmIChfaGFuZGxlcnNbaV0gPT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdF9oYW5kbGVycy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRkaXNwYXRjaDogZGlzcGF0Y2gsXG5cdFx0XHRzdWJzY3JpYmU6IHN1YnNjcmliZSxcblx0XHRcdHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuXHRcdH1cblx0fSgpO1xuXG5cdHZhciBnZXREYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGl0ZW1zOiBpdGVtc1xuXHRcdH1cblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cdFx0X2luaXQoKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZXZlbnRFbWl0dGVyOiBldmVudEVtaXR0ZXIsXG5cdFx0Z2V0RGF0YTogZ2V0RGF0YVxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZm9ybS5zdG9yZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'input-id-';\n\tvar idNum = 1;\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (element.value) {\n\t\t\telement.parentNode.classList.add('not-empty');\n\t\t}\n\n\t\telement.addEventListener('focus', function () {\n\t\t\telement.parentNode.classList.add('focus');\n\t\t}, false);\n\t\telement.addEventListener('blur', function () {\n\t\t\telement.parentNode.classList.remove('focus');\n\t\t}, false);\n\n\t\telement.addEventListener('keyup', function () {\n\t\t\tif (element.value) {\n\t\t\t\telement.parentNode.classList.add('not-empty');\n\t\t\t} else {\n\t\t\t\telement.parentNode.classList.remove('not-empty');\n\t\t\t}\n\t\t}, false);\n\t\telement.addEventListener('change', function () {\n\t\t\tif (element.value) {\n\t\t\t\telement.parentNode.classList.add('not-empty');\n\t\t\t} else {\n\t\t\t\telement.parentNode.classList.remove('not-empty');\n\t\t\t}\n\t\t}, false);\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\tvar inputs = Array.prototype.slice.call(document.getElementsByTagName('input'));\n\t\tvar textareas = Array.prototype.slice.call(document.getElementsByTagName('textarea'));\n\n\t\telements = inputs.concat(textareas);\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZm9ybS1mb2N1cy52aWV3LmpzPzdiNmEiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsIml0ZW1zIiwiaWROYW1lIiwiaWROdW0iLCJfYWRkIiwiZWxlbWVudCIsImlkIiwiZ2V0QXR0cmlidXRlIiwidmFsdWUiLCJwYXJlbnROb2RlIiwiY2xhc3NMaXN0IiwiYWRkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImxlbmd0aCIsImlucHV0cyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRleHRhcmVhcyIsImNvbmNhdCIsImluaXQiLCJzdWJzY3JpYmUiLCJlIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQSxLQUFJQyxTQUFTLFdBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7O0FBR0EsS0FBSUMsT0FBTyxTQUFQQSxJQUFPLENBQVNILEtBQVQsRUFBZ0JJLE9BQWhCLEVBQXlCO0FBQ25DLE1BQUlDLEtBQUtELFFBQVFFLFlBQVIsQ0FBcUIsU0FBckIsQ0FBVDs7QUFFQSxNQUFJRixRQUFRRyxLQUFaLEVBQW1CO0FBQ2xCSCxXQUFRSSxVQUFSLENBQW1CQyxTQUFuQixDQUE2QkMsR0FBN0IsQ0FBaUMsV0FBakM7QUFDQTs7QUFFRE4sVUFBUU8sZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsWUFBVztBQUM1Q1AsV0FBUUksVUFBUixDQUFtQkMsU0FBbkIsQ0FBNkJDLEdBQTdCLENBQWlDLE9BQWpD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Q0FBYixFQUFnQkEsSUFBSUwsU0FBU00sTUFBN0IsRUFBcUNELEdBQXJDLEVBQTBDO0FBQ3pDSixTQUFNakIsS0FBTixFQUFhZ0IsU0FBU0ssQ0FBVCxDQUFiO0FBQ0E7QUFDRCxPQUFLLElBQUloQixFQUFULElBQWVMLEtBQWYsRUFBc0I7QUFDckIsT0FBSUEsTUFBTW1CLGNBQU4sQ0FBcUJkLEVBQXJCLENBQUosRUFBOEI7QUFDN0JlLGNBQVVwQixLQUFWLEVBQWlCZ0IsUUFBakIsRUFBMkJoQixNQUFNSyxFQUFOLENBQTNCO0FBQ0E7QUFDRDtBQUNELEVBOUNEOztBQWdEQSxLQUFJMkIsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDckJqQjs7QUFFQWhCLGFBQVdrQyxTQUFYLENBQXFCLFVBQVNDLENBQVQsRUFBWTtBQUNoQyxPQUFJQSxFQUFFQyxJQUFGLEtBQVcsUUFBZixFQUF5QjtBQUN4QnBCO0FBQ0E7QUFDRCxHQUpEO0FBS0EsRUFSRDs7QUFVQSxRQUFPO0FBQ05pQixRQUFNQTtBQURBLEVBQVA7QUFHQSxDQW5IRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9O1xuXG5cdHZhciBpZE5hbWUgPSAnaW5wdXQtaWQtJztcblx0dmFyIGlkTnVtICA9IDE7XG5cblxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblxuXHRcdGlmIChlbGVtZW50LnZhbHVlKSB7XG5cdFx0XHRlbGVtZW50LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnbm90LWVtcHR5Jyk7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG5cdFx0fSwgZmFsc2UpO1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJyk7XG5cdFx0fSwgZmFsc2UpO1xuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKGVsZW1lbnQudmFsdWUpIHtcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ25vdC1lbXB0eScpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ25vdC1lbXB0eScpO1xuXHRcdFx0fVxuXHRcdH0sIGZhbHNlKTtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKGVsZW1lbnQudmFsdWUpIHtcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ25vdC1lbXB0eScpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ25vdC1lbXB0eScpO1xuXHRcdFx0fVxuXHRcdH0sIGZhbHNlKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXHRcdH1cblxuXHRcdGl0ZW1zW2lkXSA9IHtcblx0XHRcdGlkOiBpZCxcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRcblx0XHR9XG5cdH07XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fTtcblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGJhY2tDaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50cywgaXRlbSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBpdGVtLmVsZW1lbnQ7XG5cdFx0XHR2YXIgZm91bmQgICA9IGZhbHNlO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50c1tpXSA9PT0gaXRlbS5lbGVtZW50KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X3JlbW92ZShpdGVtcywgaXRlbSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpbnB1dHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKSk7XG5cdFx0dmFyIHRleHRhcmVhcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZXh0YXJlYScpKTtcblxuXHRcdGVsZW1lbnRzID0gaW5wdXRzLmNvbmNhdCh0ZXh0YXJlYXMpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoZWNrKGl0ZW1zLCBlbGVtZW50c1tpXSk7XG5cdFx0fVxuXHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdGJhY2tDaGVjayhpdGVtcywgZWxlbWVudHMsIGl0ZW1zW2lkXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZU11dGF0ZSgpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZm9ybS1mb2N1cy52aWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'responce-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange(e) {\n\t\tvar id;\n\t\tvar inner;\n\n\t\tif (e.response.hasOwnProperty('response') && e.response.response !== '') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\n\t\t\tinner = items[e.id].element.getElementsByClassName('responce-inner')[0];\n\n\t\t\tif (e.response.status === 'success') {\n\t\t\t\tinner.innerHTML = e.response.response;\n\t\t\t\titems[e.id].element.classList.remove('status-error');\n\t\t\t\titems[e.id].element.classList.add('status-success');\n\t\t\t\titems[e.id].element.classList.add('active');\n\t\t\t}\n\t\t\tif (e.response.status === 'error') {\n\t\t\t\tinner.innerHTML = e.response.response;\n\t\t\t\titems[e.id].element.classList.add('status-error');\n\t\t\t\titems[e.id].element.classList.remove('status-success');\n\t\t\t\titems[e.id].element.classList.add('active');\n\t\t\t}\n\t\t} else {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tinner.innerHTML = '';\n\t\t\titems[e.id].element.classList.remove('active');\n\t\t}\n\n\t\tif (e.type === 'ajax-form-reset') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tinner.innerHTML = '';\n\t\t\titems[e.id].element.classList.remove('active');\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('view-form-response');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t\tif (e.type === 'ajax-form-submit') {\n\t\t\t\t_handleChange(e);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(15), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, breakpointStore) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'popup-id-';\n\tvar idNum = 1;\n\tvar pw;\n\tvar body;\n\tvar active = false;\n\n\tvar _preventTouchScroll = function _preventTouchScroll(e) {\n\t\t//e.preventDefault();\n\t\te.stopPropagation();\n\t};\n\n\tvar _handleChange = function _handleChange(storeData) {\n\t\tvar storeData = store.getData();\n\n\t\tvar ww1 = document.documentElement.clientWidth;\n\t\tvar ww2;\n\t\tvar diff = 0;\n\t\tvar overflow = false;\n\n\t\tif (active === storeData.active) return;\n\n\t\tif (items.hasOwnProperty(storeData.active)) {\n\t\t\toverflow = items[storeData.active].element.getElementsByClassName('popup-overflow')[0];\n\t\t}\n\n\t\tif (active) {\n\t\t\tif (storeData.active === \"call\" && breakpointStore.getData().breakpoint.name === \"desktop\") {\n\t\t\t\tbody.classList.remove('prevent-scroll-1');\n\t\t\t\tbody.classList.add('prevent-scroll-2');\n\t\t\t}\n\t\t\tif (storeData.active === \"menu\" || storeData.active === \"job-popup\") {\n\t\t\t\tbody.classList.add('prevent-scroll-1');\n\t\t\t}\n\n\t\t\tif (items[active]) items[active].element.classList.remove('active');\n\t\t\tif (items[active] && items[active].inner) {\n\t\t\t\titems[active].inner.style.paddingRight = '0px';\n\t\t\t}\n\t\t} else {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'overlay-show'\n\t\t\t});\n\t\t\tif (overflow) {\n\t\t\t\toverflow.addEventListener('touchmove', _preventTouchScroll);\n\t\t\t}\n\t\t\t// body.addEventListener('touchmove', _preventTouchScroll);\n\n\t\t\tif (storeData.active === \"menu\") {\n\t\t\t\tbody.classList.add('prevent-scroll-1');\n\t\t\t} else if (storeData.active === \"ask\" || storeData.active === \"job-popup\") {\n\t\t\t\tbody.classList.add('prevent-scroll-2');\n\t\t\t} else {\n\t\t\t\tbody.classList.add('prevent-scroll');\n\t\t\t}\n\n\t\t\tww2 = document.documentElement.clientWidth;\n\t\t\tdiff = ww2 - ww1;\n\t\t\tif (diff < 0) diff = 0;\n\t\t}\n\n\t\tactive = storeData.active;\n\n\t\tif (active) {\n\t\t\tif (items[active]) items[active].element.classList.add('active');\n\t\t\tif (items[active] && items[active].inner) {\n\t\t\t\titems[active].inner.style.paddingRight = diff + 'px';\n\t\t\t}\n\t\t} else {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'overlay-hide'\n\t\t\t});\n\n\t\t\tif (overflow) {\n\t\t\t\toverflow.removeEventListener('touchmove', _preventTouchScroll);\n\t\t\t}\n\t\t\t// body.removeEventListener('touchmove', _preventTouchScroll);\n\t\t\tbody.classList.remove('prevent-scroll');\n\t\t\tbody.classList.remove('prevent-scroll-1');\n\t\t\tbody.classList.remove('prevent-scroll-2');\n\t\t}\n\n\t\tif (pw) {\n\t\t\tpw.style.marginRight = diff + 'px';\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar inner = element.getElementsByClassName('overlay')[0];\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tinner: inner\n\t\t};\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'popup-add',\n\t\t\tid: id\n\t\t});\n\n\t\tif (element.classList.contains('active')) {\n\t\t\tactive = id;\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'popup-open',\n\t\t\t\tid: id\n\t\t\t});\n\t\t}\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'popup-remove',\n\t\t\tid: id\n\t\t});\n\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\tpw = document.getElementsByClassName('page-wrapper')[0];\n\t\tbody = document.getElementsByTagName('body')[0];\n\n\t\tif (!pw) {\n\t\t\tconsole.warn('page-wrapper element is missing');\n\t\t}\n\n\t\telements = document.getElementsByClassName('view-popup');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\t\"use strict\";\n\n\tvar active = false;\n\tvar initialized = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'popup-toggle') {\n\n\t\t\tif (active === e.id) {\n\t\t\t\tactive = false;\n\t\t\t} else {\n\t\t\t\tactive = e.id;\n\t\t\t}\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\n\t\tif (e.type === 'popup-open') {\n\t\t\tif (active === e.id) return;\n\t\t\tactive = e.id;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\n\t\tif (e.type === 'popup-close') {\n\t\t\tif (active === false) return;\n\t\t\tactive = false;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\n\t\tif (e.type === 'popup-close-all') {\n\t\t\tif (active === false) return;\n\t\t\tactive = false;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tactive: active\n\t\t};\n\t};\n\n\tvar getDataById = function getDataById(id) {\n\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\tif (items[i].id === id) return items[i];\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData,\n\t\tgetDataById: getDataById\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3BvcHVwL3BvcHVwLnN0b3JlLmpzP2VmZjIiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsImFjdGl2ZSIsImluaXRpYWxpemVkIiwiX2hhbmRsZUV2ZW50IiwiZSIsInR5cGUiLCJpZCIsImV2ZW50RW1pdHRlciIsImRpc3BhdGNoIiwiX2luaXQiLCJzdWJzY3JpYmUiLCJfaGFuZGxlcnMiLCJldmVudCIsImkiLCJsZW5ndGgiLCJoYW5kbGVyIiwicHVzaCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwiZ2V0RGF0YSIsImdldERhdGFCeUlkIiwiaXRlbXMiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxDQUFQLGtDQUEwQixVQUFTQSxVQUFULEVBQXFCO0FBQzlDOztBQUVBLEtBQUlDLFNBQVMsS0FBYjtBQUNBLEtBQUlDLGNBQWMsS0FBbEI7O0FBRUEsS0FBSUMsZUFBZSxTQUFmQSxZQUFlLENBQVNDLENBQVQsRUFBWTtBQUM5QixNQUFJQSxFQUFFQyxJQUFGLEtBQVcsY0FBZixFQUErQjs7QUFFOUIsT0FBSUosV0FBV0csRUFBRUUsRUFBakIsRUFBcUI7QUFDcEJMLGFBQVMsS0FBVDtBQUNBLElBRkQsTUFFTztBQUNOQSxhQUFTRyxFQUFFRSxFQUFYO0FBQ0E7O0FBRURDLGdCQUFhQyxRQUFiLENBQXNCO0FBQ3JCSCxVQUFNO0FBRGUsSUFBdEI7QUFHQTs7QUFFRCxNQUFJRCxFQUFFQyxJQUFGLEtBQVcsWUFBZixFQUE2QjtBQUM1QixPQUFJSixXQUFXRyxFQUFFRSxFQUFqQixFQUFxQjtBQUNyQkwsWUFBU0csRUFBRUUsRUFBWDs7QUFFQUMsZ0JBQWFDLFFBQWIsQ0FBc0I7QUFDckJILFVBQU07QUFEZSxJQUF0QjtBQUdBOztBQUVELE1BQUlELEVBQUVDLElBQUYsS0FBVyxhQUFmLEVBQThCO0FBQzdCLE9BQUlKLFdBQVcsS0FBZixFQUFzQjtBQUN0QkEsWUFBUyxLQUFUOztBQUVBTSxnQkFBYUMsUUFBYixDQUFzQjtBQUNyQkgsVUFBTTtBQURlLElBQXRCO0FBR0E7O0FBRUQsTUFBSUQsRUFBRUMsSUFBRixLQUFXLGlCQUFmLEVBQWtDO0FBQ2pDLE9BQUlKLFdBQVcsS0FBZixFQUFzQjtBQUN0QkEsWUFBUyxLQUFUOztBQUVBTSxnQkFBYUMsUUFBYixDQUFzQjtBQUNyQkgsVUFBTTtBQURlLElBQXRCO0FBR0E7QUFDRCxFQXhDRDs7QUEwQ0EsS0FBSUksUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDdEJULGFBQVdVLFNBQVgsQ0FBcUJQLFlBQXJCO0FBQ0EsRUFGRDs7QUFJQSxLQUFJSSxlQUFlLFlBQVc7QUFDN0IsTUFBSUksWUFBWSxFQUFoQjs7QUFFQSxNQUFJSCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ksS0FBVCxFQUFnQjtBQUM5QixRQUFLLElBQUlDLElBQUlGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkNBLEdBQTNDLEVBQWdEO0FBQy9DRixjQUFVRSxDQUFWLEVBQWFELEtBQWI7QUFDQTtBQUNELEdBSkQ7QUFLQSxNQUFJRixZQUFZLFNBQVpBLFNBQVksQ0FBU0ssT0FBVCxFQUFrQjtBQUNqQ0osYUFBVUssSUFBVixDQUFlRCxPQUFmO0FBQ0EsR0FGRDtBQUdBLE1BQUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTRixPQUFULEVBQWtCO0FBQ25DLFFBQUssSUFBSUYsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixVQUFVRyxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJRixVQUFVRSxDQUFWLEtBQWdCRSxPQUFwQixFQUE2QjtBQUM1QkosZUFBVU8sTUFBVixDQUFpQkwsR0FBakIsRUFBc0IsQ0FBdEI7QUFDQTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05MLGFBQVVBLFFBREo7QUFFTkUsY0FBV0EsU0FGTDtBQUdOTyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ05sQixXQUFRQTtBQURGLEdBQVA7QUFHQSxFQUpEOztBQU1BLEtBQUltQixjQUFjLFNBQWRBLFdBQWMsQ0FBU2QsRUFBVCxFQUFhO0FBQzlCLE9BQUssSUFBSU8sSUFBSVEsTUFBTVAsTUFBTixHQUFlLENBQTVCLEVBQStCRCxLQUFLLENBQXBDLEVBQXVDQSxHQUF2QyxFQUE0QztBQUMzQyxPQUFJUSxNQUFNUixDQUFOLEVBQVNQLEVBQVQsS0FBZ0JBLEVBQXBCLEVBQXdCLE9BQU9lLE1BQU1SLENBQU4sQ0FBUDtBQUN4Qjs7QUFFRCxTQUFPLEtBQVA7QUFDQSxFQU5EOztBQVFBLEtBQUksQ0FBQ1gsV0FBTCxFQUFrQjtBQUNqQkEsZ0JBQWMsSUFBZDtBQUNBTztBQUNBOztBQUVELFFBQU87QUFDTkYsZ0JBQWNBLFlBRFI7QUFFTlksV0FBU0EsT0FGSDtBQUdOQyxlQUFhQTtBQUhQLEVBQVA7QUFLQSxDQXRHRCIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgYWN0aXZlID0gZmFsc2U7XG5cdHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdHZhciBfaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUudHlwZSA9PT0gJ3BvcHVwLXRvZ2dsZScpIHtcblxuXHRcdFx0aWYgKGFjdGl2ZSA9PT0gZS5pZCkge1xuXHRcdFx0XHRhY3RpdmUgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFjdGl2ZSA9IGUuaWQ7XG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoZS50eXBlID09PSAncG9wdXAtb3BlbicpIHtcblx0XHRcdGlmIChhY3RpdmUgPT09IGUuaWQpIHJldHVybjtcblx0XHRcdGFjdGl2ZSA9IGUuaWQ7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoZS50eXBlID09PSAncG9wdXAtY2xvc2UnKSB7XG5cdFx0XHRpZiAoYWN0aXZlID09PSBmYWxzZSkgcmV0dXJuO1xuXHRcdFx0YWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoZS50eXBlID09PSAncG9wdXAtY2xvc2UtYWxsJykge1xuXHRcdFx0aWYgKGFjdGl2ZSA9PT0gZmFsc2UpIHJldHVybjtcblx0XHRcdGFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRldmVudEVtaXR0ZXIuZGlzcGF0Y2goe1xuXHRcdFx0XHR0eXBlOiAnY2hhbmdlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoX2hhbmRsZUV2ZW50KTtcblx0fVxuXG5cdHZhciBldmVudEVtaXR0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgX2hhbmRsZXJzID0gW107XG5cblx0XHR2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRfaGFuZGxlcnNbaV0oZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0X2hhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cdFx0fVxuXHRcdHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdFx0aWYgKF9oYW5kbGVyc1tpXSA9PSBoYW5kbGVyKSB7XG5cdFx0XHRcdFx0X2hhbmRsZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGRpc3BhdGNoOiBkaXNwYXRjaCxcblx0XHRcdHN1YnNjcmliZTogc3Vic2NyaWJlLFxuXHRcdFx0dW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG5cdFx0fVxuXHR9KCk7XG5cblx0dmFyIGdldERhdGEgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0YWN0aXZlOiBhY3RpdmVcblx0XHR9XG5cdH1cblxuXHR2YXIgZ2V0RGF0YUJ5SWQgPSBmdW5jdGlvbihpZCkge1xuXHRcdGZvciAodmFyIGkgPSBpdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0aWYgKGl0ZW1zW2ldLmlkID09PSBpZCkgcmV0dXJuIGl0ZW1zW2ldO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cdFx0X2luaXQoKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZXZlbnRFbWl0dGVyOiBldmVudEVtaXR0ZXIsXG5cdFx0Z2V0RGF0YTogZ2V0RGF0YSxcblx0XHRnZXREYXRhQnlJZDogZ2V0RGF0YUJ5SWRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9wb3B1cC9wb3B1cC5zdG9yZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\tvar initialized = false;\n\n\tvar breakPoints = [{\n\t\tsize: 0,\n\t\tname: 'mobile'\n\t}, {\n\t\tsize: 640,\n\t\tname: 'tablet'\n\t}, {\n\t\tsize: 1200,\n\t\tname: 'desktop'\n\t}];\n\n\tvar currentBreakPoint = false;\n\n\tvar size = {\n\t\twidth: 0,\n\t\theight: 0\n\t};\n\n\tvar _windowSize = function _windowSize() {\n\t\tvar width = 0,\n\t\t    height = 0;\n\t\tif (typeof window.innerWidth === 'number') {\n\t\t\twidth = window.innerWidth;\n\t\t\theight = window.innerHeight;\n\t\t} else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {\n\t\t\twidth = document.documentElement.clientWidth;\n\t\t\theight = document.documentElement.clientHeight;\n\t\t} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {\n\t\t\twidth = document.body.clientWidth;\n\t\t\theight = document.body.clientHeight;\n\t\t}\n\t\treturn {\n\t\t\theight: height,\n\t\t\twidth: width\n\t\t};\n\t};\n\n\tvar _onresize = function _onresize() {\n\t\tsize = _windowSize();\n\n\t\tvar _getBreakPoint = function _getBreakPoint() {\n\t\t\tfor (var i = breakPoints.length - 1; i >= 0; i--) {\n\t\t\t\tif (size.width >= breakPoints[i].size) {\n\t\t\t\t\tif (currentBreakPoint === breakPoints[i]) return;\n\t\t\t\t\tcurrentBreakPoint = breakPoints[i];\n\n\t\t\t\t\tdocument.getElementsByTagName('html')[0].classList.add(currentBreakPoint.name);\n\t\t\t\t\teventEmitter.dispatch({\n\t\t\t\t\t\ttype: 'change'\n\t\t\t\t\t});\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_getBreakPoint();\n\t};\n\n\tvar _init = function _init() {\n\t\tsize = _windowSize();\n\t\t_onresize();\n\t\twindow.addEventListener('resize', _onresize, false);\n\t\twindow.addEventListener('orientationchange', _onresize, false);\n\t\twindow.addEventListener('load', _onresize, false);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tbreakpoint: currentBreakPoint\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3Jlc2l6ZS9icmVha3BvaW50LnN0b3JlLmpzPzI2ZTUiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsImluaXRpYWxpemVkIiwiYnJlYWtQb2ludHMiLCJzaXplIiwibmFtZSIsImN1cnJlbnRCcmVha1BvaW50Iiwid2lkdGgiLCJoZWlnaHQiLCJfd2luZG93U2l6ZSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJib2R5IiwiX29ucmVzaXplIiwiX2dldEJyZWFrUG9pbnQiLCJpIiwibGVuZ3RoIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJldmVudEVtaXR0ZXIiLCJkaXNwYXRjaCIsInR5cGUiLCJfaW5pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlcnMiLCJldmVudCIsInN1YnNjcmliZSIsImhhbmRsZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJnZXREYXRhIiwiYnJlYWtwb2ludCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7QUFDOUMsS0FBSUMsY0FBYyxLQUFsQjs7QUFFQSxLQUFJQyxjQUFjLENBQ2pCO0FBQ0NDLFFBQU0sQ0FEUDtBQUVDQyxRQUFNO0FBRlAsRUFEaUIsRUFJZDtBQUNGRCxRQUFNLEdBREo7QUFFRkMsUUFBTTtBQUZKLEVBSmMsRUFPZDtBQUNGRCxRQUFNLElBREo7QUFFRkMsUUFBTTtBQUZKLEVBUGMsQ0FBbEI7O0FBYUEsS0FBSUMsb0JBQW9CLEtBQXhCOztBQUVBLEtBQUlGLE9BQU87QUFDVkcsU0FBTyxDQURHO0FBRVZDLFVBQVE7QUFGRSxFQUFYOztBQUtBLEtBQUlDLGNBQWMsU0FBZEEsV0FBYyxHQUFXO0FB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QTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05NLGFBQVVBLFFBREo7QUFFTk0sY0FBV0EsU0FGTDtBQUdORyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ05DLGVBQVloQztBQUROLEdBQVA7QUFHQSxFQUpEOztBQU1BLEtBQUksQ0FBQ0osV0FBTCxFQUFrQjtBQUNqQkEsZ0JBQWMsSUFBZDtBQUNBMEI7QUFDQTs7QUFFRCxRQUFPO0FBQ05ILGdCQUFjQSxZQURSO0FBRU5ZLFdBQVNBO0FBRkgsRUFBUDtBQUlBLENBaEhEIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlciddLCBmdW5jdGlvbihkaXNwYXRjaGVyKSB7XG5cdHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdHZhciBicmVha1BvaW50cyA9IFtcblx0XHR7XG5cdFx0XHRzaXplOiAwLFxuXHRcdFx0bmFtZTogJ21vYmlsZSdcblx0XHR9LCB7XG5cdFx0XHRzaXplOiA2NDAsXG5cdFx0XHRuYW1lOiAndGFibGV0J1xuXHRcdH0sIHtcblx0XHRcdHNpemU6IDEyMDAsXG5cdFx0XHRuYW1lOiAnZGVza3RvcCdcblx0XHR9XG5cdF07XG5cblx0dmFyIGN1cnJlbnRCcmVha1BvaW50ID0gZmFsc2U7XG5cblx0dmFyIHNpemUgPSB7XG5cdFx0d2lkdGg6IDAsXG5cdFx0aGVpZ2h0OiAwXG5cdH1cblxuXHR2YXIgX3dpbmRvd1NpemUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xuXHRcdGlmKCB0eXBlb2YoIHdpbmRvdy5pbm5lcldpZHRoICkgPT09ICdudW1iZXInICkge1xuXHRcdFx0d2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0XHR9IGVsc2UgaWYoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICkgKSB7XG5cdFx0XHR3aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cdFx0fSBlbHNlIGlmKCBkb2N1bWVudC5ib2R5ICYmICggZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCB8fCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCApICkge1xuXHRcdFx0d2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuXHRcdFx0aGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdHdpZHRoOiB3aWR0aFxuXHRcdH1cblx0fVxuXG5cdHZhciBfb25yZXNpemUgPSBmdW5jdGlvbigpIHtcblx0XHRzaXplID0gX3dpbmRvd1NpemUoKTtcblxuXHRcdHZhciBfZ2V0QnJlYWtQb2ludCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IGJyZWFrUG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdGlmIChzaXplLndpZHRoID49IGJyZWFrUG9pbnRzW2ldLnNpemUpIHtcblx0XHRcdFx0XHRpZiAoY3VycmVudEJyZWFrUG9pbnQgPT09IGJyZWFrUG9pbnRzW2ldKSByZXR1cm47XG5cdFx0XHRcdFx0Y3VycmVudEJyZWFrUG9pbnQgPSBicmVha1BvaW50c1tpXTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLmNsYXNzTGlzdC5hZGQoY3VycmVudEJyZWFrUG9pbnQubmFtZSk7XG5cdFx0XHRcdFx0ZXZlbnRFbWl0dGVyLmRpc3BhdGNoKHtcblx0XHRcdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRfZ2V0QnJlYWtQb2ludCgpO1xuXHR9XG5cblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0c2l6ZSA9IF93aW5kb3dTaXplKCk7XG5cdFx0X29ucmVzaXplKCk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIF9vbnJlc2l6ZSwgZmFsc2UpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIF9vbnJlc2l6ZSwgZmFsc2UpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgX29ucmVzaXplLCBmYWxzZSk7XG5cdH1cblxuXHR2YXIgZXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIF9oYW5kbGVycyA9IFtdO1xuXG5cdFx0dmFyIGRpc3BhdGNoID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0X2hhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdF9oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdH1cblx0XHR2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRcdGlmIChfaGFuZGxlcnNbaV0gPT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdF9oYW5kbGVycy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRkaXNwYXRjaDogZGlzcGF0Y2gsXG5cdFx0XHRzdWJzY3JpYmU6IHN1YnNjcmliZSxcblx0XHRcdHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuXHRcdH1cblx0fSgpO1xuXG5cdHZhciBnZXREYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGJyZWFrcG9pbnQ6IGN1cnJlbnRCcmVha1BvaW50XG5cdFx0fVxuXHR9XG5cblx0aWYgKCFpbml0aWFsaXplZCkge1xuXHRcdGluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRfaW5pdCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcixcblx0XHRnZXREYXRhOiBnZXREYXRhXG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcmVzaXplL2JyZWFrcG9pbnQuc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(TweenMax) {'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(15), __webpack_require__(8), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, resizeStore, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'popup-control-id-';\n\tvar idNum = 1;\n\tvar active = false;\n\tvar inner;\n\n\tvar circle = false;\n\n\tvar _handleChange = function _handleChange() {\n\n\t\tvar storeData = store.getData();\n\n\t\tif (active === storeData.active) return;\n\n\t\tif (active && items.hasOwnProperty(active)) {\n\t\t\titems[active].element.classList.remove('active');\n\t\t}\n\t\tactive = storeData.active;\n\t\tif (active && items.hasOwnProperty(active)) {\n\t\t\titems[active].element.classList.add('active');\n\t\t\tif (items[active].id === 'help' || items[active].id === 'calc' || items[active].id === 'letter') {\n\t\t\t\tanimateUncover();\n\t\t\t}\n\t\t}\n\t\tif (storeData.active === false || items[active].id === 'menu') {\n\t\t\tanimateCover();\n\t\t}\n\t};\n\tfunction animateUncover() {\n\t\tif (!circle) {\n\t\t\tcircle = document.createElement('div');\n\t\t\tcircle.classList.add('circle');\n\n\t\t\tcircle.style.cssText = 'background: #ffffff; width: 0px; height: 0px; border-radius: 50%; position: fixed; right: -100px; bottom: -100px; z-index: 1000; transition: opacity 0.3s ease 0s;';\n\t\t\tinner.appendChild(circle);\n\t\t}\n\n\t\tvar width = resizeStore.getData().width;\n\t\tvar height = resizeStore.getData().height;\n\t\tvar calc;\n\t\tif (width > height) {\n\t\t\tcalc = width * 2.5;\n\t\t} else {\n\t\t\tcalc = height * 2.5;\n\t\t}\n\t\tTweenMax.to(circle, 0.5, { width: calc, height: calc, x: \"50%\", y: \"50%\" });\n\n\t\tsetTimeout(function del() {\n\t\t\tcircle.style.opacity = \"0\";\n\t\t}, 500);\n\t}\n\tfunction animateCover() {\n\t\tif (!circle) {\n\t\t\treturn;\n\t\t}\n\t\tcircle.style.opacity = \"1\";\n\t\tTweenMax.to(circle, 0.3, { width: 0, height: 0, x: \"50%\", y: \"50%\" });\n\n\t\tsetTimeout(function del() {\n\t\t\tcircle.style.opacity = \"0\";\n\t\t\tcircle.remove();\n\t\t\tcircle = false;\n\t\t}, 300);\n\t}\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\telement.addEventListener('click', _click);\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\tfunction _click(e) {\n\t\tvar id = e.currentTarget.getAttribute('data-id');\n\t\tif (id === 'call') {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'popup-open',\n\t\t\t\tid: id\n\t\t\t});\n\t\t} else {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'popup-toggle',\n\t\t\t\tid: id\n\t\t\t});\n\t\t}\n\t}\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('view-popup-toggle');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\tinner = document.getElementsByClassName('page-wrapper')[0];\n\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3BvcHVwL3BvcHVwLWNvbnRyb2xzLnZpZXcuanM/MzJiMiJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwic3RvcmUiLCJyZXNpemVTdG9yZSIsInV0aWxzIiwiaXRlbXMiLCJpZE5hbWUiLCJpZE51bSIsImFjdGl2ZSIsImlubmVyIiwiY2lyY2xlIiwiX2hhbmRsZUNoYW5nZSIsInN0b3JlRGF0YSIsImdldERhdGEiLCJoYXNPd25Qcm9wZXJ0eSIsImVsZW1lbnQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJpZCIsImFuaW1hdGVVbmNvdmVyIiwiYW5pbWF0ZUNvdmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJjc3NUZXh0IiwiYXBwZW5kQ2hpbGQiLCJ3aWR0aCIsImhlaWdodCIsImNhbGMiLCJUd2Vlbk1heCIsInRvIiwieCIsInkiLCJzZXRUaW1lb3V0IiwiZGVsIiwib3BhY2l0eSIsIl9hZGQiLCJnZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiX2NsaWNrIiwiZSIsImN1cnJlbnRUYXJnZXQiLCJkaXNwYXRjaCIsInR5cGUiLCJfcmVtb3ZlIiwiaXRlbSIsIl9oYW5kbGVNdXRhdGUiLCJlbGVtZW50cyIsImNoZWNrIiwiZm91bmQiLCJiYWNrQ2hlY2siLCJpIiwibGVuZ3RoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxFQUFrQix1QkFBbEIsRUFBbUMsc0JBQW5DLEVBQTZELHNCQUE3RCxDQUFQLGtDQUFpRixVQUFTQSxVQUFULEVBQXFCQyxLQUFyQixFQUE0QkMsV0FBNUIsRUFBeUNDLEtBQXpDLEVBQWdEOztBQUVoSTs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUEsS0FBSUMsU0FBUyxtQkFBYjtBQUNBLEtBQUlD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QixVQUFTaEIsQ0FBVCxFQUFZO0FBQ2hDLE9BQUlBLEVBQUVHLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCRztBQUNBcEM7QUFDQTtBQUNELEdBTEQ7QUFNQSxFQWREOztBQWdCQSxRQUFPO0FBQ040QyxRQUFNQTtBQURBLEVBQVA7QUFHQSxDQXhLRCxnSiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi9wb3B1cC5zdG9yZScsICcuLi9yZXNpemUvcmVzaXplLnN0b3JlJywgJy4uL3V0aWxzJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIsIHN0b3JlLCByZXNpemVTdG9yZSwgdXRpbHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdHZhciBpZE5hbWUgPSAncG9wdXAtY29udHJvbC1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblx0dmFyIGFjdGl2ZSA9IGZhbHNlO1xuXHR2YXIgaW5uZXI7XG5cblx0dmFyIGNpcmNsZSA9IGZhbHNlO1xuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgc3RvcmVEYXRhID0gc3RvcmUuZ2V0RGF0YSgpO1xuXG5cdFx0aWYgKGFjdGl2ZSA9PT0gc3RvcmVEYXRhLmFjdGl2ZSkgcmV0dXJuO1xuXG5cdFx0aWYgKGFjdGl2ZSAmJiBpdGVtcy5oYXNPd25Qcm9wZXJ0eShhY3RpdmUpKSB7XG5cdFx0XHRpdGVtc1thY3RpdmVdLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cdFx0fVxuXHRcdGFjdGl2ZSA9IHN0b3JlRGF0YS5hY3RpdmU7XG5cdFx0aWYgKGFjdGl2ZSAmJiBpdGVtcy5oYXNPd25Qcm9wZXJ0eShhY3RpdmUpKSB7XG5cdFx0XHRpdGVtc1thY3RpdmVdLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cdFx0XHRpZiAoaXRlbXNbYWN0aXZlXS5pZCA9PT0gJ2hlbHAnIHx8IGl0ZW1zW2FjdGl2ZV0uaWQgPT09ICdjYWxjJyB8fCBpdGVtc1thY3RpdmVdLmlkID09PSAnbGV0dGVyJykge1xuXHRcdFx0XHRhbmltYXRlVW5jb3ZlcigpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoc3RvcmVEYXRhLmFjdGl2ZSA9PT0gZmFsc2UgfHwgaXRlbXNbYWN0aXZlXS5pZCA9PT0gJ21lbnUnKSB7XG5cdFx0XHRhbmltYXRlQ292ZXIoKTtcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gYW5pbWF0ZVVuY292ZXIoKSB7XG5cdFx0aWYgKCFjaXJjbGUpIHtcblx0XHRcdGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0Y2lyY2xlLmNsYXNzTGlzdC5hZGQoJ2NpcmNsZScpO1xuXHRcdFx0XG5cdFx0XHRjaXJjbGUuc3R5bGUuY3NzVGV4dCA9ICdiYWNrZ3JvdW5kOiAjZmZmZmZmOyB3aWR0aDogMHB4OyBoZWlnaHQ6IDBweDsgYm9yZGVyLXJhZGl1czogNTAlOyBwb3NpdGlvbjogZml4ZWQ7IHJpZ2h0OiAtMTAwcHg7IGJvdHRvbTogLTEwMHB4OyB6LWluZGV4OiAxMDAwOyB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZSAwczsnO1xuXHRcdFx0aW5uZXIuYXBwZW5kQ2hpbGQoY2lyY2xlKTtcblx0XHR9XG5cdFx0XG5cdFx0dmFyIHdpZHRoID0gcmVzaXplU3RvcmUuZ2V0RGF0YSgpLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSByZXNpemVTdG9yZS5nZXREYXRhKCkuaGVpZ2h0O1xuXHRcdHZhciBjYWxjO1xuXHRcdGlmICh3aWR0aD5oZWlnaHQpIHtcblx0XHRcdGNhbGM9d2lkdGgqMi41O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjYWxjPWhlaWdodCoyLjU7XG5cdFx0fVxuXHRcdFR3ZWVuTWF4LnRvKGNpcmNsZSwgMC41LCB7d2lkdGg6Y2FsYywgaGVpZ2h0OmNhbGMsIHg6XCI1MCVcIiwgeTpcIjUwJVwifSk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uIGRlbCgpIHtcblx0XHRcdGNpcmNsZS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG5cdFx0fSwgNTAwKTtcblx0fVxuXHRmdW5jdGlvbiBhbmltYXRlQ292ZXIoKSB7XG5cdFx0aWYgKCFjaXJjbGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y2lyY2xlLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcblx0XHRUd2Vlbk1heC50byhjaXJjbGUsIDAuMywge3dpZHRoOjAsIGhlaWdodDowLCB4OlwiNTAlXCIsIHk6XCI1MCVcIn0pO1xuXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbiBkZWwoKSB7XG5cdFx0XHRjaXJjbGUuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuXHRcdFx0Y2lyY2xlLnJlbW92ZSgpO1xuXHRcdFx0Y2lyY2xlID0gZmFsc2U7XG5cdFx0fSwgMzAwKTtcblx0fVxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfY2xpY2spO1xuXG5cdFx0aXRlbXNbaWRdID0ge1xuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBfY2xpY2soZSkge1xuXHRcdHZhciBpZCA9IGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblx0XHRpZiAoaWQgPT09ICdjYWxsJykge1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdwb3B1cC1vcGVuJyxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdwb3B1cC10b2dnbGUnLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndmlldy1wb3B1cC10b2dnbGUnKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGVjayhpdGVtcywgZWxlbWVudHNbaV0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRiYWNrQ2hlY2soaXRlbXMsIGVsZW1lbnRzLCBpdGVtc1tpZF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0aW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwYWdlLXdyYXBwZXInKVswXTtcblx0XHRcblx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0X2hhbmRsZUNoYW5nZSgpO1xuXG5cdFx0c3RvcmUuZXZlbnRFbWl0dGVyLnN1YnNjcmliZShfaGFuZGxlQ2hhbmdlKTtcblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdtdXRhdGUnKSB7XG5cdFx0XHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRcdFx0X2hhbmRsZUNoYW5nZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcG9wdXAvcG9wdXAtY29udHJvbHMudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * VERSION: 1.18.0\n * DATE: 2015-09-05\n * UPDATES AND DOCS AT: http://greensock.com\n * \n * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin\n *\n * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\nvar _gsScope = typeof module !== \"undefined\" && module.exports && typeof global !== \"undefined\" ? global : undefined || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node\n(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function () {\n\n\t\"use strict\";\n\n\t_gsScope._gsDefine(\"TweenMax\", [\"core.Animation\", \"core.SimpleTimeline\", \"TweenLite\"], function (Animation, SimpleTimeline, TweenLite) {\n\n\t\tvar _slice = function _slice(a) {\n\t\t\t//don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\tvar b = [],\n\t\t\t    l = a.length,\n\t\t\t    i;\n\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\treturn b;\n\t\t},\n\t\t    _applyCycle = function _applyCycle(vars, targets, i) {\n\t\t\tvar alt = vars.cycle,\n\t\t\t    p,\n\t\t\t    val;\n\t\t\tfor (p in alt) {\n\t\t\t\tval = alt[p];\n\t\t\t\tvars[p] = typeof val === \"function\" ? val.call(targets[i], i) : val[i % val.length];\n\t\t\t}\n\t\t\tdelete vars.cycle;\n\t\t},\n\t\t    TweenMax = function TweenMax(target, duration, vars) {\n\t\t\tTweenLite.call(this, target, duration, vars);\n\t\t\tthis._cycle = 0;\n\t\t\tthis._yoyo = this.vars.yoyo === true;\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.\n\t\t\tthis.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t},\n\t\t    _tinyNum = 0.0000000001,\n\t\t    TweenLiteInternals = TweenLite._internals,\n\t\t    _isSelector = TweenLiteInternals.isSelector,\n\t\t    _isArray = TweenLiteInternals.isArray,\n\t\t    p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),\n\t\t    _blankArray = [];\n\n\t\tTweenMax.version = \"1.18.0\";\n\t\tp.constructor = TweenMax;\n\t\tp.kill()._gc = false;\n\t\tTweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;\n\t\tTweenMax.getTweensOf = TweenLite.getTweensOf;\n\t\tTweenMax.lagSmoothing = TweenLite.lagSmoothing;\n\t\tTweenMax.ticker = TweenLite.ticker;\n\t\tTweenMax.render = TweenLite.render;\n\n\t\tp.invalidate = function () {\n\t\t\tthis._yoyo = this.vars.yoyo === true;\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._uncache(true);\n\t\t\treturn TweenLite.prototype.invalidate.call(this);\n\t\t};\n\n\t\tp.updateTo = function (vars, resetDuration) {\n\t\t\tvar curRatio = this.ratio,\n\t\t\t    immediate = this.vars.immediateRender || vars.immediateRender,\n\t\t\t    p;\n\t\t\tif (resetDuration && this._startTime < this._timeline._time) {\n\t\t\t\tthis._startTime = this._timeline._time;\n\t\t\t\tthis._uncache(false);\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (p in vars) {\n\t\t\t\tthis.vars[p] = vars[p];\n\t\t\t}\n\t\t\tif (this._initted || immediate) {\n\t\t\t\tif (resetDuration) {\n\t\t\t\t\tthis._initted = false;\n\t\t\t\t\tif (immediate) {\n\t\t\t\t\t\tthis.render(0, true, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this._gc) {\n\t\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (this._notifyPluginsOfEnabled && this._firstPT) {\n\t\t\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this); //in case a plugin like MotionBlur must perform some cleanup tasks\n\t\t\t\t\t}\n\t\t\t\t\tif (this._time / this._duration > 0.998) {\n\t\t\t\t\t\t//if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. \n\t\t\t\t\t\tvar prevTime = this._time;\n\t\t\t\t\t\tthis.render(0, true, false);\n\t\t\t\t\t\tthis._initted = false;\n\t\t\t\t\t\tthis.render(prevTime, true, false);\n\t\t\t\t\t} else if (this._time > 0 || immediate) {\n\t\t\t\t\t\tthis._initted = false;\n\t\t\t\t\t\tthis._init();\n\t\t\t\t\t\tvar inv = 1 / (1 - curRatio),\n\t\t\t\t\t\t    pt = this._firstPT,\n\t\t\t\t\t\t    endValue;\n\t\t\t\t\t\twhile (pt) {\n\t\t\t\t\t\t\tendValue = pt.s + pt.c;\n\t\t\t\t\t\t\tpt.c *= inv;\n\t\t\t\t\t\t\tpt.s = endValue - pt.c;\n\t\t\t\t\t\t\tpt = pt._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function (time, suppressEvents, force) {\n\t\t\tif (!this._initted) if (this._duration === 0 && this.vars.repeat) {\n\t\t\t\t//zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.\n\t\t\t\tthis.invalidate();\n\t\t\t}\n\t\t\tvar totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n\t\t\t    prevTime = this._time,\n\t\t\t    prevTotalTime = this._totalTime,\n\t\t\t    prevCycle = this._cycle,\n\t\t\t    duration = this._duration,\n\t\t\t    prevRawPrevTime = this._rawPrevTime,\n\t\t\t    isComplete,\n\t\t\t    callback,\n\t\t\t    pt,\n\t\t\t    cycleDuration,\n\t\t\t    r,\n\t\t\t    type,\n\t\t\t    pow,\n\t\t\t    rawPrevTime;\n\t\t\tif (time >= totalDur) {\n\t\t\t\tthis._totalTime = totalDur;\n\t\t\t\tthis._cycle = this._repeat;\n\t\t\t\tif (this._yoyo && (this._cycle & 1) !== 0) {\n\t\t\t\t\tthis._time = 0;\n\t\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\t\t} else {\n\t\t\t\t\tthis._time = duration;\n\t\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n\t\t\t\t}\n\t\t\t\tif (!this._reversed) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) {\n\t\t\t\t\t//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (this._startTime === this._timeline._duration) {\n\t\t\t\t\t\t//if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time) {\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\t\t\t} else if (time < 0.0000001) {\n\t\t\t\t//to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = this._cycle = 0;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTotalTime !== 0 || duration === 0 && prevRawPrevTime > 0) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) {\n\t\t\t\t\t\t//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._initted) {\n\t\t\t\t\t//if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._totalTime = this._time = time;\n\n\t\t\t\tif (this._repeat !== 0) {\n\t\t\t\t\tcycleDuration = duration + this._repeatDelay;\n\t\t\t\t\tthis._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but Flash reports it as 0.79999999!)\n\t\t\t\t\tif (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration) {\n\t\t\t\t\t\tthis._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n\t\t\t\t\t}\n\t\t\t\t\tthis._time = this._totalTime - this._cycle * cycleDuration;\n\t\t\t\t\tif (this._yoyo) if ((this._cycle & 1) !== 0) {\n\t\t\t\t\t\tthis._time = duration - this._time;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._time > duration) {\n\t\t\t\t\t\tthis._time = duration;\n\t\t\t\t\t} else if (this._time < 0) {\n\t\t\t\t\t\tthis._time = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._easeType) {\n\t\t\t\t\tr = this._time / duration;\n\t\t\t\t\ttype = this._easeType;\n\t\t\t\t\tpow = this._easePower;\n\t\t\t\t\tif (type === 1 || type === 3 && r >= 0.5) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\tthis.ratio = 1 - r;\n\t\t\t\t\t} else if (type === 2) {\n\t\t\t\t\t\tthis.ratio = r;\n\t\t\t\t\t} else if (this._time / duration < 0.5) {\n\t\t\t\t\t\tthis.ratio = r / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.ratio = 1 - r / 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (prevTime === this._time && !force && prevCycle === this._cycle) {\n\t\t\t\tif (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {\n\t\t\t\t\t//so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._init();\n\t\t\t\tif (!this._initted || this._gc) {\n\t\t\t\t\t//immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {\n\t\t\t\t\t//we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.\n\t\t\t\t\tthis._time = prevTime;\n\t\t\t\t\tthis._totalTime = prevTotalTime;\n\t\t\t\t\tthis._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\tthis._cycle = prevCycle;\n\t\t\t\t\tTweenLiteInternals.lazyTweens.push(this);\n\t\t\t\t\tthis._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (this._time && !isComplete) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t\t} else if (isComplete && this._ease._calcEnd) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._lazy !== false) {\n\t\t\t\tthis._lazy = false;\n\t\t\t}\n\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n\t\t\t\tthis._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTotalTime === 0) {\n\t\t\t\tif (this._initted === 2 && time > 0) {\n\t\t\t\t\t//this.invalidate();\n\t\t\t\t\tthis._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true\n\t\t\t\t}\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tthis._startAt.render(time, suppressEvents, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tthis._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * this.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * this.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (this._onUpdate) {\n\t\t\t\tif (time < 0) if (this._startAt && this._startTime) {\n\t\t\t\t\t//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tthis._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (this._totalTime !== prevTotalTime || isComplete) {\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {\n\t\t\t\tthis._callback(\"onRepeat\");\n\t\t\t}\n\t\t\tif (callback) if (!this._gc || force) {\n\t\t\t\t//check gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && this._startAt && !this._onUpdate && this._startTime) {\n\t\t\t\t\t//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tthis._startAt.render(time, suppressEvents, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {\n\t\t\t\t\t//the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tthis._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t//---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------\n\n\t\tTweenMax.to = function (target, duration, vars) {\n\t\t\treturn new TweenMax(target, duration, vars);\n\t\t};\n\n\t\tTweenMax.from = function (target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = vars.immediateRender != false;\n\t\t\treturn new TweenMax(target, duration, vars);\n\t\t};\n\n\t\tTweenMax.fromTo = function (target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n\t\t\treturn new TweenMax(target, duration, toVars);\n\t\t};\n\n\t\tTweenMax.staggerTo = TweenMax.allTo = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tstagger = stagger || 0;\n\t\t\tvar delay = vars.delay || 0,\n\t\t\t    a = [],\n\t\t\t    finalComplete = function finalComplete() {\n\t\t\t\tif (vars.onComplete) {\n\t\t\t\t\tvars.onComplete.apply(vars.onCompleteScope || this, arguments);\n\t\t\t\t}\n\t\t\t\tonCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);\n\t\t\t},\n\t\t\t    cycle = vars.cycle,\n\t\t\t    fromCycle = vars.startAt && vars.startAt.cycle,\n\t\t\t    l,\n\t\t\t    copy,\n\t\t\t    i,\n\t\t\t    p;\n\t\t\tif (!_isArray(targets)) {\n\t\t\t\tif (typeof targets === \"string\") {\n\t\t\t\t\ttargets = TweenLite.selector(targets) || targets;\n\t\t\t\t}\n\t\t\t\tif (_isSelector(targets)) {\n\t\t\t\t\ttargets = _slice(targets);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttargets = targets || [];\n\t\t\tif (stagger < 0) {\n\t\t\t\ttargets = _slice(targets);\n\t\t\t\ttargets.reverse();\n\t\t\t\tstagger *= -1;\n\t\t\t}\n\t\t\tl = targets.length - 1;\n\t\t\tfor (i = 0; i <= l; i++) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tcopy[p] = vars[p];\n\t\t\t\t}\n\t\t\t\tif (cycle) {\n\t\t\t\t\t_applyCycle(copy, targets, i);\n\t\t\t\t}\n\t\t\t\tif (fromCycle) {\n\t\t\t\t\tfromCycle = copy.startAt = {};\n\t\t\t\t\tfor (p in vars.startAt) {\n\t\t\t\t\t\tfromCycle[p] = vars.startAt[p];\n\t\t\t\t\t}\n\t\t\t\t\t_applyCycle(copy.startAt, targets, i);\n\t\t\t\t}\n\t\t\t\tcopy.delay = delay;\n\t\t\t\tif (i === l && onCompleteAll) {\n\t\t\t\t\tcopy.onComplete = finalComplete;\n\t\t\t\t}\n\t\t\t\ta[i] = new TweenMax(targets[i], duration, copy);\n\t\t\t\tdelay += stagger;\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tTweenMax.staggerFrom = TweenMax.allFrom = function (targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = vars.immediateRender != false;\n\t\t\treturn TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tTweenMax.staggerFromTo = TweenMax.allFromTo = function (targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n\t\t\treturn TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tTweenMax.delayedCall = function (delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenMax(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, useFrames: useFrames, overwrite: 0 });\n\t\t};\n\n\t\tTweenMax.set = function (target, vars) {\n\t\t\treturn new TweenMax(target, 0, vars);\n\t\t};\n\n\t\tTweenMax.isTweening = function (target) {\n\t\t\treturn TweenLite.getTweensOf(target, true).length > 0;\n\t\t};\n\n\t\tvar _getChildrenOf = function _getChildrenOf(timeline, includeTimelines) {\n\t\t\tvar a = [],\n\t\t\t    cnt = 0,\n\t\t\t    tween = timeline._first;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween instanceof TweenLite) {\n\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t} else {\n\t\t\t\t\tif (includeTimelines) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t\ta = a.concat(_getChildrenOf(tween, includeTimelines));\n\t\t\t\t\tcnt = a.length;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn a;\n\t\t},\n\t\t    getAllTweens = TweenMax.getAllTweens = function (includeTimelines) {\n\t\t\treturn _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines));\n\t\t};\n\n\t\tTweenMax.killAll = function (complete, tweens, delayedCalls, timelines) {\n\t\t\tif (tweens == null) {\n\t\t\t\ttweens = true;\n\t\t\t}\n\t\t\tif (delayedCalls == null) {\n\t\t\t\tdelayedCalls = true;\n\t\t\t}\n\t\t\tvar a = getAllTweens(timelines != false),\n\t\t\t    l = a.length,\n\t\t\t    allTrue = tweens && delayedCalls && timelines,\n\t\t\t    isDC,\n\t\t\t    tween,\n\t\t\t    i;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\ttween = a[i];\n\t\t\t\tif (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {\n\t\t\t\t\tif (complete) {\n\t\t\t\t\t\ttween.totalTime(tween._reversed ? 0 : tween.totalDuration());\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tTweenMax.killChildTweensOf = function (parent, complete) {\n\t\t\tif (parent == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar tl = TweenLiteInternals.tweenLookup,\n\t\t\t    a,\n\t\t\t    curParent,\n\t\t\t    p,\n\t\t\t    i,\n\t\t\t    l;\n\t\t\tif (typeof parent === \"string\") {\n\t\t\t\tparent = TweenLite.selector(parent) || parent;\n\t\t\t}\n\t\t\tif (_isSelector(parent)) {\n\t\t\t\tparent = _slice(parent);\n\t\t\t}\n\t\t\tif (_isArray(parent)) {\n\t\t\t\ti = parent.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tTweenMax.killChildTweensOf(parent[i], complete);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ta = [];\n\t\t\tfor (p in tl) {\n\t\t\t\tcurParent = tl[p].target.parentNode;\n\t\t\t\twhile (curParent) {\n\t\t\t\t\tif (curParent === parent) {\n\t\t\t\t\t\ta = a.concat(tl[p].tweens);\n\t\t\t\t\t}\n\t\t\t\t\tcurParent = curParent.parentNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl = a.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tif (complete) {\n\t\t\t\t\ta[i].totalTime(a[i].totalDuration());\n\t\t\t\t}\n\t\t\t\ta[i]._enabled(false, false);\n\t\t\t}\n\t\t};\n\n\t\tvar _changePause = function _changePause(pause, tweens, delayedCalls, timelines) {\n\t\t\ttweens = tweens !== false;\n\t\t\tdelayedCalls = delayedCalls !== false;\n\t\t\ttimelines = timelines !== false;\n\t\t\tvar a = getAllTweens(timelines),\n\t\t\t    allTrue = tweens && delayedCalls && timelines,\n\t\t\t    i = a.length,\n\t\t\t    isDC,\n\t\t\t    tween;\n\t\t\twhile (--i > -1) {\n\t\t\t\ttween = a[i];\n\t\t\t\tif (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {\n\t\t\t\t\ttween.paused(pause);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tTweenMax.pauseAll = function (tweens, delayedCalls, timelines) {\n\t\t\t_changePause(true, tweens, delayedCalls, timelines);\n\t\t};\n\n\t\tTweenMax.resumeAll = function (tweens, delayedCalls, timelines) {\n\t\t\t_changePause(false, tweens, delayedCalls, timelines);\n\t\t};\n\n\t\tTweenMax.globalTimeScale = function (value) {\n\t\t\tvar tl = Animation._rootTimeline,\n\t\t\t    t = TweenLite.ticker.time;\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn tl._timeScale;\n\t\t\t}\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\ttl._startTime = t - (t - tl._startTime) * tl._timeScale / value;\n\t\t\ttl = Animation._rootFramesTimeline;\n\t\t\tt = TweenLite.ticker.frame;\n\t\t\ttl._startTime = t - (t - tl._startTime) * tl._timeScale / value;\n\t\t\ttl._timeScale = Animation._rootTimeline._timeScale = value;\n\t\t\treturn value;\n\t\t};\n\n\t\t//---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------\n\n\t\tp.progress = function (value) {\n\t\t\treturn !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), false);\n\t\t};\n\n\t\tp.totalProgress = function (value) {\n\t\t\treturn !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, false);\n\t\t};\n\n\t\tp.time = function (value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\tif (value > this._duration) {\n\t\t\t\tvalue = this._duration;\n\t\t\t}\n\t\t\tif (this._yoyo && (this._cycle & 1) !== 0) {\n\t\t\t\tvalue = this._duration - value + this._cycle * (this._duration + this._repeatDelay);\n\t\t\t} else if (this._repeat !== 0) {\n\t\t\t\tvalue += this._cycle * (this._duration + this._repeatDelay);\n\t\t\t}\n\t\t\treturn this.totalTime(value, suppressEvents);\n\t\t};\n\n\t\tp.duration = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.\n\t\t\t}\n\t\t\treturn Animation.prototype.duration.call(this, value);\n\t\t};\n\n\t\tp.totalDuration = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\t//instead of Infinity, we use 999999999999 so that we can accommodate reverses\n\t\t\t\t\tthis._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;\n\t\t\t\t\tthis._dirty = false;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn this._repeat === -1 ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));\n\t\t};\n\n\t\tp.repeat = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeat;\n\t\t\t}\n\t\t\tthis._repeat = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.repeatDelay = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeatDelay;\n\t\t\t}\n\t\t\tthis._repeatDelay = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.yoyo = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._yoyo;\n\t\t\t}\n\t\t\tthis._yoyo = value;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn TweenMax;\n\t}, true);\n\n\t/*\n  * ----------------------------------------------------------------\n  * TimelineLite\n  * ----------------------------------------------------------------\n  */\n\t_gsScope._gsDefine(\"TimelineLite\", [\"core.Animation\", \"core.SimpleTimeline\", \"TweenLite\"], function (Animation, SimpleTimeline, TweenLite) {\n\n\t\tvar TimelineLite = function TimelineLite(vars) {\n\t\t\tSimpleTimeline.call(this, vars);\n\t\t\tthis._labels = {};\n\t\t\tthis.autoRemoveChildren = this.vars.autoRemoveChildren === true;\n\t\t\tthis.smoothChildTiming = this.vars.smoothChildTiming === true;\n\t\t\tthis._sortChildren = true;\n\t\t\tthis._onUpdate = this.vars.onUpdate;\n\t\t\tvar v = this.vars,\n\t\t\t    val,\n\t\t\t    p;\n\t\t\tfor (p in v) {\n\t\t\t\tval = v[p];\n\t\t\t\tif (_isArray(val)) if (val.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\tv[p] = this._swapSelfInParams(val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_isArray(v.tweens)) {\n\t\t\t\tthis.add(v.tweens, 0, v.align, v.stagger);\n\t\t\t}\n\t\t},\n\t\t    _tinyNum = 0.0000000001,\n\t\t    TweenLiteInternals = TweenLite._internals,\n\t\t    _internals = TimelineLite._internals = {},\n\t\t    _isSelector = TweenLiteInternals.isSelector,\n\t\t    _isArray = TweenLiteInternals.isArray,\n\t\t    _lazyTweens = TweenLiteInternals.lazyTweens,\n\t\t    _lazyRender = TweenLiteInternals.lazyRender,\n\t\t    _globals = _gsScope._gsDefine.globals,\n\t\t    _copy = function _copy(vars) {\n\t\t\tvar copy = {},\n\t\t\t    p;\n\t\t\tfor (p in vars) {\n\t\t\t\tcopy[p] = vars[p];\n\t\t\t}\n\t\t\treturn copy;\n\t\t},\n\t\t    _applyCycle = function _applyCycle(vars, targets, i) {\n\t\t\tvar alt = vars.cycle,\n\t\t\t    p,\n\t\t\t    val;\n\t\t\tfor (p in alt) {\n\t\t\t\tval = alt[p];\n\t\t\t\tvars[p] = typeof val === \"function\" ? val.call(targets[i], i) : val[i % val.length];\n\t\t\t}\n\t\t\tdelete vars.cycle;\n\t\t},\n\t\t    _pauseCallback = _internals.pauseCallback = function () {},\n\t\t    _slice = function _slice(a) {\n\t\t\t//don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\tvar b = [],\n\t\t\t    l = a.length,\n\t\t\t    i;\n\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\treturn b;\n\t\t},\n\t\t    p = TimelineLite.prototype = new SimpleTimeline();\n\n\t\tTimelineLite.version = \"1.18.0\";\n\t\tp.constructor = TimelineLite;\n\t\tp.kill()._gc = p._forcingPlayhead = p._hasPause = false;\n\n\t\t/* might use later...\n  //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.\n  function localToGlobal(time, animation) {\n  \twhile (animation) {\n  \t\ttime = (time / animation._timeScale) + animation._startTime;\n  \t\tanimation = animation.timeline;\n  \t}\n  \treturn time;\n  }\n  \t//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales\n  function globalToLocal(time, animation) {\n  \tvar scale = 1;\n  \ttime -= localToGlobal(0, animation);\n  \twhile (animation) {\n  \t\tscale *= animation._timeScale;\n  \t\tanimation = animation.timeline;\n  \t}\n  \treturn time * scale;\n  }\n  */\n\n\t\tp.to = function (target, duration, vars, position) {\n\t\t\tvar Engine = vars.repeat && _globals.TweenMax || TweenLite;\n\t\t\treturn duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);\n\t\t};\n\n\t\tp.from = function (target, duration, vars, position) {\n\t\t\treturn this.add((vars.repeat && _globals.TweenMax || TweenLite).from(target, duration, vars), position);\n\t\t};\n\n\t\tp.fromTo = function (target, duration, fromVars, toVars, position) {\n\t\t\tvar Engine = toVars.repeat && _globals.TweenMax || TweenLite;\n\t\t\treturn duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);\n\t\t};\n\n\t\tp.staggerTo = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvar tl = new TimelineLite({ onComplete: onCompleteAll, onCompleteParams: onCompleteAllParams, callbackScope: onCompleteAllScope, smoothChildTiming: this.smoothChildTiming }),\n\t\t\t    cycle = vars.cycle,\n\t\t\t    copy,\n\t\t\t    i;\n\t\t\tif (typeof targets === \"string\") {\n\t\t\t\ttargets = TweenLite.selector(targets) || targets;\n\t\t\t}\n\t\t\ttargets = targets || [];\n\t\t\tif (_isSelector(targets)) {\n\t\t\t\t//senses if the targets object is a selector. If it is, we should translate it into an array.\n\t\t\t\ttargets = _slice(targets);\n\t\t\t}\n\t\t\tstagger = stagger || 0;\n\t\t\tif (stagger < 0) {\n\t\t\t\ttargets = _slice(targets);\n\t\t\t\ttargets.reverse();\n\t\t\t\tstagger *= -1;\n\t\t\t}\n\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\tcopy = _copy(vars);\n\t\t\t\tif (copy.startAt) {\n\t\t\t\t\tcopy.startAt = _copy(copy.startAt);\n\t\t\t\t\tif (copy.startAt.cycle) {\n\t\t\t\t\t\t_applyCycle(copy.startAt, targets, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cycle) {\n\t\t\t\t\t_applyCycle(copy, targets, i);\n\t\t\t\t}\n\t\t\t\ttl.to(targets[i], duration, copy, i * stagger);\n\t\t\t}\n\t\t\treturn this.add(tl, position);\n\t\t};\n\n\t\tp.staggerFrom = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvars.immediateRender = vars.immediateRender != false;\n\t\t\tvars.runBackwards = true;\n\t\t\treturn this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.staggerFromTo = function (targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n\t\t\treturn this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.call = function (callback, params, scope, position) {\n\t\t\treturn this.add(TweenLite.delayedCall(0, callback, params, scope), position);\n\t\t};\n\n\t\tp.set = function (target, vars, position) {\n\t\t\tposition = this._parseTimeOrLabel(position, 0, true);\n\t\t\tif (vars.immediateRender == null) {\n\t\t\t\tvars.immediateRender = position === this._time && !this._paused;\n\t\t\t}\n\t\t\treturn this.add(new TweenLite(target, 0, vars), position);\n\t\t};\n\n\t\tTimelineLite.exportRoot = function (vars, ignoreDelayedCalls) {\n\t\t\tvars = vars || {};\n\t\t\tif (vars.smoothChildTiming == null) {\n\t\t\t\tvars.smoothChildTiming = true;\n\t\t\t}\n\t\t\tvar tl = new TimelineLite(vars),\n\t\t\t    root = tl._timeline,\n\t\t\t    tween,\n\t\t\t    next;\n\t\t\tif (ignoreDelayedCalls == null) {\n\t\t\t\tignoreDelayedCalls = true;\n\t\t\t}\n\t\t\troot._remove(tl, true);\n\t\t\ttl._startTime = 0;\n\t\t\ttl._rawPrevTime = tl._time = tl._totalTime = root._time;\n\t\t\ttween = root._first;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next;\n\t\t\t\tif (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {\n\t\t\t\t\ttl.add(tween, tween._startTime - tween._delay);\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t\troot.add(tl, 0);\n\t\t\treturn tl;\n\t\t};\n\n\t\tp.add = function (value, position, align, stagger) {\n\t\t\tvar curTime, l, i, child, tl, beforeRawTime;\n\t\t\tif (typeof position !== \"number\") {\n\t\t\t\tposition = this._parseTimeOrLabel(position, 0, true, value);\n\t\t\t}\n\t\t\tif (!(value instanceof Animation)) {\n\t\t\t\tif (value instanceof Array || value && value.push && _isArray(value)) {\n\t\t\t\t\talign = align || \"normal\";\n\t\t\t\t\tstagger = stagger || 0;\n\t\t\t\t\tcurTime = position;\n\t\t\t\t\tl = value.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif (_isArray(child = value[i])) {\n\t\t\t\t\t\t\tchild = new TimelineLite({ tweens: child });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.add(child, curTime);\n\t\t\t\t\t\tif (typeof child !== \"string\" && typeof child !== \"function\") {\n\t\t\t\t\t\t\tif (align === \"sequence\") {\n\t\t\t\t\t\t\t\tcurTime = child._startTime + child.totalDuration() / child._timeScale;\n\t\t\t\t\t\t\t} else if (align === \"start\") {\n\t\t\t\t\t\t\t\tchild._startTime -= child.delay();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurTime += stagger;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._uncache(true);\n\t\t\t\t} else if (typeof value === \"string\") {\n\t\t\t\t\treturn this.addLabel(value, position);\n\t\t\t\t} else if (typeof value === \"function\") {\n\t\t\t\t\tvalue = TweenLite.delayedCall(0, value);\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"Cannot add \" + value + \" into the timeline; it is not a tween, timeline, function, or string.\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSimpleTimeline.prototype.add.call(this, value, position);\n\n\t\t\t//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n\t\t\tif (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {\n\t\t\t\t//in case any of the ancestors had completed but should now be enabled...\n\t\t\t\ttl = this;\n\t\t\t\tbeforeRawTime = tl.rawTime() > value._startTime; //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tif (beforeRawTime && tl._timeline.smoothChildTiming) {\n\t\t\t\t\t\ttl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.\n\t\t\t\t\t} else if (tl._gc) {\n\t\t\t\t\t\ttl._enabled(true, false);\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tp.remove = function (value) {\n\t\t\tif (value instanceof Animation) {\n\t\t\t\tthis._remove(value, false);\n\t\t\t\tvar tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.\n\t\t\t\tvalue._startTime = (value._paused ? value._pauseTime : tl._time) - (!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale; //ensure that if it gets played again, the timing is correct.\n\t\t\t\treturn this;\n\t\t\t} else if (value instanceof Array || value && value.push && _isArray(value)) {\n\t\t\t\tvar i = value.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tthis.remove(value[i]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t} else if (typeof value === \"string\") {\n\t\t\t\treturn this.removeLabel(value);\n\t\t\t}\n\t\t\treturn this.kill(null, value);\n\t\t};\n\n\t\tp._remove = function (tween, skipDisable) {\n\t\t\tSimpleTimeline.prototype._remove.call(this, tween, skipDisable);\n\t\t\tvar last = this._last;\n\t\t\tif (!last) {\n\t\t\t\tthis._time = this._totalTime = this._duration = this._totalDuration = 0;\n\t\t\t} else if (this._time > last._startTime + last._totalDuration / last._timeScale) {\n\t\t\t\tthis._time = this.duration();\n\t\t\t\tthis._totalTime = this._totalDuration;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.append = function (value, offsetOrLabel) {\n\t\t\treturn this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));\n\t\t};\n\n\t\tp.insert = p.insertMultiple = function (value, position, align, stagger) {\n\t\t\treturn this.add(value, position || 0, align, stagger);\n\t\t};\n\n\t\tp.appendMultiple = function (tweens, offsetOrLabel, align, stagger) {\n\t\t\treturn this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);\n\t\t};\n\n\t\tp.addLabel = function (label, position) {\n\t\t\tthis._labels[label] = this._parseTimeOrLabel(position);\n\t\t\treturn this;\n\t\t};\n\n\t\tp.addPause = function (position, callback, params, scope) {\n\t\t\tvar t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);\n\t\t\tt.vars.onComplete = t.vars.onReverseComplete = callback;\n\t\t\tt.data = \"isPause\";\n\t\t\tthis._hasPause = true;\n\t\t\treturn this.add(t, position);\n\t\t};\n\n\t\tp.removeLabel = function (label) {\n\t\t\tdelete this._labels[label];\n\t\t\treturn this;\n\t\t};\n\n\t\tp.getLabelTime = function (label) {\n\t\t\treturn this._labels[label] != null ? this._labels[label] : -1;\n\t\t};\n\n\t\tp._parseTimeOrLabel = function (timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {\n\t\t\tvar i;\n\t\t\t//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().\n\t\t\tif (ignore instanceof Animation && ignore.timeline === this) {\n\t\t\t\tthis.remove(ignore);\n\t\t\t} else if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {\n\t\t\t\ti = ignore.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (ignore[i] instanceof Animation && ignore[i].timeline === this) {\n\t\t\t\t\t\tthis.remove(ignore[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof offsetOrLabel === \"string\") {\n\t\t\t\treturn this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && typeof timeOrLabel === \"number\" && this._labels[offsetOrLabel] == null ? timeOrLabel - this.duration() : 0, appendIfAbsent);\n\t\t\t}\n\t\t\toffsetOrLabel = offsetOrLabel || 0;\n\t\t\tif (typeof timeOrLabel === \"string\" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) {\n\t\t\t\t//if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n\t\t\t\ti = timeOrLabel.indexOf(\"=\");\n\t\t\t\tif (i === -1) {\n\t\t\t\t\tif (this._labels[timeOrLabel] == null) {\n\t\t\t\t\t\treturn appendIfAbsent ? this._labels[timeOrLabel] = this.duration() + offsetOrLabel : offsetOrLabel;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._labels[timeOrLabel] + offsetOrLabel;\n\t\t\t\t}\n\t\t\t\toffsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + \"1\", 10) * Number(timeOrLabel.substr(i + 1));\n\t\t\t\ttimeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : this.duration();\n\t\t\t} else if (timeOrLabel == null) {\n\t\t\t\ttimeOrLabel = this.duration();\n\t\t\t}\n\t\t\treturn Number(timeOrLabel) + offsetOrLabel;\n\t\t};\n\n\t\tp.seek = function (position, suppressEvents) {\n\t\t\treturn this.totalTime(typeof position === \"number\" ? position : this._parseTimeOrLabel(position), suppressEvents !== false);\n\t\t};\n\n\t\tp.stop = function () {\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.gotoAndPlay = function (position, suppressEvents) {\n\t\t\treturn this.play(position, suppressEvents);\n\t\t};\n\n\t\tp.gotoAndStop = function (position, suppressEvents) {\n\t\t\treturn this.pause(position, suppressEvents);\n\t\t};\n\n\t\tp.render = function (time, suppressEvents, force) {\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tvar totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n\t\t\t    prevTime = this._time,\n\t\t\t    prevStart = this._startTime,\n\t\t\t    prevTimeScale = this._timeScale,\n\t\t\t    prevPaused = this._paused,\n\t\t\t    tween,\n\t\t\t    isComplete,\n\t\t\t    next,\n\t\t\t    callback,\n\t\t\t    internalForce,\n\t\t\t    pauseTween;\n\t\t\tif (time >= totalDur) {\n\t\t\t\tthis._totalTime = this._time = totalDur;\n\t\t\t\tif (!this._reversed) if (!this._hasPausedChild()) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tinternalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t\tif (this._duration === 0) if (time === 0 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t\tif (this._rawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\ttime = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.\n\t\t\t} else if (time < 0.0000001) {\n\t\t\t\t//to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = 0;\n\t\t\t\tif (prevTime !== 0 || this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (this._timeline.autoRemoveChildren && this._reversed) {\n\t\t\t\t\t\t//ensures proper GC if a timeline is resumed after it's finished reversing.\n\t\t\t\t\t\tinternalForce = isComplete = true;\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t} else if (this._rawPrevTime >= 0 && this._first) {\n\t\t\t\t\t\t//when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = time;\n\t\t\t\t} else {\n\t\t\t\t\tthis._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\tif (time === 0 && isComplete) {\n\t\t\t\t\t\t//if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime === 0) {\n\t\t\t\t\t\t\tif (!tween._duration) {\n\t\t\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttime = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n\t\t\t\t\tif (!this._initted) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (this._hasPause && !this._forcingPlayhead && !suppressEvents) {\n\t\t\t\t\tif (time >= prevTime) {\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime <= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween = this._last;\n\t\t\t\t\t\twhile (tween && tween._startTime >= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && tween._rawPrevTime > 0) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._prev;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pauseTween) {\n\t\t\t\t\t\tthis._time = time = pauseTween._startTime;\n\t\t\t\t\t\tthis._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\t}\n\t\t\tif ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._initted = true;\n\t\t\t}\n\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {\n\t\t\t\tthis._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n\t\t\t}\n\n\t\t\tif (prevTime === 0) if (this.vars.onStart) if (this._time !== 0) if (!suppressEvents) {\n\t\t\t\tthis._callback(\"onStart\");\n\t\t\t}\n\n\t\t\tif (this._time >= prevTime) {\n\t\t\t\ttween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\t\tif (this._paused && !prevPaused) {\n\t\t\t\t\t\t//in case a tween pauses the timeline when rendering\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttween = this._last;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._prev; //record it here because the value could change after rendering...\n\t\t\t\t\tif (this._paused && !prevPaused) {\n\t\t\t\t\t\t//in case a tween pauses the timeline when rendering\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tpauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n\t\t\t\t\t\t\twhile (pauseTween && pauseTween.endTime() > this._time) {\n\t\t\t\t\t\t\t\tpauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t\t\tpauseTween = pauseTween._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpauseTween = null;\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._onUpdate) if (!suppressEvents) {\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t}\n\n\t\t\tif (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {\n\t\t\t\t//if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._hasPausedChild = function () {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.getChildren = function (nested, tweens, timelines, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || -9999999999;\n\t\t\tvar a = [],\n\t\t\t    tween = this._first,\n\t\t\t    cnt = 0;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime < ignoreBeforeTime) {\n\t\t\t\t\t//do nothing\n\t\t\t\t} else if (tween instanceof TweenLite) {\n\t\t\t\t\tif (tweens !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (timelines !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t\tif (nested !== false) {\n\t\t\t\t\t\ta = a.concat(tween.getChildren(true, tweens, timelines));\n\t\t\t\t\t\tcnt = a.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.getTweensOf = function (target, nested) {\n\t\t\tvar disabled = this._gc,\n\t\t\t    a = [],\n\t\t\t    cnt = 0,\n\t\t\t    tweens,\n\t\t\t    i;\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.\n\t\t\t}\n\t\t\ttweens = TweenLite.getTweensOf(target);\n\t\t\ti = tweens.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i].timeline === this || nested && this._contains(tweens[i])) {\n\t\t\t\t\ta[cnt++] = tweens[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(false, true);\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.recent = function () {\n\t\t\treturn this._recent;\n\t\t};\n\n\t\tp._contains = function (tween) {\n\t\t\tvar tl = tween.timeline;\n\t\t\twhile (tl) {\n\t\t\t\tif (tl === this) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttl = tl.timeline;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.shiftChildren = function (amount, adjustLabels, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || 0;\n\t\t\tvar tween = this._first,\n\t\t\t    labels = this._labels,\n\t\t\t    p;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime >= ignoreBeforeTime) {\n\t\t\t\t\ttween._startTime += amount;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\tif (adjustLabels) {\n\t\t\t\tfor (p in labels) {\n\t\t\t\t\tif (labels[p] >= ignoreBeforeTime) {\n\t\t\t\t\t\tlabels[p] += amount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp._kill = function (vars, target) {\n\t\t\tif (!vars && !target) {\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\tvar tweens = !target ? this.getChildren(true, true, false) : this.getTweensOf(target),\n\t\t\t    i = tweens.length,\n\t\t\t    changed = false;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i]._kill(vars, target)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.clear = function (labels) {\n\t\t\tvar tweens = this.getChildren(false, true, true),\n\t\t\t    i = tweens.length;\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\twhile (--i > -1) {\n\t\t\t\ttweens[i]._enabled(false, false);\n\t\t\t}\n\t\t\tif (labels !== false) {\n\t\t\t\tthis._labels = {};\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.invalidate = function () {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\ttween.invalidate();\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn Animation.prototype.invalidate.call(this);;\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (enabled === this._gc) {\n\t\t\t\tvar tween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\ttween._enabled(enabled, true);\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t};\n\n\t\tp.totalTime = function (time, suppressEvents, uncapped) {\n\t\t\tthis._forcingPlayhead = true;\n\t\t\tvar val = Animation.prototype.totalTime.apply(this, arguments);\n\t\t\tthis._forcingPlayhead = false;\n\t\t\treturn val;\n\t\t};\n\n\t\tp.duration = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tthis.totalDuration(); //just triggers recalculation\n\t\t\t\t}\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tif (this.duration() !== 0 && value !== 0) {\n\t\t\t\tthis.timeScale(this._duration / value);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tvar max = 0,\n\t\t\t\t\t    tween = this._last,\n\t\t\t\t\t    prevStart = 999999999999,\n\t\t\t\t\t    prev,\n\t\t\t\t\t    end;\n\t\t\t\t\twhile (tween) {\n\t\t\t\t\t\tprev = tween._prev; //record it here in case the tween changes position in the sequence...\n\t\t\t\t\t\tif (tween._dirty) {\n\t\t\t\t\t\t\ttween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime > prevStart && this._sortChildren && !tween._paused) {\n\t\t\t\t\t\t\t//in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n\t\t\t\t\t\t\tthis.add(tween, tween._startTime - tween._delay);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprevStart = tween._startTime;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime < 0 && !tween._paused) {\n\t\t\t\t\t\t\t//children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n\t\t\t\t\t\t\tmax -= tween._startTime;\n\t\t\t\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\t\t\t\tthis._startTime += tween._startTime / this._timeScale;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.shiftChildren(-tween._startTime, false, -9999999999);\n\t\t\t\t\t\t\tprevStart = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tend = tween._startTime + tween._totalDuration / tween._timeScale;\n\t\t\t\t\t\tif (end > max) {\n\t\t\t\t\t\t\tmax = end;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = prev;\n\t\t\t\t\t}\n\t\t\t\t\tthis._duration = this._totalDuration = max;\n\t\t\t\t\tthis._dirty = false;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\tif (this.totalDuration() !== 0) if (value !== 0) {\n\t\t\t\tthis.timeScale(this._totalDuration / value);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function (value) {\n\t\t\tif (!value) {\n\t\t\t\t//if there's a pause directly at the spot from where we're unpausing, skip it.\n\t\t\t\tvar tween = this._first,\n\t\t\t\t    time = this._time;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tif (tween._startTime === time && tween.data === \"isPause\") {\n\t\t\t\t\t\ttween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.\n\t\t\t\t\t}\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Animation.prototype.paused.apply(this, arguments);\n\t\t};\n\n\t\tp.usesFrames = function () {\n\t\t\tvar tl = this._timeline;\n\t\t\twhile (tl._timeline) {\n\t\t\t\ttl = tl._timeline;\n\t\t\t}\n\t\t\treturn tl === Animation._rootFramesTimeline;\n\t\t};\n\n\t\tp.rawTime = function () {\n\t\t\treturn this._paused ? this._totalTime : (this._timeline.rawTime() - this._startTime) * this._timeScale;\n\t\t};\n\n\t\treturn TimelineLite;\n\t}, true);\n\n\t/*\n  * ----------------------------------------------------------------\n  * TimelineMax\n  * ----------------------------------------------------------------\n  */\n\t_gsScope._gsDefine(\"TimelineMax\", [\"TimelineLite\", \"TweenLite\", \"easing.Ease\"], function (TimelineLite, TweenLite, Ease) {\n\n\t\tvar TimelineMax = function TimelineMax(vars) {\n\t\t\tTimelineLite.call(this, vars);\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._cycle = 0;\n\t\t\tthis._yoyo = this.vars.yoyo === true;\n\t\t\tthis._dirty = true;\n\t\t},\n\t\t    _tinyNum = 0.0000000001,\n\t\t    TweenLiteInternals = TweenLite._internals,\n\t\t    _lazyTweens = TweenLiteInternals.lazyTweens,\n\t\t    _lazyRender = TweenLiteInternals.lazyRender,\n\t\t    _easeNone = new Ease(null, null, 1, 0),\n\t\t    p = TimelineMax.prototype = new TimelineLite();\n\n\t\tp.constructor = TimelineMax;\n\t\tp.kill()._gc = false;\n\t\tTimelineMax.version = \"1.18.0\";\n\n\t\tp.invalidate = function () {\n\t\t\tthis._yoyo = this.vars.yoyo === true;\n\t\t\tthis._repeat = this.vars.repeat || 0;\n\t\t\tthis._repeatDelay = this.vars.repeatDelay || 0;\n\t\t\tthis._uncache(true);\n\t\t\treturn TimelineLite.prototype.invalidate.call(this);\n\t\t};\n\n\t\tp.addCallback = function (callback, position, params, scope) {\n\t\t\treturn this.add(TweenLite.delayedCall(0, callback, params, scope), position);\n\t\t};\n\n\t\tp.removeCallback = function (callback, position) {\n\t\t\tif (callback) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tthis._kill(null, callback);\n\t\t\t\t} else {\n\t\t\t\t\tvar a = this.getTweensOf(callback, false),\n\t\t\t\t\t    i = a.length,\n\t\t\t\t\t    time = this._parseTimeOrLabel(position);\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (a[i]._startTime === time) {\n\t\t\t\t\t\t\ta[i]._enabled(false, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.removePause = function (position) {\n\t\t\treturn this.removeCallback(TimelineLite._internals.pauseCallback, position);\n\t\t};\n\n\t\tp.tweenTo = function (position, vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar copy = { ease: _easeNone, useFrames: this.usesFrames(), immediateRender: false },\n\t\t\t    duration,\n\t\t\t    p,\n\t\t\t    t;\n\t\t\tfor (p in vars) {\n\t\t\t\tcopy[p] = vars[p];\n\t\t\t}\n\t\t\tcopy.time = this._parseTimeOrLabel(position);\n\t\t\tduration = Math.abs(Number(copy.time) - this._time) / this._timeScale || 0.001;\n\t\t\tt = new TweenLite(this, duration, copy);\n\t\t\tcopy.onStart = function () {\n\t\t\t\tt.target.paused(true);\n\t\t\t\tif (t.vars.time !== t.target.time() && duration === t.duration()) {\n\t\t\t\t\t//don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.\n\t\t\t\t\tt.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale);\n\t\t\t\t}\n\t\t\t\tif (vars.onStart) {\n\t\t\t\t\t//in case the user had an onStart in the vars - we don't want to overwrite it.\n\t\t\t\t\tt._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn t;\n\t\t};\n\n\t\tp.tweenFromTo = function (fromPosition, toPosition, vars) {\n\t\t\tvars = vars || {};\n\t\t\tfromPosition = this._parseTimeOrLabel(fromPosition);\n\t\t\tvars.startAt = { onComplete: this.seek, onCompleteParams: [fromPosition], callbackScope: this };\n\t\t\tvars.immediateRender = vars.immediateRender !== false;\n\t\t\tvar t = this.tweenTo(toPosition, vars);\n\t\t\treturn t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || 0.001);\n\t\t};\n\n\t\tp.render = function (time, suppressEvents, force) {\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tvar totalDur = !this._dirty ? this._totalDuration : this.totalDuration(),\n\t\t\t    dur = this._duration,\n\t\t\t    prevTime = this._time,\n\t\t\t    prevTotalTime = this._totalTime,\n\t\t\t    prevStart = this._startTime,\n\t\t\t    prevTimeScale = this._timeScale,\n\t\t\t    prevRawPrevTime = this._rawPrevTime,\n\t\t\t    prevPaused = this._paused,\n\t\t\t    prevCycle = this._cycle,\n\t\t\t    tween,\n\t\t\t    isComplete,\n\t\t\t    next,\n\t\t\t    callback,\n\t\t\t    internalForce,\n\t\t\t    cycleDuration,\n\t\t\t    pauseTween;\n\t\t\tif (time >= totalDur) {\n\t\t\t\tif (!this._locked) {\n\t\t\t\t\tthis._totalTime = totalDur;\n\t\t\t\t\tthis._cycle = this._repeat;\n\t\t\t\t}\n\t\t\t\tif (!this._reversed) if (!this._hasPausedChild()) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tinternalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t\tif (this._duration === 0) if (time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\tif (this._yoyo && (this._cycle & 1) !== 0) {\n\t\t\t\t\tthis._time = time = 0;\n\t\t\t\t} else {\n\t\t\t\t\tthis._time = dur;\n\t\t\t\t\ttime = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.\n\t\t\t\t}\n\t\t\t} else if (time < 0.0000001) {\n\t\t\t\t//to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tif (!this._locked) {\n\t\t\t\t\tthis._totalTime = this._cycle = 0;\n\t\t\t\t}\n\t\t\t\tthis._time = 0;\n\t\t\t\tif (prevTime !== 0 || dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) {\n\t\t\t\t\t//edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (this._timeline.autoRemoveChildren && this._reversed) {\n\t\t\t\t\t\tinternalForce = isComplete = true;\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t} else if (prevRawPrevTime >= 0 && this._first) {\n\t\t\t\t\t\t//when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = time;\n\t\t\t\t} else {\n\t\t\t\t\tthis._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\tif (time === 0 && isComplete) {\n\t\t\t\t\t\t//if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime === 0) {\n\t\t\t\t\t\t\tif (!tween._duration) {\n\t\t\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttime = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n\t\t\t\t\tif (!this._initted) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dur === 0 && prevRawPrevTime < 0) {\n\t\t\t\t\t//without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.\n\t\t\t\t\tinternalForce = true;\n\t\t\t\t}\n\t\t\t\tthis._time = this._rawPrevTime = time;\n\t\t\t\tif (!this._locked) {\n\t\t\t\t\tthis._totalTime = time;\n\t\t\t\t\tif (this._repeat !== 0) {\n\t\t\t\t\t\tcycleDuration = dur + this._repeatDelay;\n\t\t\t\t\t\tthis._cycle = this._totalTime / cycleDuration >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)\n\t\t\t\t\t\tif (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration) {\n\t\t\t\t\t\t\tthis._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._time = this._totalTime - this._cycle * cycleDuration;\n\t\t\t\t\t\tif (this._yoyo) if ((this._cycle & 1) !== 0) {\n\t\t\t\t\t\t\tthis._time = dur - this._time;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._time > dur) {\n\t\t\t\t\t\t\tthis._time = dur;\n\t\t\t\t\t\t\ttime = dur + 0.0001; //to avoid occasional floating point rounding error\n\t\t\t\t\t\t} else if (this._time < 0) {\n\t\t\t\t\t\t\tthis._time = time = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttime = this._time;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._hasPause && !this._forcingPlayhead && !suppressEvents) {\n\t\t\t\t\ttime = this._time;\n\t\t\t\t\tif (time >= prevTime) {\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime <= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween = this._last;\n\t\t\t\t\t\twhile (tween && tween._startTime >= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && tween._rawPrevTime > 0) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._prev;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pauseTween) {\n\t\t\t\t\t\tthis._time = time = pauseTween._startTime;\n\t\t\t\t\t\tthis._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._cycle !== prevCycle) if (!this._locked) {\n\t\t\t\t/*\n    make sure children at the end/beginning of the timeline are rendered properly. If, for example,\n    a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n    would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n    could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n    we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n    ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.\n    */\n\t\t\t\tvar backwards = this._yoyo && (prevCycle & 1) !== 0,\n\t\t\t\t    wrap = backwards === (this._yoyo && (this._cycle & 1) !== 0),\n\t\t\t\t    recTotalTime = this._totalTime,\n\t\t\t\t    recCycle = this._cycle,\n\t\t\t\t    recRawPrevTime = this._rawPrevTime,\n\t\t\t\t    recTime = this._time;\n\n\t\t\t\tthis._totalTime = prevCycle * dur;\n\t\t\t\tif (this._cycle < prevCycle) {\n\t\t\t\t\tbackwards = !backwards;\n\t\t\t\t} else {\n\t\t\t\t\tthis._totalTime += dur;\n\t\t\t\t}\n\t\t\t\tthis._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a \"cleaner\" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.\n\n\t\t\t\tthis._rawPrevTime = dur === 0 ? prevRawPrevTime - 0.0001 : prevRawPrevTime;\n\t\t\t\tthis._cycle = prevCycle;\n\t\t\t\tthis._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()\n\t\t\t\tprevTime = backwards ? 0 : dur;\n\t\t\t\tthis.render(prevTime, suppressEvents, dur === 0);\n\t\t\t\tif (!suppressEvents) if (!this._gc) {\n\t\t\t\t\tif (this.vars.onRepeat) {\n\t\t\t\t\t\tthis._callback(\"onRepeat\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (wrap) {\n\t\t\t\t\tprevTime = backwards ? dur + 0.0001 : -0.0001;\n\t\t\t\t\tthis.render(prevTime, true, false);\n\t\t\t\t}\n\t\t\t\tthis._locked = false;\n\t\t\t\tif (this._paused && !prevPaused) {\n\t\t\t\t\t//if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._time = recTime;\n\t\t\t\tthis._totalTime = recTotalTime;\n\t\t\t\tthis._cycle = recCycle;\n\t\t\t\tthis._rawPrevTime = recRawPrevTime;\n\t\t\t}\n\n\t\t\tif ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {\n\t\t\t\tif (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) {\n\t\t\t\t\t//so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._initted = true;\n\t\t\t}\n\n\t\t\tif (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {\n\t\t\t\tthis._active = true; //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n\t\t\t}\n\n\t\t\tif (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0) if (!suppressEvents) {\n\t\t\t\tthis._callback(\"onStart\");\n\t\t\t}\n\n\t\t\tif (this._time >= prevTime) {\n\t\t\t\ttween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\t\tif (this._paused && !prevPaused) {\n\t\t\t\t\t\t//in case a tween pauses the timeline when rendering\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttween = this._last;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._prev; //record it here because the value could change after rendering...\n\t\t\t\t\tif (this._paused && !prevPaused) {\n\t\t\t\t\t\t//in case a tween pauses the timeline when rendering\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tpauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n\t\t\t\t\t\t\twhile (pauseTween && pauseTween.endTime() > this._time) {\n\t\t\t\t\t\t\t\tpauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t\t\tpauseTween = pauseTween._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpauseTween = null;\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._onUpdate) if (!suppressEvents) {\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t}\n\t\t\tif (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) {\n\t\t\t\t//if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t//in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.getActive = function (nested, tweens, timelines) {\n\t\t\tif (nested == null) {\n\t\t\t\tnested = true;\n\t\t\t}\n\t\t\tif (tweens == null) {\n\t\t\t\ttweens = true;\n\t\t\t}\n\t\t\tif (timelines == null) {\n\t\t\t\ttimelines = false;\n\t\t\t}\n\t\t\tvar a = [],\n\t\t\t    all = this.getChildren(nested, tweens, timelines),\n\t\t\t    cnt = 0,\n\t\t\t    l = all.length,\n\t\t\t    i,\n\t\t\t    tween;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\ttween = all[i];\n\t\t\t\tif (tween.isActive()) {\n\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.getLabelAfter = function (time) {\n\t\t\tif (!time) if (time !== 0) {\n\t\t\t\t//faster than isNan()\n\t\t\t\ttime = this._time;\n\t\t\t}\n\t\t\tvar labels = this.getLabelsArray(),\n\t\t\t    l = labels.length,\n\t\t\t    i;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tif (labels[i].time > time) {\n\t\t\t\t\treturn labels[i].name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tp.getLabelBefore = function (time) {\n\t\t\tif (time == null) {\n\t\t\t\ttime = this._time;\n\t\t\t}\n\t\t\tvar labels = this.getLabelsArray(),\n\t\t\t    i = labels.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (labels[i].time < time) {\n\t\t\t\t\treturn labels[i].name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tp.getLabelsArray = function () {\n\t\t\tvar a = [],\n\t\t\t    cnt = 0,\n\t\t\t    p;\n\t\t\tfor (p in this._labels) {\n\t\t\t\ta[cnt++] = { time: this._labels[p], name: p };\n\t\t\t}\n\t\t\ta.sort(function (a, b) {\n\t\t\t\treturn a.time - b.time;\n\t\t\t});\n\t\t\treturn a;\n\t\t};\n\n\t\t//---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------\n\n\t\tp.progress = function (value, suppressEvents) {\n\t\t\treturn !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents);\n\t\t};\n\n\t\tp.totalProgress = function (value, suppressEvents) {\n\t\t\treturn !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents);\n\t\t};\n\n\t\tp.totalDuration = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tTimelineLite.prototype.totalDuration.call(this); //just forces refresh\n\t\t\t\t\t//Instead of Infinity, we use 999999999999 so that we can accommodate reverses.\n\t\t\t\t\tthis._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn this._repeat === -1 ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1));\n\t\t};\n\n\t\tp.time = function (value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\tif (value > this._duration) {\n\t\t\t\tvalue = this._duration;\n\t\t\t}\n\t\t\tif (this._yoyo && (this._cycle & 1) !== 0) {\n\t\t\t\tvalue = this._duration - value + this._cycle * (this._duration + this._repeatDelay);\n\t\t\t} else if (this._repeat !== 0) {\n\t\t\t\tvalue += this._cycle * (this._duration + this._repeatDelay);\n\t\t\t}\n\t\t\treturn this.totalTime(value, suppressEvents);\n\t\t};\n\n\t\tp.repeat = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeat;\n\t\t\t}\n\t\t\tthis._repeat = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.repeatDelay = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._repeatDelay;\n\t\t\t}\n\t\t\tthis._repeatDelay = value;\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.yoyo = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._yoyo;\n\t\t\t}\n\t\t\tthis._yoyo = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.currentLabel = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this.getLabelBefore(this._time + 0.00000001);\n\t\t\t}\n\t\t\treturn this.seek(value, true);\n\t\t};\n\n\t\treturn TimelineMax;\n\t}, true);\n\n\t/*\n  * ----------------------------------------------------------------\n  * BezierPlugin\n  * ----------------------------------------------------------------\n  */\n\t(function () {\n\n\t\tvar _RAD2DEG = 180 / Math.PI,\n\t\t    _r1 = [],\n\t\t    _r2 = [],\n\t\t    _r3 = [],\n\t\t    _corProps = {},\n\t\t    _globals = _gsScope._gsDefine.globals,\n\t\t    Segment = function Segment(a, b, c, d) {\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t\tthis.d = d;\n\t\t\tthis.da = d - a;\n\t\t\tthis.ca = c - a;\n\t\t\tthis.ba = b - a;\n\t\t},\n\t\t    _correlate = \",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,\",\n\t\t    cubicToQuadratic = function cubicToQuadratic(a, b, c, d) {\n\t\t\tvar q1 = { a: a },\n\t\t\t    q2 = {},\n\t\t\t    q3 = {},\n\t\t\t    q4 = { c: d },\n\t\t\t    mab = (a + b) / 2,\n\t\t\t    mbc = (b + c) / 2,\n\t\t\t    mcd = (c + d) / 2,\n\t\t\t    mabc = (mab + mbc) / 2,\n\t\t\t    mbcd = (mbc + mcd) / 2,\n\t\t\t    m8 = (mbcd - mabc) / 8;\n\t\t\tq1.b = mab + (a - mab) / 4;\n\t\t\tq2.b = mabc + m8;\n\t\t\tq1.c = q2.a = (q1.b + q2.b) / 2;\n\t\t\tq2.c = q3.a = (mabc + mbcd) / 2;\n\t\t\tq3.b = mbcd - m8;\n\t\t\tq4.b = mcd + (d - mcd) / 4;\n\t\t\tq3.c = q4.a = (q3.b + q4.b) / 2;\n\t\t\treturn [q1, q2, q3, q4];\n\t\t},\n\t\t    _calculateControlPoints = function _calculateControlPoints(a, curviness, quad, basic, correlate) {\n\t\t\tvar l = a.length - 1,\n\t\t\t    ii = 0,\n\t\t\t    cp1 = a[0].a,\n\t\t\t    i,\n\t\t\t    p1,\n\t\t\t    p2,\n\t\t\t    p3,\n\t\t\t    seg,\n\t\t\t    m1,\n\t\t\t    m2,\n\t\t\t    mm,\n\t\t\t    cp2,\n\t\t\t    qb,\n\t\t\t    r1,\n\t\t\t    r2,\n\t\t\t    tl;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tseg = a[ii];\n\t\t\t\tp1 = seg.a;\n\t\t\t\tp2 = seg.d;\n\t\t\t\tp3 = a[ii + 1].d;\n\n\t\t\t\tif (correlate) {\n\t\t\t\t\tr1 = _r1[i];\n\t\t\t\t\tr2 = _r2[i];\n\t\t\t\t\ttl = (r2 + r1) * curviness * 0.25 / (basic ? 0.5 : _r3[i] || 0.5);\n\t\t\t\t\tm1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : r1 !== 0 ? tl / r1 : 0);\n\t\t\t\t\tm2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : r2 !== 0 ? tl / r2 : 0);\n\t\t\t\t\tmm = p2 - (m1 + ((m2 - m1) * (r1 * 3 / (r1 + r2) + 0.5) / 4 || 0));\n\t\t\t\t} else {\n\t\t\t\t\tm1 = p2 - (p2 - p1) * curviness * 0.5;\n\t\t\t\t\tm2 = p2 + (p3 - p2) * curviness * 0.5;\n\t\t\t\t\tmm = p2 - (m1 + m2) / 2;\n\t\t\t\t}\n\t\t\t\tm1 += mm;\n\t\t\t\tm2 += mm;\n\n\t\t\t\tseg.c = cp2 = m1;\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\tseg.b = cp1;\n\t\t\t\t} else {\n\t\t\t\t\tseg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.\n\t\t\t\t}\n\n\t\t\t\tseg.da = p2 - p1;\n\t\t\t\tseg.ca = cp2 - p1;\n\t\t\t\tseg.ba = cp1 - p1;\n\n\t\t\t\tif (quad) {\n\t\t\t\t\tqb = cubicToQuadratic(p1, cp1, cp2, p2);\n\t\t\t\t\ta.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n\t\t\t\t\tii += 4;\n\t\t\t\t} else {\n\t\t\t\t\tii++;\n\t\t\t\t}\n\n\t\t\t\tcp1 = m2;\n\t\t\t}\n\t\t\tseg = a[ii];\n\t\t\tseg.b = cp1;\n\t\t\tseg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.\n\t\t\tseg.da = seg.d - seg.a;\n\t\t\tseg.ca = seg.c - seg.a;\n\t\t\tseg.ba = cp1 - seg.a;\n\t\t\tif (quad) {\n\t\t\t\tqb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);\n\t\t\t\ta.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);\n\t\t\t}\n\t\t},\n\t\t    _parseAnchors = function _parseAnchors(values, p, correlate, prepend) {\n\t\t\tvar a = [],\n\t\t\t    l,\n\t\t\t    i,\n\t\t\t    p1,\n\t\t\t    p2,\n\t\t\t    p3,\n\t\t\t    tmp;\n\t\t\tif (prepend) {\n\t\t\t\tvalues = [prepend].concat(values);\n\t\t\t\ti = values.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (typeof (tmp = values[i][p]) === \"string\") if (tmp.charAt(1) === \"=\") {\n\t\t\t\t\t\tvalues[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tl = values.length - 2;\n\t\t\tif (l < 0) {\n\t\t\t\ta[0] = new Segment(values[0][p], 0, 0, values[l < -1 ? 0 : 1][p]);\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tp1 = values[i][p];\n\t\t\t\tp2 = values[i + 1][p];\n\t\t\t\ta[i] = new Segment(p1, 0, 0, p2);\n\t\t\t\tif (correlate) {\n\t\t\t\t\tp3 = values[i + 2][p];\n\t\t\t\t\t_r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);\n\t\t\t\t\t_r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);\n\t\t\t\t}\n\t\t\t}\n\t\t\ta[i] = new Segment(values[i][p], 0, 0, values[i + 1][p]);\n\t\t\treturn a;\n\t\t},\n\t\t    bezierThrough = function bezierThrough(values, curviness, quadratic, basic, correlate, prepend) {\n\t\t\tvar obj = {},\n\t\t\t    props = [],\n\t\t\t    first = prepend || values[0],\n\t\t\t    i,\n\t\t\t    p,\n\t\t\t    a,\n\t\t\t    j,\n\t\t\t    r,\n\t\t\t    l,\n\t\t\t    seamless,\n\t\t\t    last;\n\t\t\tcorrelate = typeof correlate === \"string\" ? \",\" + correlate + \",\" : _correlate;\n\t\t\tif (curviness == null) {\n\t\t\t\tcurviness = 1;\n\t\t\t}\n\t\t\tfor (p in values[0]) {\n\t\t\t\tprops.push(p);\n\t\t\t}\n\t\t\t//check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)\n\t\t\tif (values.length > 1) {\n\t\t\t\tlast = values[values.length - 1];\n\t\t\t\tseamless = true;\n\t\t\t\ti = props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = props[i];\n\t\t\t\t\tif (Math.abs(first[p] - last[p]) > 0.05) {\n\t\t\t\t\t\t//build in a tolerance of +/-0.05 to accommodate rounding errors. For example, if you set an object's position to 4.945, Flash will make it 4.9\n\t\t\t\t\t\tseamless = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (seamless) {\n\t\t\t\t\tvalues = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens\n\t\t\t\t\tif (prepend) {\n\t\t\t\t\t\tvalues.unshift(prepend);\n\t\t\t\t\t}\n\t\t\t\t\tvalues.push(values[1]);\n\t\t\t\t\tprepend = values[values.length - 3];\n\t\t\t\t}\n\t\t\t}\n\t\t\t_r1.length = _r2.length = _r3.length = 0;\n\t\t\ti = props.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = props[i];\n\t\t\t\t_corProps[p] = correlate.indexOf(\",\" + p + \",\") !== -1;\n\t\t\t\tobj[p] = _parseAnchors(values, p, _corProps[p], prepend);\n\t\t\t}\n\t\t\ti = _r1.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\t_r1[i] = Math.sqrt(_r1[i]);\n\t\t\t\t_r2[i] = Math.sqrt(_r2[i]);\n\t\t\t}\n\t\t\tif (!basic) {\n\t\t\t\ti = props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (_corProps[p]) {\n\t\t\t\t\t\ta = obj[props[i]];\n\t\t\t\t\t\tl = a.length - 1;\n\t\t\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\t\t\tr = a[j + 1].da / _r2[j] + a[j].da / _r1[j];\n\t\t\t\t\t\t\t_r3[j] = (_r3[j] || 0) + r * r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = _r3.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t_r3[i] = Math.sqrt(_r3[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = props.length;\n\t\t\tj = quadratic ? 4 : 1;\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = props[i];\n\t\t\t\ta = obj[p];\n\t\t\t\t_calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties\n\t\t\t\tif (seamless) {\n\t\t\t\t\ta.splice(0, j);\n\t\t\t\t\ta.splice(a.length - j, j);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\t    _parseBezierData = function _parseBezierData(values, type, prepend) {\n\t\t\ttype = type || \"soft\";\n\t\t\tvar obj = {},\n\t\t\t    inc = type === \"cubic\" ? 3 : 2,\n\t\t\t    soft = type === \"soft\",\n\t\t\t    props = [],\n\t\t\t    a,\n\t\t\t    b,\n\t\t\t    c,\n\t\t\t    d,\n\t\t\t    cur,\n\t\t\t    i,\n\t\t\t    j,\n\t\t\t    l,\n\t\t\t    p,\n\t\t\t    cnt,\n\t\t\t    tmp;\n\t\t\tif (soft && prepend) {\n\t\t\t\tvalues = [prepend].concat(values);\n\t\t\t}\n\t\t\tif (values == null || values.length < inc + 1) {\n\t\t\t\tthrow \"invalid Bezier data\";\n\t\t\t}\n\t\t\tfor (p in values[0]) {\n\t\t\t\tprops.push(p);\n\t\t\t}\n\t\t\ti = props.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = props[i];\n\t\t\t\tobj[p] = cur = [];\n\t\t\t\tcnt = 0;\n\t\t\t\tl = values.length;\n\t\t\t\tfor (j = 0; j < l; j++) {\n\t\t\t\t\ta = prepend == null ? values[j][p] : typeof (tmp = values[j][p]) === \"string\" && tmp.charAt(1) === \"=\" ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);\n\t\t\t\t\tif (soft) if (j > 1) if (j < l - 1) {\n\t\t\t\t\t\tcur[cnt++] = (a + cur[cnt - 2]) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tcur[cnt++] = a;\n\t\t\t\t}\n\t\t\t\tl = cnt - inc + 1;\n\t\t\t\tcnt = 0;\n\t\t\t\tfor (j = 0; j < l; j += inc) {\n\t\t\t\t\ta = cur[j];\n\t\t\t\t\tb = cur[j + 1];\n\t\t\t\t\tc = cur[j + 2];\n\t\t\t\t\td = inc === 2 ? 0 : cur[j + 3];\n\t\t\t\t\tcur[cnt++] = tmp = inc === 3 ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n\t\t\t\t}\n\t\t\t\tcur.length = cnt;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\t\t    _addCubicLengths = function _addCubicLengths(a, steps, resolution) {\n\t\t\tvar inc = 1 / resolution,\n\t\t\t    j = a.length,\n\t\t\t    d,\n\t\t\t    d1,\n\t\t\t    s,\n\t\t\t    da,\n\t\t\t    ca,\n\t\t\t    ba,\n\t\t\t    p,\n\t\t\t    i,\n\t\t\t    inv,\n\t\t\t    bez,\n\t\t\t    index;\n\t\t\twhile (--j > -1) {\n\t\t\t\tbez = a[j];\n\t\t\t\ts = bez.a;\n\t\t\t\tda = bez.d - s;\n\t\t\t\tca = bez.c - s;\n\t\t\t\tba = bez.b - s;\n\t\t\t\td = d1 = 0;\n\t\t\t\tfor (i = 1; i <= resolution; i++) {\n\t\t\t\t\tp = inc * i;\n\t\t\t\t\tinv = 1 - p;\n\t\t\t\t\td = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);\n\t\t\t\t\tindex = j * resolution + i - 1;\n\t\t\t\t\tsteps[index] = (steps[index] || 0) + d * d;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t    _parseLengthData = function _parseLengthData(obj, resolution) {\n\t\t\tresolution = resolution >> 0 || 6;\n\t\t\tvar a = [],\n\t\t\t    lengths = [],\n\t\t\t    d = 0,\n\t\t\t    total = 0,\n\t\t\t    threshold = resolution - 1,\n\t\t\t    segments = [],\n\t\t\t    curLS = [],\n\t\t\t    //current length segments array\n\t\t\tp,\n\t\t\t    i,\n\t\t\t    l,\n\t\t\t    index;\n\t\t\tfor (p in obj) {\n\t\t\t\t_addCubicLengths(obj[p], a, resolution);\n\t\t\t}\n\t\t\tl = a.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\td += Math.sqrt(a[i]);\n\t\t\t\tindex = i % resolution;\n\t\t\t\tcurLS[index] = d;\n\t\t\t\tif (index === threshold) {\n\t\t\t\t\ttotal += d;\n\t\t\t\t\tindex = i / resolution >> 0;\n\t\t\t\t\tsegments[index] = curLS;\n\t\t\t\t\tlengths[index] = total;\n\t\t\t\t\td = 0;\n\t\t\t\t\tcurLS = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { length: total, lengths: lengths, segments: segments };\n\t\t},\n\t\t    BezierPlugin = _gsScope._gsDefine.plugin({\n\t\t\tpropName: \"bezier\",\n\t\t\tpriority: -1,\n\t\t\tversion: \"1.3.4\",\n\t\t\tAPI: 2,\n\t\t\tglobal: true,\n\n\t\t\t//gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\tinit: function init(target, vars, tween) {\n\t\t\t\tthis._target = target;\n\t\t\t\tif (vars instanceof Array) {\n\t\t\t\t\tvars = { values: vars };\n\t\t\t\t}\n\t\t\t\tthis._func = {};\n\t\t\t\tthis._round = {};\n\t\t\t\tthis._props = [];\n\t\t\t\tthis._timeRes = vars.timeResolution == null ? 6 : parseInt(vars.timeResolution, 10);\n\t\t\t\tvar values = vars.values || [],\n\t\t\t\t    first = {},\n\t\t\t\t    second = values[0],\n\t\t\t\t    autoRotate = vars.autoRotate || tween.vars.orientToBezier,\n\t\t\t\t    p,\n\t\t\t\t    isFunc,\n\t\t\t\t    i,\n\t\t\t\t    j,\n\t\t\t\t    prepend;\n\n\t\t\t\tthis._autoRotate = autoRotate ? autoRotate instanceof Array ? autoRotate : [[\"x\", \"y\", \"rotation\", autoRotate === true ? 0 : Number(autoRotate) || 0]] : null;\n\t\t\t\tfor (p in second) {\n\t\t\t\t\tthis._props.push(p);\n\t\t\t\t}\n\n\t\t\t\ti = this._props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = this._props[i];\n\n\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t\tisFunc = this._func[p] = typeof target[p] === \"function\";\n\t\t\t\t\tfirst[p] = !isFunc ? parseFloat(target[p]) : target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\" ? p : \"get\" + p.substr(3)]();\n\t\t\t\t\tif (!prepend) if (first[p] !== values[0][p]) {\n\t\t\t\t\t\tprepend = first;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._beziers = vars.type !== \"cubic\" && vars.type !== \"quadratic\" && vars.type !== \"soft\" ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, vars.type === \"thruBasic\", vars.correlate, prepend) : _parseBezierData(values, vars.type, first);\n\t\t\t\tthis._segCount = this._beziers[p].length;\n\n\t\t\t\tif (this._timeRes) {\n\t\t\t\t\tvar ld = _parseLengthData(this._beziers, this._timeRes);\n\t\t\t\t\tthis._length = ld.length;\n\t\t\t\t\tthis._lengths = ld.lengths;\n\t\t\t\t\tthis._segments = ld.segments;\n\t\t\t\t\tthis._l1 = this._li = this._s1 = this._si = 0;\n\t\t\t\t\tthis._l2 = this._lengths[0];\n\t\t\t\t\tthis._curSeg = this._segments[0];\n\t\t\t\t\tthis._s2 = this._curSeg[0];\n\t\t\t\t\tthis._prec = 1 / this._curSeg.length;\n\t\t\t\t}\n\n\t\t\t\tif (autoRotate = this._autoRotate) {\n\t\t\t\t\tthis._initialRotations = [];\n\t\t\t\t\tif (!(autoRotate[0] instanceof Array)) {\n\t\t\t\t\t\tthis._autoRotate = autoRotate = [autoRotate];\n\t\t\t\t\t}\n\t\t\t\t\ti = autoRotate.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tfor (j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tp = autoRotate[i][j];\n\t\t\t\t\t\t\tthis._func[p] = typeof target[p] === \"function\" ? target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\" ? p : \"get\" + p.substr(3)] : false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp = autoRotate[i][2];\n\t\t\t\t\t\tthis._initialRotations[i] = this._func[p] ? this._func[p].call(this._target) : this._target[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n\t\t\tset: function set(v) {\n\t\t\t\tvar segments = this._segCount,\n\t\t\t\t    func = this._func,\n\t\t\t\t    target = this._target,\n\t\t\t\t    notStart = v !== this._startRatio,\n\t\t\t\t    curIndex,\n\t\t\t\t    inv,\n\t\t\t\t    i,\n\t\t\t\t    p,\n\t\t\t\t    b,\n\t\t\t\t    t,\n\t\t\t\t    val,\n\t\t\t\t    l,\n\t\t\t\t    lengths,\n\t\t\t\t    curSeg;\n\t\t\t\tif (!this._timeRes) {\n\t\t\t\t\tcurIndex = v < 0 ? 0 : v >= 1 ? segments - 1 : segments * v >> 0;\n\t\t\t\t\tt = (v - curIndex * (1 / segments)) * segments;\n\t\t\t\t} else {\n\t\t\t\t\tlengths = this._lengths;\n\t\t\t\t\tcurSeg = this._curSeg;\n\t\t\t\t\tv *= this._length;\n\t\t\t\t\ti = this._li;\n\t\t\t\t\t//find the appropriate segment (if the currently cached one isn't correct)\n\t\t\t\t\tif (v > this._l2 && i < segments - 1) {\n\t\t\t\t\t\tl = segments - 1;\n\t\t\t\t\t\twhile (i < l && (this._l2 = lengths[++i]) <= v) {}\n\t\t\t\t\t\tthis._l1 = lengths[i - 1];\n\t\t\t\t\t\tthis._li = i;\n\t\t\t\t\t\tthis._curSeg = curSeg = this._segments[i];\n\t\t\t\t\t\tthis._s2 = curSeg[this._s1 = this._si = 0];\n\t\t\t\t\t} else if (v < this._l1 && i > 0) {\n\t\t\t\t\t\twhile (i > 0 && (this._l1 = lengths[--i]) >= v) {}\n\t\t\t\t\t\tif (i === 0 && v < this._l1) {\n\t\t\t\t\t\t\tthis._l1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._l2 = lengths[i];\n\t\t\t\t\t\tthis._li = i;\n\t\t\t\t\t\tthis._curSeg = curSeg = this._segments[i];\n\t\t\t\t\t\tthis._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;\n\t\t\t\t\t\tthis._s2 = curSeg[this._si];\n\t\t\t\t\t}\n\t\t\t\t\tcurIndex = i;\n\t\t\t\t\t//now find the appropriate sub-segment (we split it into the number of pieces that was defined by \"precision\" and measured each one)\n\t\t\t\t\tv -= this._l1;\n\t\t\t\t\ti = this._si;\n\t\t\t\t\tif (v > this._s2 && i < curSeg.length - 1) {\n\t\t\t\t\t\tl = curSeg.length - 1;\n\t\t\t\t\t\twhile (i < l && (this._s2 = curSeg[++i]) <= v) {}\n\t\t\t\t\t\tthis._s1 = curSeg[i - 1];\n\t\t\t\t\t\tthis._si = i;\n\t\t\t\t\t} else if (v < this._s1 && i > 0) {\n\t\t\t\t\t\twhile (i > 0 && (this._s1 = curSeg[--i]) >= v) {}\n\t\t\t\t\t\tif (i === 0 && v < this._s1) {\n\t\t\t\t\t\t\tthis._s1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._s2 = curSeg[i];\n\t\t\t\t\t\tthis._si = i;\n\t\t\t\t\t}\n\t\t\t\t\tt = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec;\n\t\t\t\t}\n\t\t\t\tinv = 1 - t;\n\n\t\t\t\ti = this._props.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = this._props[i];\n\t\t\t\t\tb = this._beziers[p][curIndex];\n\t\t\t\t\tval = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;\n\t\t\t\t\tif (this._round[p]) {\n\t\t\t\t\t\tval = Math.round(val);\n\t\t\t\t\t}\n\t\t\t\t\tif (func[p]) {\n\t\t\t\t\t\ttarget[p](val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[p] = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._autoRotate) {\n\t\t\t\t\tvar ar = this._autoRotate,\n\t\t\t\t\t    b2,\n\t\t\t\t\t    x1,\n\t\t\t\t\t    y1,\n\t\t\t\t\t    x2,\n\t\t\t\t\t    y2,\n\t\t\t\t\t    add,\n\t\t\t\t\t    conv;\n\t\t\t\t\ti = ar.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = ar[i][2];\n\t\t\t\t\t\tadd = ar[i][3] || 0;\n\t\t\t\t\t\tconv = ar[i][4] === true ? 1 : _RAD2DEG;\n\t\t\t\t\t\tb = this._beziers[ar[i][0]];\n\t\t\t\t\t\tb2 = this._beziers[ar[i][1]];\n\n\t\t\t\t\t\tif (b && b2) {\n\t\t\t\t\t\t\t//in case one of the properties got overwritten.\n\t\t\t\t\t\t\tb = b[curIndex];\n\t\t\t\t\t\t\tb2 = b2[curIndex];\n\n\t\t\t\t\t\t\tx1 = b.a + (b.b - b.a) * t;\n\t\t\t\t\t\t\tx2 = b.b + (b.c - b.b) * t;\n\t\t\t\t\t\t\tx1 += (x2 - x1) * t;\n\t\t\t\t\t\t\tx2 += (b.c + (b.d - b.c) * t - x2) * t;\n\n\t\t\t\t\t\t\ty1 = b2.a + (b2.b - b2.a) * t;\n\t\t\t\t\t\t\ty2 = b2.b + (b2.c - b2.b) * t;\n\t\t\t\t\t\t\ty1 += (y2 - y1) * t;\n\t\t\t\t\t\t\ty2 += (b2.c + (b2.d - b2.c) * t - y2) * t;\n\n\t\t\t\t\t\t\tval = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];\n\n\t\t\t\t\t\t\tif (func[p]) {\n\t\t\t\t\t\t\t\ttarget[p](val);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget[p] = val;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\t    p = BezierPlugin.prototype;\n\n\t\tBezierPlugin.bezierThrough = bezierThrough;\n\t\tBezierPlugin.cubicToQuadratic = cubicToQuadratic;\n\t\tBezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the \"css\" object using the autoCSS feature of TweenLite\n\t\tBezierPlugin.quadraticToCubic = function (a, b, c) {\n\t\t\treturn new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);\n\t\t};\n\n\t\tBezierPlugin._cssRegister = function () {\n\t\t\tvar CSSPlugin = _globals.CSSPlugin;\n\t\t\tif (!CSSPlugin) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar _internals = CSSPlugin._internals,\n\t\t\t    _parseToProxy = _internals._parseToProxy,\n\t\t\t    _setPluginRatio = _internals._setPluginRatio,\n\t\t\t    CSSPropTween = _internals.CSSPropTween;\n\t\t\t_internals._registerComplexSpecialProp(\"bezier\", { parser: function parser(t, e, prop, cssp, pt, plugin) {\n\t\t\t\t\tif (e instanceof Array) {\n\t\t\t\t\t\te = { values: e };\n\t\t\t\t\t}\n\t\t\t\t\tplugin = new BezierPlugin();\n\t\t\t\t\tvar values = e.values,\n\t\t\t\t\t    l = values.length - 1,\n\t\t\t\t\t    pluginValues = [],\n\t\t\t\t\t    v = {},\n\t\t\t\t\t    i,\n\t\t\t\t\t    p,\n\t\t\t\t\t    data;\n\t\t\t\t\tif (l < 0) {\n\t\t\t\t\t\treturn pt;\n\t\t\t\t\t}\n\t\t\t\t\tfor (i = 0; i <= l; i++) {\n\t\t\t\t\t\tdata = _parseToProxy(t, values[i], cssp, pt, plugin, l !== i);\n\t\t\t\t\t\tpluginValues[i] = data.end;\n\t\t\t\t\t}\n\t\t\t\t\tfor (p in e) {\n\t\t\t\t\t\tv[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.\n\t\t\t\t\t}\n\t\t\t\t\tv.values = pluginValues;\n\t\t\t\t\tpt = new CSSPropTween(t, \"bezier\", 0, 0, data.pt, 2);\n\t\t\t\t\tpt.data = data;\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tpt.setRatio = _setPluginRatio;\n\t\t\t\t\tif (v.autoRotate === 0) {\n\t\t\t\t\t\tv.autoRotate = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (v.autoRotate && !(v.autoRotate instanceof Array)) {\n\t\t\t\t\t\ti = v.autoRotate === true ? 0 : Number(v.autoRotate);\n\t\t\t\t\t\tv.autoRotate = data.end.left != null ? [[\"left\", \"top\", \"rotation\", i, false]] : data.end.x != null ? [[\"x\", \"y\", \"rotation\", i, false]] : false;\n\t\t\t\t\t}\n\t\t\t\t\tif (v.autoRotate) {\n\t\t\t\t\t\tif (!cssp._transform) {\n\t\t\t\t\t\t\tcssp._enableTransforms(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata.autoRotate = cssp._target._gsTransform;\n\t\t\t\t\t}\n\t\t\t\t\tplugin._onInitTween(data.proxy, v, cssp._tween);\n\t\t\t\t\treturn pt;\n\t\t\t\t} });\n\t\t};\n\n\t\tp._roundProps = function (lookup, value) {\n\t\t\tvar op = this._overwriteProps,\n\t\t\t    i = op.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (lookup[op[i]] || lookup.bezier || lookup.bezierThrough) {\n\t\t\t\t\tthis._round[op[i]] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function (lookup) {\n\t\t\tvar a = this._props,\n\t\t\t    p,\n\t\t\t    i;\n\t\t\tfor (p in this._beziers) {\n\t\t\t\tif (p in lookup) {\n\t\t\t\t\tdelete this._beziers[p];\n\t\t\t\t\tdelete this._func[p];\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (a[i] === p) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._super._kill.call(this, lookup);\n\t\t};\n\t})();\n\n\t/*\n  * ----------------------------------------------------------------\n  * CSSPlugin\n  * ----------------------------------------------------------------\n  */\n\t_gsScope._gsDefine(\"plugins.CSSPlugin\", [\"plugins.TweenPlugin\", \"TweenLite\"], function (TweenPlugin, TweenLite) {\n\n\t\t/** @constructor **/\n\t\tvar CSSPlugin = function CSSPlugin() {\n\t\t\tTweenPlugin.call(this, \"css\");\n\t\t\tthis._overwriteProps.length = 0;\n\t\t\tthis.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t},\n\t\t    _globals = _gsScope._gsDefine.globals,\n\t\t    _hasPriority,\n\t\t    //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n\t\t_suffixMap,\n\t\t    //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n\t\t_cs,\n\t\t    //computed style (we store this in a shared variable to conserve memory and make minification tighter\n\t\t_overwriteProps,\n\t\t    //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n\t\t_specialProps = {},\n\t\t    p = CSSPlugin.prototype = new TweenPlugin(\"css\");\n\n\t\tp.constructor = CSSPlugin;\n\t\tCSSPlugin.version = \"1.18.0\";\n\t\tCSSPlugin.API = 2;\n\t\tCSSPlugin.defaultTransformPerspective = 0;\n\t\tCSSPlugin.defaultSkewType = \"compensated\";\n\t\tCSSPlugin.defaultSmoothOrigin = true;\n\t\tp = \"px\"; //we'll reuse the \"p\" variable to keep file size down\n\t\tCSSPlugin.suffixMap = { top: p, right: p, bottom: p, left: p, width: p, height: p, fontSize: p, padding: p, margin: p, perspective: p, lineHeight: \"\" };\n\n\t\tvar _numExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d)+/g,\n\t\t    _relNumExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,\n\t\t    _valuesExp = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi,\n\t\t    //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n\t\t_NaNExp = /(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g,\n\t\t    //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n\t\t_suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n\t\t    _opacityExp = /opacity *= *([^)]*)/i,\n\t\t    _opacityValExp = /opacity:([^;]*)/i,\n\t\t    _alphaFilterExp = /alpha\\(opacity *=.+?\\)/i,\n\t\t    _rgbhslExp = /^(rgb|hsl)/,\n\t\t    _capsExp = /([A-Z])/g,\n\t\t    _camelExp = /-([a-z])/gi,\n\t\t    _urlExp = /(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi,\n\t\t    //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n\t\t_camelFunc = function _camelFunc(s, g) {\n\t\t\treturn g.toUpperCase();\n\t\t},\n\t\t    _horizExp = /(?:Left|Right|Width)/i,\n\t\t    _ieGetMatrixExp = /(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,\n\t\t    _ieSetMatrixExp = /progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,\n\t\t    _commasOutsideParenExp = /,(?=[^\\)]*(?:\\(|$))/gi,\n\t\t    //finds any commas that are not within parenthesis\n\t\t_DEG2RAD = Math.PI / 180,\n\t\t    _RAD2DEG = 180 / Math.PI,\n\t\t    _forcePT = {},\n\t\t    _doc = document,\n\t\t    _createElement = function _createElement(type) {\n\t\t\treturn _doc.createElementNS ? _doc.createElementNS(\"http://www.w3.org/1999/xhtml\", type) : _doc.createElement(type);\n\t\t},\n\t\t    _tempDiv = _createElement(\"div\"),\n\t\t    _tempImg = _createElement(\"img\"),\n\t\t    _internals = CSSPlugin._internals = { _specialProps: _specialProps },\n\t\t    //provides a hook to a few internal methods that we need to access from inside other plugins\n\t\t_agent = navigator.userAgent,\n\t\t    _autoRound,\n\t\t    _reqSafariFix,\n\t\t    //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n\n\t\t_isSafari,\n\t\t    _isFirefox,\n\t\t    //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n\t\t_isSafariLT6,\n\t\t    //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n\t\t_ieVers,\n\t\t    _supportsOpacity = function () {\n\t\t\t//we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\n\t\t\tvar i = _agent.indexOf(\"Android\"),\n\t\t\t    a = _createElement(\"a\");\n\t\t\t_isSafari = _agent.indexOf(\"Safari\") !== -1 && _agent.indexOf(\"Chrome\") === -1 && (i === -1 || Number(_agent.substr(i + 8, 1)) > 3);\n\t\t\t_isSafariLT6 = _isSafari && Number(_agent.substr(_agent.indexOf(\"Version/\") + 8, 1)) < 6;\n\t\t\t_isFirefox = _agent.indexOf(\"Firefox\") !== -1;\n\t\t\tif (/MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(_agent) || /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(_agent)) {\n\t\t\t\t_ieVers = parseFloat(RegExp.$1);\n\t\t\t}\n\t\t\tif (!a) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ta.style.cssText = \"top:1px;opacity:.55;\";\n\t\t\treturn (/^0.55/.test(a.style.opacity)\n\t\t\t);\n\t\t}(),\n\t\t    _getIEOpacity = function _getIEOpacity(v) {\n\t\t\treturn _opacityExp.test(typeof v === \"string\" ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || \"\") ? parseFloat(RegExp.$1) / 100 : 1;\n\t\t},\n\t\t    _log = function _log(s) {\n\t\t\t//for logging messages, but in a way that won't throw errors in old versions of IE.\n\t\t\tif (window.console) {\n\t\t\t\tconsole.log(s);\n\t\t\t}\n\t\t},\n\t\t    _prefixCSS = \"\",\n\t\t    //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n\t\t_prefix = \"\",\n\t\t    //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n\n\t\t// @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n\t\t_checkPropPrefix = function _checkPropPrefix(p, e) {\n\t\t\te = e || _tempDiv;\n\t\t\tvar s = e.style,\n\t\t\t    a,\n\t\t\t    i;\n\t\t\tif (s[p] !== undefined) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t\tp = p.charAt(0).toUpperCase() + p.substr(1);\n\t\t\ta = [\"O\", \"Moz\", \"ms\", \"Ms\", \"Webkit\"];\n\t\t\ti = 5;\n\t\t\twhile (--i > -1 && s[a[i] + p] === undefined) {}\n\t\t\tif (i >= 0) {\n\t\t\t\t_prefix = i === 3 ? \"ms\" : a[i];\n\t\t\t\t_prefixCSS = \"-\" + _prefix.toLowerCase() + \"-\";\n\t\t\t\treturn _prefix + p;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\t    _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function () {},\n\n\n\t\t/**\n   * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\n   * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\n   *\n   * @param {!Object} t Target element whose style property you want to query\n   * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\n   * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\n   * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\n   * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\n   * @return {?string} The current property value\n   */\n\t\t_getStyle = CSSPlugin.getStyle = function (t, p, cs, calc, dflt) {\n\t\t\tvar rv;\n\t\t\tif (!_supportsOpacity) if (p === \"opacity\") {\n\t\t\t\t//several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\n\t\t\t\treturn _getIEOpacity(t);\n\t\t\t}\n\t\t\tif (!calc && t.style[p]) {\n\t\t\t\trv = t.style[p];\n\t\t\t} else if (cs = cs || _getComputedStyle(t)) {\n\t\t\t\trv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t} else if (t.currentStyle) {\n\t\t\t\trv = t.currentStyle[p];\n\t\t\t}\n\t\t\treturn dflt != null && (!rv || rv === \"none\" || rv === \"auto\" || rv === \"auto auto\") ? dflt : rv;\n\t\t},\n\n\n\t\t/**\n   * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\n   * @param {!Object} t Target element\n   * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\n   * @param {!number} v Value\n   * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\n   * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\n   * @return {number} value in pixels\n   */\n\t\t_convertToPixels = _internals.convertToPixels = function (t, p, v, sfx, recurse) {\n\t\t\tif (sfx === \"px\" || !sfx) {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\tif (sfx === \"auto\" || !v) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tvar horiz = _horizExp.test(p),\n\t\t\t    node = t,\n\t\t\t    style = _tempDiv.style,\n\t\t\t    neg = v < 0,\n\t\t\t    pix,\n\t\t\t    cache,\n\t\t\t    time;\n\t\t\tif (neg) {\n\t\t\t\tv = -v;\n\t\t\t}\n\t\t\tif (sfx === \"%\" && p.indexOf(\"border\") !== -1) {\n\t\t\t\tpix = v / 100 * (horiz ? t.clientWidth : t.clientHeight);\n\t\t\t} else {\n\t\t\t\tstyle.cssText = \"border:0 solid red;position:\" + _getStyle(t, \"position\") + \";line-height:0;\";\n\t\t\t\tif (sfx === \"%\" || !node.appendChild || sfx.charAt(0) === \"v\" || sfx === \"rem\") {\n\t\t\t\t\tnode = t.parentNode || _doc.body;\n\t\t\t\t\tcache = node._gsCache;\n\t\t\t\t\ttime = TweenLite.ticker.frame;\n\t\t\t\t\tif (cache && horiz && cache.time === time) {\n\t\t\t\t\t\t//performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\n\t\t\t\t\t\treturn cache.width * v / 100;\n\t\t\t\t\t}\n\t\t\t\t\tstyle[horiz ? \"width\" : \"height\"] = v + sfx;\n\t\t\t\t} else {\n\t\t\t\t\tstyle[horiz ? \"borderLeftWidth\" : \"borderTopWidth\"] = v + sfx;\n\t\t\t\t}\n\t\t\t\tnode.appendChild(_tempDiv);\n\t\t\t\tpix = parseFloat(_tempDiv[horiz ? \"offsetWidth\" : \"offsetHeight\"]);\n\t\t\t\tnode.removeChild(_tempDiv);\n\t\t\t\tif (horiz && sfx === \"%\" && CSSPlugin.cacheWidths !== false) {\n\t\t\t\t\tcache = node._gsCache = node._gsCache || {};\n\t\t\t\t\tcache.time = time;\n\t\t\t\t\tcache.width = pix / v * 100;\n\t\t\t\t}\n\t\t\t\tif (pix === 0 && !recurse) {\n\t\t\t\t\tpix = _convertToPixels(t, p, v, sfx, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn neg ? -pix : pix;\n\t\t},\n\t\t    _calculateOffset = _internals.calculateOffset = function (t, p, cs) {\n\t\t\t//for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n\t\t\tif (_getStyle(t, \"position\", cs) !== \"absolute\") {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tvar dim = p === \"left\" ? \"Left\" : \"Top\",\n\t\t\t    v = _getStyle(t, \"margin\" + dim, cs);\n\t\t\treturn t[\"offset\" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, \"\")) || 0);\n\t\t},\n\n\n\t\t// @private returns at object containing ALL of the style properties in camelCase and their associated values.\n\t\t_getAllStyles = function _getAllStyles(t, cs) {\n\t\t\tvar s = {},\n\t\t\t    i,\n\t\t\t    tr,\n\t\t\t    p;\n\t\t\tif (cs = cs || _getComputedStyle(t, null)) {\n\t\t\t\tif (i = cs.length) {\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = cs[i];\n\t\t\t\t\t\tif (p.indexOf(\"-transform\") === -1 || _transformPropCSS === p) {\n\t\t\t\t\t\t\t//Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\ts[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\n\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\tif (i.indexOf(\"Transform\") === -1 || _transformProp === i) {\n\t\t\t\t\t\t\t//Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\ts[i] = cs[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cs = t.currentStyle || t.style) {\n\t\t\t\tfor (i in cs) {\n\t\t\t\t\tif (typeof i === \"string\" && s[i] === undefined) {\n\t\t\t\t\t\ts[i.replace(_camelExp, _camelFunc)] = cs[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!_supportsOpacity) {\n\t\t\t\ts.opacity = _getIEOpacity(t);\n\t\t\t}\n\t\t\ttr = _getTransform(t, cs, false);\n\t\t\ts.rotation = tr.rotation;\n\t\t\ts.skewX = tr.skewX;\n\t\t\ts.scaleX = tr.scaleX;\n\t\t\ts.scaleY = tr.scaleY;\n\t\t\ts.x = tr.x;\n\t\t\ts.y = tr.y;\n\t\t\tif (_supports3D) {\n\t\t\t\ts.z = tr.z;\n\t\t\t\ts.rotationX = tr.rotationX;\n\t\t\t\ts.rotationY = tr.rotationY;\n\t\t\t\ts.scaleZ = tr.scaleZ;\n\t\t\t}\n\t\t\tif (s.filters) {\n\t\t\t\tdelete s.filters;\n\t\t\t}\n\t\t\treturn s;\n\t\t},\n\n\n\t\t// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n\t\t_cssDif = function _cssDif(t, s1, s2, vars, forceLookup) {\n\t\t\tvar difs = {},\n\t\t\t    style = t.style,\n\t\t\t    val,\n\t\t\t    p,\n\t\t\t    mpt;\n\t\t\tfor (p in s2) {\n\t\t\t\tif (p !== \"cssText\") if (p !== \"length\") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p]) if (p.indexOf(\"Origin\") === -1) if (typeof val === \"number\" || typeof val === \"string\") {\n\t\t\t\t\tdifs[p] = val === \"auto\" && (p === \"left\" || p === \"top\") ? _calculateOffset(t, p) : (val === \"\" || val === \"auto\" || val === \"none\") && typeof s1[p] === \"string\" && s1[p].replace(_NaNExp, \"\") !== \"\" ? 0 : val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\n\t\t\t\t\tif (style[p] !== undefined) {\n\t\t\t\t\t\t//for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\n\t\t\t\t\t\tmpt = new MiniPropTween(style, p, style[p], mpt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (vars) {\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\t//copy properties (except className)\n\t\t\t\t\tif (p !== \"className\") {\n\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { difs: difs, firstMPT: mpt };\n\t\t},\n\t\t    _dimensions = { width: [\"Left\", \"Right\"], height: [\"Top\", \"Bottom\"] },\n\t\t    _margins = [\"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\"],\n\n\n\t\t/**\n   * @private Gets the width or height of an element\n   * @param {!Object} t Target element\n   * @param {!string} p Property name (\"width\" or \"height\")\n   * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\n   * @return {number} Dimension (in pixels)\n   */\n\t\t_getDimension = function _getDimension(t, p, cs) {\n\t\t\tvar v = parseFloat(p === \"width\" ? t.offsetWidth : t.offsetHeight),\n\t\t\t    a = _dimensions[p],\n\t\t\t    i = a.length;\n\t\t\tcs = cs || _getComputedStyle(t, null);\n\t\t\twhile (--i > -1) {\n\t\t\t\tv -= parseFloat(_getStyle(t, \"padding\" + a[i], cs, true)) || 0;\n\t\t\t\tv -= parseFloat(_getStyle(t, \"border\" + a[i] + \"Width\", cs, true)) || 0;\n\t\t\t}\n\t\t\treturn v;\n\t\t},\n\n\n\t\t// @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n\t\t_parsePosition = function _parsePosition(v, recObj) {\n\t\t\tif (v === \"contain\" || v === \"auto\" || v === \"auto auto\") {\n\t\t\t\treturn v + \" \";\n\t\t\t}\n\t\t\tif (v == null || v === \"\") {\n\t\t\t\t//note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\n\t\t\t\tv = \"0 0\";\n\t\t\t}\n\t\t\tvar a = v.split(\" \"),\n\t\t\t    x = v.indexOf(\"left\") !== -1 ? \"0%\" : v.indexOf(\"right\") !== -1 ? \"100%\" : a[0],\n\t\t\t    y = v.indexOf(\"top\") !== -1 ? \"0%\" : v.indexOf(\"bottom\") !== -1 ? \"100%\" : a[1];\n\t\t\tif (y == null) {\n\t\t\t\ty = x === \"center\" ? \"50%\" : \"0\";\n\t\t\t} else if (y === \"center\") {\n\t\t\t\ty = \"50%\";\n\t\t\t}\n\t\t\tif (x === \"center\" || isNaN(parseFloat(x)) && (x + \"\").indexOf(\"=\") === -1) {\n\t\t\t\t//remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n\t\t\t\tx = \"50%\";\n\t\t\t}\n\t\t\tv = x + \" \" + y + (a.length > 2 ? \" \" + a[2] : \"\");\n\t\t\tif (recObj) {\n\t\t\t\trecObj.oxp = x.indexOf(\"%\") !== -1;\n\t\t\t\trecObj.oyp = y.indexOf(\"%\") !== -1;\n\t\t\t\trecObj.oxr = x.charAt(1) === \"=\";\n\t\t\t\trecObj.oyr = y.charAt(1) === \"=\";\n\t\t\t\trecObj.ox = parseFloat(x.replace(_NaNExp, \"\"));\n\t\t\t\trecObj.oy = parseFloat(y.replace(_NaNExp, \"\"));\n\t\t\t\trecObj.v = v;\n\t\t\t}\n\t\t\treturn recObj || v;\n\t\t},\n\n\n\t\t/**\n   * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\n   * @param {(number|string)} e End value which is typically a string, but could be a number\n   * @param {(number|string)} b Beginning value which is typically a string but could be a number\n   * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\n   */\n\t\t_parseChange = function _parseChange(e, b) {\n\t\t\treturn typeof e === \"string\" && e.charAt(1) === \"=\" ? parseInt(e.charAt(0) + \"1\", 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b);\n\t\t},\n\n\n\t\t/**\n   * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\n   * @param {Object} v Value to be parsed\n   * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n   * @return {number} Parsed value\n   */\n\t\t_parseVal = function _parseVal(v, d) {\n\t\t\treturn v == null ? d : typeof v === \"string\" && v.charAt(1) === \"=\" ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(v.substr(2)) + d : parseFloat(v);\n\t\t},\n\n\n\t\t/**\n   * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\n   * @param {Object} v Value to be parsed\n   * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n   * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\n   * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\n   * @return {number} parsed angle in radians\n   */\n\t\t_parseAngle = function _parseAngle(v, d, p, directionalEnd) {\n\t\t\tvar min = 0.000001,\n\t\t\t    cap,\n\t\t\t    split,\n\t\t\t    dif,\n\t\t\t    result,\n\t\t\t    isRelative;\n\t\t\tif (v == null) {\n\t\t\t\tresult = d;\n\t\t\t} else if (typeof v === \"number\") {\n\t\t\t\tresult = v;\n\t\t\t} else {\n\t\t\t\tcap = 360;\n\t\t\t\tsplit = v.split(\"_\");\n\t\t\t\tisRelative = v.charAt(1) === \"=\";\n\t\t\t\tdif = (isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * (v.indexOf(\"rad\") === -1 ? 1 : _RAD2DEG) - (isRelative ? 0 : d);\n\t\t\t\tif (split.length) {\n\t\t\t\t\tif (directionalEnd) {\n\t\t\t\t\t\tdirectionalEnd[p] = d + dif;\n\t\t\t\t\t}\n\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\tdif = dif < 0 ? dif + cap : dif - cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\tdif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;\n\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\tdif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult = d + dif;\n\t\t\t}\n\t\t\tif (result < min && result > -min) {\n\t\t\t\tresult = 0;\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t    _colorLookup = { aqua: [0, 255, 255],\n\t\t\tlime: [0, 255, 0],\n\t\t\tsilver: [192, 192, 192],\n\t\t\tblack: [0, 0, 0],\n\t\t\tmaroon: [128, 0, 0],\n\t\t\tteal: [0, 128, 128],\n\t\t\tblue: [0, 0, 255],\n\t\t\tnavy: [0, 0, 128],\n\t\t\twhite: [255, 255, 255],\n\t\t\tfuchsia: [255, 0, 255],\n\t\t\tolive: [128, 128, 0],\n\t\t\tyellow: [255, 255, 0],\n\t\t\torange: [255, 165, 0],\n\t\t\tgray: [128, 128, 128],\n\t\t\tpurple: [128, 0, 128],\n\t\t\tgreen: [0, 128, 0],\n\t\t\tred: [255, 0, 0],\n\t\t\tpink: [255, 192, 203],\n\t\t\tcyan: [0, 255, 255],\n\t\t\ttransparent: [255, 255, 255, 0] },\n\t\t    _hue = function _hue(h, m1, m2) {\n\t\t\th = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n\t\t\treturn (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < 0.5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255 + 0.5 | 0;\n\t\t},\n\n\n\t\t/**\n   * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\n   * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\n   * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\n   * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\n   */\n\t\t_parseColor = CSSPlugin.parseColor = function (v, toHSL) {\n\t\t\tvar a, r, g, b, h, s, l, max, min, d, wasHSL;\n\t\t\tif (!v) {\n\t\t\t\ta = _colorLookup.black;\n\t\t\t} else if (typeof v === \"number\") {\n\t\t\t\ta = [v >> 16, v >> 8 & 255, v & 255];\n\t\t\t} else {\n\t\t\t\tif (v.charAt(v.length - 1) === \",\") {\n\t\t\t\t\t//sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n\t\t\t\t\tv = v.substr(0, v.length - 1);\n\t\t\t\t}\n\t\t\t\tif (_colorLookup[v]) {\n\t\t\t\t\ta = _colorLookup[v];\n\t\t\t\t} else if (v.charAt(0) === \"#\") {\n\t\t\t\t\tif (v.length === 4) {\n\t\t\t\t\t\t//for shorthand like #9F0\n\t\t\t\t\t\tr = v.charAt(1);\n\t\t\t\t\t\tg = v.charAt(2);\n\t\t\t\t\t\tb = v.charAt(3);\n\t\t\t\t\t\tv = \"#\" + r + r + g + g + b + b;\n\t\t\t\t\t}\n\t\t\t\t\tv = parseInt(v.substr(1), 16);\n\t\t\t\t\ta = [v >> 16, v >> 8 & 255, v & 255];\n\t\t\t\t} else if (v.substr(0, 3) === \"hsl\") {\n\t\t\t\t\ta = wasHSL = v.match(_numExp);\n\t\t\t\t\tif (!toHSL) {\n\t\t\t\t\t\th = Number(a[0]) % 360 / 360;\n\t\t\t\t\t\ts = Number(a[1]) / 100;\n\t\t\t\t\t\tl = Number(a[2]) / 100;\n\t\t\t\t\t\tg = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n\t\t\t\t\t\tr = l * 2 - g;\n\t\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\t\ta[3] = Number(v[3]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ta[0] = _hue(h + 1 / 3, r, g);\n\t\t\t\t\t\ta[1] = _hue(h, r, g);\n\t\t\t\t\t\ta[2] = _hue(h - 1 / 3, r, g);\n\t\t\t\t\t} else if (v.indexOf(\"=\") !== -1) {\n\t\t\t\t\t\t//if relative values are found, just return the raw strings with the relative prefixes in place.\n\t\t\t\t\t\treturn v.match(_relNumExp);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ta = v.match(_numExp) || _colorLookup.transparent;\n\t\t\t\t}\n\t\t\t\ta[0] = Number(a[0]);\n\t\t\t\ta[1] = Number(a[1]);\n\t\t\t\ta[2] = Number(a[2]);\n\t\t\t\tif (a.length > 3) {\n\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (toHSL && !wasHSL) {\n\t\t\t\tr = a[0] / 255;\n\t\t\t\tg = a[1] / 255;\n\t\t\t\tb = a[2] / 255;\n\t\t\t\tmax = Math.max(r, g, b);\n\t\t\t\tmin = Math.min(r, g, b);\n\t\t\t\tl = (max + min) / 2;\n\t\t\t\tif (max === min) {\n\t\t\t\t\th = s = 0;\n\t\t\t\t} else {\n\t\t\t\t\td = max - min;\n\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\t\th = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n\t\t\t\t\th *= 60;\n\t\t\t\t}\n\t\t\t\ta[0] = h + 0.5 | 0;\n\t\t\t\ta[1] = s * 100 + 0.5 | 0;\n\t\t\t\ta[2] = l * 100 + 0.5 | 0;\n\t\t\t}\n\t\t\treturn a;\n\t\t},\n\t\t    _formatColors = function _formatColors(s, toHSL) {\n\t\t\tvar colors = s.match(_colorExp) || [],\n\t\t\t    charIndex = 0,\n\t\t\t    parsed = colors.length ? \"\" : s,\n\t\t\t    i,\n\t\t\t    color,\n\t\t\t    temp;\n\t\t\tfor (i = 0; i < colors.length; i++) {\n\t\t\t\tcolor = colors[i];\n\t\t\t\ttemp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);\n\t\t\t\tcharIndex += temp.length + color.length;\n\t\t\t\tcolor = _parseColor(color, toHSL);\n\t\t\t\tif (color.length === 3) {\n\t\t\t\t\tcolor.push(1);\n\t\t\t\t}\n\t\t\t\tparsed += temp + (toHSL ? \"hsla(\" + color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : \"rgba(\" + color.join(\",\")) + \")\";\n\t\t\t}\n\t\t\treturn parsed;\n\t\t},\n\t\t    _colorExp = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#.+?\\\\b\"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\n\n\t\tfor (p in _colorLookup) {\n\t\t\t_colorExp += \"|\" + p + \"\\\\b\";\n\t\t}\n\t\t_colorExp = new RegExp(_colorExp + \")\", \"gi\");\n\n\t\tCSSPlugin.colorStringFilter = function (a) {\n\t\t\tvar combined = a[0] + a[1],\n\t\t\t    toHSL;\n\t\t\t_colorExp.lastIndex = 0;\n\t\t\tif (_colorExp.test(combined)) {\n\t\t\t\ttoHSL = combined.indexOf(\"hsl(\") !== -1 || combined.indexOf(\"hsla(\") !== -1;\n\t\t\t\ta[0] = _formatColors(a[0], toHSL);\n\t\t\t\ta[1] = _formatColors(a[1], toHSL);\n\t\t\t}\n\t\t};\n\n\t\tif (!TweenLite.defaultStringFilter) {\n\t\t\tTweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;\n\t\t}\n\n\t\t/**\n   * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\n   * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\n   * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\n   * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\n   * @return {Function} formatter function\n   */\n\t\tvar _getFormatter = function _getFormatter(dflt, clr, collapsible, multi) {\n\t\t\tif (dflt == null) {\n\t\t\t\treturn function (v) {\n\t\t\t\t\treturn v;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar dColor = clr ? (dflt.match(_colorExp) || [\"\"])[0] : \"\",\n\t\t\t    dVals = dflt.split(dColor).join(\"\").match(_valuesExp) || [],\n\t\t\t    pfx = dflt.substr(0, dflt.indexOf(dVals[0])),\n\t\t\t    sfx = dflt.charAt(dflt.length - 1) === \")\" ? \")\" : \"\",\n\t\t\t    delim = dflt.indexOf(\" \") !== -1 ? \" \" : \",\",\n\t\t\t    numVals = dVals.length,\n\t\t\t    dSfx = numVals > 0 ? dVals[0].replace(_numExp, \"\") : \"\",\n\t\t\t    _formatter2;\n\t\t\tif (!numVals) {\n\t\t\t\treturn function (v) {\n\t\t\t\t\treturn v;\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (clr) {\n\t\t\t\t_formatter2 = function formatter(v) {\n\t\t\t\t\tvar color, vals, i, a;\n\t\t\t\t\tif (typeof v === \"number\") {\n\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\ta[i] = _formatter2(a[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t}\n\t\t\t\t\tcolor = (v.match(_colorExp) || [dColor])[0];\n\t\t\t\t\tvals = v.split(color).join(\"\").match(_valuesExp) || [];\n\t\t\t\t\ti = vals.length;\n\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn pfx + vals.join(delim) + delim + color + sfx + (v.indexOf(\"inset\") !== -1 ? \" inset\" : \"\");\n\t\t\t\t};\n\t\t\t\treturn _formatter2;\n\t\t\t}\n\t\t\t_formatter2 = function _formatter(v) {\n\t\t\t\tvar vals, a, i;\n\t\t\t\tif (typeof v === \"number\") {\n\t\t\t\t\tv += dSfx;\n\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\ta[i] = _formatter2(a[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t}\n\t\t\t\tvals = v.match(_valuesExp) || [];\n\t\t\t\ti = vals.length;\n\t\t\t\tif (numVals > i--) {\n\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\tvals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn pfx + vals.join(delim) + sfx;\n\t\t\t};\n\t\t\treturn _formatter2;\n\t\t},\n\n\n\t\t/**\n   * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\n   * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\n   * @return {Function} a formatter function\n   */\n\t\t_getEdgeParser = function _getEdgeParser(props) {\n\t\t\tprops = props.split(\",\");\n\t\t\treturn function (t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tvar a = (e + \"\").split(\" \"),\n\t\t\t\t    i;\n\t\t\t\tvars = {};\n\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\tvars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0];\n\t\t\t\t}\n\t\t\t\treturn cssp.parse(t, vars, pt, plugin);\n\t\t\t};\n\t\t},\n\n\n\t\t// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens  which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n\t\t_setPluginRatio = _internals._setPluginRatio = function (v) {\n\t\t\tthis.plugin.setRatio(v);\n\t\t\tvar d = this.data,\n\t\t\t    proxy = d.proxy,\n\t\t\t    mpt = d.firstMPT,\n\t\t\t    min = 0.000001,\n\t\t\t    val,\n\t\t\t    pt,\n\t\t\t    i,\n\t\t\t    str;\n\t\t\twhile (mpt) {\n\t\t\t\tval = proxy[mpt.v];\n\t\t\t\tif (mpt.r) {\n\t\t\t\t\tval = Math.round(val);\n\t\t\t\t} else if (val < min && val > -min) {\n\t\t\t\t\tval = 0;\n\t\t\t\t}\n\t\t\t\tmpt.t[mpt.p] = val;\n\t\t\t\tmpt = mpt._next;\n\t\t\t}\n\t\t\tif (d.autoRotate) {\n\t\t\t\td.autoRotate.rotation = proxy.rotation;\n\t\t\t}\n\t\t\t//at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method.\n\t\t\tif (v === 1) {\n\t\t\t\tmpt = d.firstMPT;\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tpt = mpt.t;\n\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\tpt.e = pt.s + pt.xs0;\n\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\tstr = pt.xs0 + pt.s + pt.xs1;\n\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\tstr += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt.e = str;\n\t\t\t\t\t}\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n   * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\n   * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\n   * @param {!string} p property name\n   * @param {(number|string|object)} v value\n   * @param {MiniPropTween=} next next MiniPropTween in the linked list\n   * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\n   */\n\t\tMiniPropTween = function MiniPropTween(t, p, v, next, r) {\n\t\t\tthis.t = t;\n\t\t\tthis.p = p;\n\t\t\tthis.v = v;\n\t\t\tthis.r = r;\n\t\t\tif (next) {\n\t\t\t\tnext._prev = this;\n\t\t\t\tthis._next = next;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n   * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\n   * This method returns an object that has the following properties:\n   *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\n   *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\n   *  - firstMPT: the first MiniPropTween in the linked list\n   *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\n   * @param {!Object} t target object to be tweened\n   * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\n   * @param {!CSSPlugin} cssp The CSSPlugin instance\n   * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\n   * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\n   * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\n   * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\n   */\n\t\t_parseToProxy = _internals._parseToProxy = function (t, vars, cssp, pt, plugin, shallow) {\n\t\t\tvar bpt = pt,\n\t\t\t    start = {},\n\t\t\t    end = {},\n\t\t\t    transform = cssp._transform,\n\t\t\t    oldForce = _forcePT,\n\t\t\t    i,\n\t\t\t    p,\n\t\t\t    xp,\n\t\t\t    mpt,\n\t\t\t    firstPT;\n\t\t\tcssp._transform = null;\n\t\t\t_forcePT = vars;\n\t\t\tpt = firstPT = cssp.parse(t, vars, pt, plugin);\n\t\t\t_forcePT = oldForce;\n\t\t\t//break off from the linked list so the new ones are isolated.\n\t\t\tif (shallow) {\n\t\t\t\tcssp._transform = transform;\n\t\t\t\tif (bpt) {\n\t\t\t\t\tbpt._prev = null;\n\t\t\t\t\tif (bpt._prev) {\n\t\t\t\t\t\tbpt._prev._next = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt && pt !== bpt) {\n\t\t\t\tif (pt.type <= 1) {\n\t\t\t\t\tp = pt.p;\n\t\t\t\t\tend[p] = pt.s + pt.c;\n\t\t\t\t\tstart[p] = pt.s;\n\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\tmpt = new MiniPropTween(pt, \"s\", p, mpt, pt.r);\n\t\t\t\t\t\tpt.c = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt.type === 1) {\n\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\twhile (--i > 0) {\n\t\t\t\t\t\t\txp = \"xn\" + i;\n\t\t\t\t\t\t\tp = pt.p + \"_\" + xp;\n\t\t\t\t\t\t\tend[p] = pt.data[xp];\n\t\t\t\t\t\t\tstart[p] = pt[xp];\n\t\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn { proxy: start, end: end, firstMPT: mpt, pt: firstPT };\n\t\t},\n\n\n\t\t/**\n   * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\n   * CSSPropTweens have the following optional properties as well (not defined through the constructor):\n   *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\n   *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\n   *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\n   *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\n   *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\n   * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\n   * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\n   * @param {number} s Starting numeric value\n   * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\n   * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\n   * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\n   * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\n   * @param {boolean=} r If true, the value(s) should be rounded\n   * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\n   * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\n   * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\n   */\n\t\tCSSPropTween = _internals.CSSPropTween = function (t, p, s, c, next, type, n, r, pr, b, e) {\n\t\t\tthis.t = t; //target\n\t\t\tthis.p = p; //property\n\t\t\tthis.s = s; //starting value\n\t\t\tthis.c = c; //change value\n\t\t\tthis.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\n\t\t\tif (!(t instanceof CSSPropTween)) {\n\t\t\t\t_overwriteProps.push(this.n);\n\t\t\t}\n\t\t\tthis.r = r; //round (boolean)\n\t\t\tthis.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\n\t\t\tif (pr) {\n\t\t\t\tthis.pr = pr;\n\t\t\t\t_hasPriority = true;\n\t\t\t}\n\t\t\tthis.b = b === undefined ? s : b;\n\t\t\tthis.e = e === undefined ? s + c : e;\n\t\t\tif (next) {\n\t\t\t\tthis._next = next;\n\t\t\t\tnext._prev = this;\n\t\t\t}\n\t\t},\n\t\t    _addNonTweeningNumericPT = function _addNonTweeningNumericPT(target, prop, start, end, next, overwriteProp) {\n\t\t\t//cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\n\t\t\tvar pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);\n\t\t\tpt.b = start;\n\t\t\tpt.e = pt.xs0 = end;\n\t\t\treturn pt;\n\t\t},\n\n\n\t\t/**\n   * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\n   * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\n   * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\n   * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\n   *\n   * @param {!Object} t Target whose property will be tweened\n   * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\n   * @param {string} b Beginning value\n   * @param {string} e Ending value\n   * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\n   * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\n   * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\n   * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\n   * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\n   * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\n   * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\n   */\n\t\t_parseComplex = CSSPlugin.parseComplex = function (t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {\n\t\t\t//DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\n\t\t\tb = b || dflt || \"\";\n\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, setRatio ? 2 : 1, null, false, pr, b, e);\n\t\t\te += \"\"; //ensures it's a string\n\t\t\tvar ba = b.split(\", \").join(\",\").split(\" \"),\n\t\t\t    //beginning array\n\t\t\tea = e.split(\", \").join(\",\").split(\" \"),\n\t\t\t    //ending array\n\t\t\tl = ba.length,\n\t\t\t    autoRound = _autoRound !== false,\n\t\t\t    i,\n\t\t\t    xi,\n\t\t\t    ni,\n\t\t\t    bv,\n\t\t\t    ev,\n\t\t\t    bnums,\n\t\t\t    enums,\n\t\t\t    bn,\n\t\t\t    hasAlpha,\n\t\t\t    temp,\n\t\t\t    cv,\n\t\t\t    str,\n\t\t\t    useHSL;\n\t\t\tif (e.indexOf(\",\") !== -1 || b.indexOf(\",\") !== -1) {\n\t\t\t\tba = ba.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\tea = ea.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\tl = ba.length;\n\t\t\t}\n\t\t\tif (l !== ea.length) {\n\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\tba = (dflt || \"\").split(\" \");\n\t\t\t\tl = ba.length;\n\t\t\t}\n\t\t\tpt.plugin = plugin;\n\t\t\tpt.setRatio = setRatio;\n\t\t\t_colorExp.lastIndex = 0;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tbv = ba[i];\n\t\t\t\tev = ea[i];\n\t\t\t\tbn = parseFloat(bv);\n\t\t\t\t//if the value begins with a number (most common). It's fine if it has a suffix like px\n\t\t\t\tif (bn || bn === 0) {\n\t\t\t\t\tpt.appendXtra(\"\", bn, _parseChange(ev, bn), ev.replace(_relNumExp, \"\"), autoRound && ev.indexOf(\"px\") !== -1, true);\n\n\t\t\t\t\t//if the value is a color\n\t\t\t\t} else if (clrs && _colorExp.test(bv)) {\n\t\t\t\t\tstr = ev.charAt(ev.length - 1) === \",\" ? \"),\" : \")\"; //if there's a comma at the end, retain it.\n\t\t\t\t\tuseHSL = ev.indexOf(\"hsl\") !== -1 && _supportsOpacity;\n\t\t\t\t\tbv = _parseColor(bv, useHSL);\n\t\t\t\t\tev = _parseColor(ev, useHSL);\n\t\t\t\t\thasAlpha = bv.length + ev.length > 6;\n\t\t\t\t\tif (hasAlpha && !_supportsOpacity && ev[3] === 0) {\n\t\t\t\t\t\t//older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\n\t\t\t\t\t\tpt[\"xs\" + pt.l] += pt.l ? \" transparent\" : \"transparent\";\n\t\t\t\t\t\tpt.e = pt.e.split(ea[i]).join(\"transparent\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!_supportsOpacity) {\n\t\t\t\t\t\t\t//old versions of IE don't support rgba().\n\t\t\t\t\t\t\thasAlpha = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (useHSL) {\n\t\t\t\t\t\t\tpt.appendXtra(hasAlpha ? \"hsla(\" : \"hsl(\", bv[0], _parseChange(ev[0], bv[0]), \",\", false, true).appendXtra(\"\", bv[1], _parseChange(ev[1], bv[1]), \"%,\", false).appendXtra(\"\", bv[2], _parseChange(ev[2], bv[2]), hasAlpha ? \"%,\" : \"%\" + str, false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.appendXtra(hasAlpha ? \"rgba(\" : \"rgb(\", bv[0], ev[0] - bv[0], \",\", true, true).appendXtra(\"\", bv[1], ev[1] - bv[1], \",\", true).appendXtra(\"\", bv[2], ev[2] - bv[2], hasAlpha ? \",\" : str, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hasAlpha) {\n\t\t\t\t\t\t\tbv = bv.length < 4 ? 1 : bv[3];\n\t\t\t\t\t\t\tpt.appendXtra(\"\", bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n\t\t\t\t} else {\n\t\t\t\t\tbnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n\n\t\t\t\t\t//if no number is found, treat it as a non-tweening value and just append the string to the current xs.\n\t\t\t\t\tif (!bnums) {\n\t\t\t\t\t\tpt[\"xs\" + pt.l] += pt.l ? \" \" + bv : bv;\n\n\t\t\t\t\t\t//loop through all the numbers that are found and construct the extra values on the pt.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tenums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\n\t\t\t\t\t\tif (!enums || enums.length !== bnums.length) {\n\t\t\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tni = 0;\n\t\t\t\t\t\tfor (xi = 0; xi < bnums.length; xi++) {\n\t\t\t\t\t\t\tcv = bnums[xi];\n\t\t\t\t\t\t\ttemp = bv.indexOf(cv, ni);\n\t\t\t\t\t\t\tpt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), \"\", autoRound && bv.substr(temp + cv.length, 2) === \"px\", xi === 0);\n\t\t\t\t\t\t\tni = temp + cv.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt[\"xs\" + pt.l] += bv.substr(ni);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\n\t\t\tif (e.indexOf(\"=\") !== -1) if (pt.data) {\n\t\t\t\tstr = pt.xs0 + pt.data.s;\n\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\tstr += pt[\"xs\" + i] + pt.data[\"xn\" + i];\n\t\t\t\t}\n\t\t\t\tpt.e = str + pt[\"xs\" + i];\n\t\t\t}\n\t\t\tif (!pt.l) {\n\t\t\t\tpt.type = -1;\n\t\t\t\tpt.xs0 = pt.e;\n\t\t\t}\n\t\t\treturn pt.xfirst || pt;\n\t\t},\n\t\t    i = 9;\n\n\t\tp = CSSPropTween.prototype;\n\t\tp.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\n\t\twhile (--i > 0) {\n\t\t\tp[\"xn\" + i] = 0;\n\t\t\tp[\"xs\" + i] = \"\";\n\t\t}\n\t\tp.xs0 = \"\";\n\t\tp._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;\n\n\t\t/**\n   * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\n   * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\n   * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\n   * @param {string=} pfx Prefix (if any)\n   * @param {!number} s Starting value\n   * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\n   * @param {string=} sfx Suffix (if any)\n   * @param {boolean=} r Round (if true).\n   * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\n   * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\n   */\n\t\tp.appendXtra = function (pfx, s, c, sfx, r, pad) {\n\t\t\tvar pt = this,\n\t\t\t    l = pt.l;\n\t\t\tpt[\"xs\" + l] += pad && l ? \" \" + pfx : pfx || \"\";\n\t\t\tif (!c) if (l !== 0 && !pt.plugin) {\n\t\t\t\t//typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\n\t\t\t\tpt[\"xs\" + l] += s + (sfx || \"\");\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.l++;\n\t\t\tpt.type = pt.setRatio ? 2 : 1;\n\t\t\tpt[\"xs\" + pt.l] = sfx || \"\";\n\t\t\tif (l > 0) {\n\t\t\t\tpt.data[\"xn\" + l] = s + c;\n\t\t\t\tpt.rxp[\"xn\" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\n\t\t\t\tpt[\"xn\" + l] = s;\n\t\t\t\tif (!pt.plugin) {\n\t\t\t\t\tpt.xfirst = new CSSPropTween(pt, \"xn\" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);\n\t\t\t\t\tpt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.data = { s: s + c };\n\t\t\tpt.rxp = {};\n\t\t\tpt.s = s;\n\t\t\tpt.c = c;\n\t\t\tpt.r = r;\n\t\t\treturn pt;\n\t\t};\n\n\t\t/**\n   * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\n   * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\n   * @param {Object=} options An object containing any of the following configuration options:\n   *                      - defaultValue: the default value\n   *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\n   *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\n   *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\n   *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\n   *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\n   *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\n   *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\n   *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\n   */\n\t\tvar SpecialProp = function SpecialProp(p, options) {\n\t\t\toptions = options || {};\n\t\t\tthis.p = options.prefix ? _checkPropPrefix(p) || p : p;\n\t\t\t_specialProps[p] = _specialProps[this.p] = this;\n\t\t\tthis.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);\n\t\t\tif (options.parser) {\n\t\t\t\tthis.parse = options.parser;\n\t\t\t}\n\t\t\tthis.clrs = options.color;\n\t\t\tthis.multi = options.multi;\n\t\t\tthis.keyword = options.keyword;\n\t\t\tthis.dflt = options.defaultValue;\n\t\t\tthis.pr = options.priority || 0;\n\t\t},\n\n\n\t\t//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n\t\t_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function (p, options, defaults) {\n\t\t\tif ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n\t\t\t\toptions = { parser: defaults }; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n\t\t\t}\n\t\t\tvar a = p.split(\",\"),\n\t\t\t    d = options.defaultValue,\n\t\t\t    i,\n\t\t\t    temp;\n\t\t\tdefaults = defaults || [d];\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\toptions.prefix = i === 0 && options.prefix;\n\t\t\t\toptions.defaultValue = defaults[i] || d;\n\t\t\t\ttemp = new SpecialProp(a[i], options);\n\t\t\t}\n\t\t},\n\n\n\t\t//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n\t\t_registerPluginProp = function _registerPluginProp(p) {\n\t\t\tif (!_specialProps[p]) {\n\t\t\t\tvar pluginName = p.charAt(0).toUpperCase() + p.substr(1) + \"Plugin\";\n\t\t\t\t_registerComplexSpecialProp(p, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\t\tvar pluginClass = _globals.com.greensock.plugins[pluginName];\n\t\t\t\t\t\tif (!pluginClass) {\n\t\t\t\t\t\t\t_log(\"Error: \" + pluginName + \" js file not loaded.\");\n\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpluginClass._cssRegister();\n\t\t\t\t\t\treturn _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);\n\t\t\t\t\t} });\n\t\t\t}\n\t\t};\n\n\t\tp = SpecialProp.prototype;\n\n\t\t/**\n   * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\n   * @param {!Object} t target element\n   * @param {(string|number|object)} b beginning value\n   * @param {(string|number|object)} e ending (destination) value\n   * @param {CSSPropTween=} pt next CSSPropTween in the linked list\n   * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\n   * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\n   * @return {CSSPropTween=} First CSSPropTween in the linked list\n   */\n\t\tp.parseComplex = function (t, b, e, pt, plugin, setRatio) {\n\t\t\tvar kwd = this.keyword,\n\t\t\t    i,\n\t\t\t    ba,\n\t\t\t    ea,\n\t\t\t    l,\n\t\t\t    bi,\n\t\t\t    ei;\n\t\t\t//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\n\t\t\tif (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {\n\t\t\t\tba = b.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\tea = e.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t} else if (kwd) {\n\t\t\t\tba = [b];\n\t\t\t\tea = [e];\n\t\t\t}\n\t\t\tif (ea) {\n\t\t\t\tl = ea.length > ba.length ? ea.length : ba.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tb = ba[i] = ba[i] || this.dflt;\n\t\t\t\t\te = ea[i] = ea[i] || this.dflt;\n\t\t\t\t\tif (kwd) {\n\t\t\t\t\t\tbi = b.indexOf(kwd);\n\t\t\t\t\t\tei = e.indexOf(kwd);\n\t\t\t\t\t\tif (bi !== ei) {\n\t\t\t\t\t\t\tif (ei === -1) {\n\t\t\t\t\t\t\t\t//if the keyword isn't in the end value, remove it from the beginning one.\n\t\t\t\t\t\t\t\tba[i] = ba[i].split(kwd).join(\"\");\n\t\t\t\t\t\t\t} else if (bi === -1) {\n\t\t\t\t\t\t\t\t//if the keyword isn't in the beginning, add it.\n\t\t\t\t\t\t\t\tba[i] += \" \" + kwd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb = ba.join(\", \");\n\t\t\t\te = ea.join(\", \");\n\t\t\t}\n\t\t\treturn _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);\n\t\t};\n\n\t\t/**\n   * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\n   * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\n   * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\n   * @param {!Object} t Target object whose property is being tweened\n   * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\n   * @param {!string} p Property name\n   * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\n   * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\n   * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\n   * @param {Object=} vars Original vars object that contains the data for parsing.\n   * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\n   */\n\t\tp.parse = function (t, e, p, cssp, pt, plugin, vars) {\n\t\t\treturn this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);\n\t\t};\n\n\t\t/**\n   * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\n   *  1) Target object whose property should be tweened (typically a DOM element)\n   *  2) The end/destination value (could be a string, number, object, or whatever you want)\n   *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\n   *\n   * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\n   *\n   * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\n   *      var start = target.style.width;\n   *      return function(ratio) {\n   *              target.style.width = (start + value * ratio) + \"px\";\n   *              console.log(\"set width to \" + target.style.width);\n   *          }\n   * }, 0);\n   *\n   * Then, when I do this tween, it will trigger my special property:\n   *\n   * TweenLite.to(element, 1, {css:{myCustomProp:100}});\n   *\n   * In the example, of course, we're just changing the width, but you can do anything you want.\n   *\n   * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\n   * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\n   * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\n   */\n\t\tCSSPlugin.registerSpecialProp = function (name, onInitTween, priority) {\n\t\t\t_registerComplexSpecialProp(name, { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\tvar rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);\n\t\t\t\t\trv.plugin = plugin;\n\t\t\t\t\trv.setRatio = onInitTween(t, e, cssp._tween, p);\n\t\t\t\t\treturn rv;\n\t\t\t\t}, priority: priority });\n\t\t};\n\n\t\t//transform-related methods and properties\n\t\tCSSPlugin.useSVGTransformAttr = _isSafari || _isFirefox; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\n\t\tvar _transformProps = \"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\".split(\",\"),\n\t\t    _transformProp = _checkPropPrefix(\"transform\"),\n\t\t    //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n\t\t_transformPropCSS = _prefixCSS + \"transform\",\n\t\t    _transformOriginProp = _checkPropPrefix(\"transformOrigin\"),\n\t\t    _supports3D = _checkPropPrefix(\"perspective\") !== null,\n\t\t    Transform = _internals.Transform = function () {\n\t\t\tthis.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;\n\t\t\tthis.force3D = CSSPlugin.defaultForce3D === false || !_supports3D ? false : CSSPlugin.defaultForce3D || \"auto\";\n\t\t},\n\t\t    _SVGElement = window.SVGElement,\n\t\t    _useSVGTransformAttr,\n\n\t\t//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n\n\t\t_createSVG = function _createSVG(type, container, attributes) {\n\t\t\tvar element = _doc.createElementNS(\"http://www.w3.org/2000/svg\", type),\n\t\t\t    reg = /([a-z])([A-Z])/g,\n\t\t\t    p;\n\t\t\tfor (p in attributes) {\n\t\t\t\telement.setAttributeNS(null, p.replace(reg, \"$1-$2\").toLowerCase(), attributes[p]);\n\t\t\t}\n\t\t\tcontainer.appendChild(element);\n\t\t\treturn element;\n\t\t},\n\t\t    _docElement = _doc.documentElement,\n\t\t    _forceSVGTransformAttr = function () {\n\t\t\t//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\n\t\t\tvar force = _ieVers || /Android/i.test(_agent) && !window.chrome,\n\t\t\t    svg,\n\t\t\t    rect,\n\t\t\t    width;\n\t\t\tif (_doc.createElementNS && !force) {\n\t\t\t\t//IE8 and earlier doesn't support SVG anyway\n\t\t\t\tsvg = _createSVG(\"svg\", _docElement);\n\t\t\t\trect = _createSVG(\"rect\", svg, { width: 100, height: 50, x: 100 });\n\t\t\t\twidth = rect.getBoundingClientRect().width;\n\t\t\t\trect.style[_transformOriginProp] = \"50% 50%\";\n\t\t\t\trect.style[_transformProp] = \"scaleX(0.5)\";\n\t\t\t\tforce = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n\t\t\t\t_docElement.removeChild(svg);\n\t\t\t}\n\t\t\treturn force;\n\t\t}(),\n\t\t    _parseSVGOrigin = function _parseSVGOrigin(e, local, decoratee, absolute, smoothOrigin) {\n\t\t\tvar tm = e._gsTransform,\n\t\t\t    m = _getMatrix(e, true),\n\t\t\t    v,\n\t\t\t    x,\n\t\t\t    y,\n\t\t\t    xOrigin,\n\t\t\t    yOrigin,\n\t\t\t    a,\n\t\t\t    b,\n\t\t\t    c,\n\t\t\t    d,\n\t\t\t    tx,\n\t\t\t    ty,\n\t\t\t    determinant,\n\t\t\t    xOriginOld,\n\t\t\t    yOriginOld;\n\t\t\tif (tm) {\n\t\t\t\txOriginOld = tm.xOrigin; //record the original values before we alter them.\n\t\t\t\tyOriginOld = tm.yOrigin;\n\t\t\t}\n\t\t\tif (!absolute || (v = absolute.split(\" \")).length < 2) {\n\t\t\t\tb = e.getBBox();\n\t\t\t\tlocal = _parsePosition(local).split(\" \");\n\t\t\t\tv = [(local[0].indexOf(\"%\") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x, (local[1].indexOf(\"%\") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];\n\t\t\t}\n\t\t\tdecoratee.xOrigin = xOrigin = parseFloat(v[0]);\n\t\t\tdecoratee.yOrigin = yOrigin = parseFloat(v[1]);\n\t\t\tif (absolute && m !== _identity2DMatrix) {\n\t\t\t\t//if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\n\t\t\t\ta = m[0];\n\t\t\t\tb = m[1];\n\t\t\t\tc = m[2];\n\t\t\t\td = m[3];\n\t\t\t\ttx = m[4];\n\t\t\t\tty = m[5];\n\t\t\t\tdeterminant = a * d - b * c;\n\t\t\t\tx = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n\t\t\t\ty = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n\t\t\t\txOrigin = decoratee.xOrigin = v[0] = x;\n\t\t\t\tyOrigin = decoratee.yOrigin = v[1] = y;\n\t\t\t}\n\t\t\tif (tm) {\n\t\t\t\t//avoid jump when transformOrigin is changed - adjust the x/y values accordingly\n\t\t\t\tif (smoothOrigin || smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false) {\n\t\t\t\t\tx = xOrigin - xOriginOld;\n\t\t\t\t\ty = yOrigin - yOriginOld;\n\t\t\t\t\t//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n\t\t\t\t\t//tm.x -= x - (x * m[0] + y * m[2]);\n\t\t\t\t\t//tm.y -= y - (x * m[1] + y * m[3]);\n\t\t\t\t\ttm.xOffset += x * m[0] + y * m[2] - x;\n\t\t\t\t\ttm.yOffset += x * m[1] + y * m[3] - y;\n\t\t\t\t} else {\n\t\t\t\t\ttm.xOffset = tm.yOffset = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\te.setAttribute(\"data-svg-origin\", v.join(\" \"));\n\t\t},\n\t\t    _isSVG = function _isSVG(e) {\n\t\t\treturn !!(_SVGElement && typeof e.getBBox === \"function\" && e.getCTM && (!e.parentNode || e.parentNode.getBBox && e.parentNode.getCTM));\n\t\t},\n\t\t    _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n\t\t    _getMatrix = function _getMatrix(e, force2D) {\n\t\t\tvar tm = e._gsTransform || new Transform(),\n\t\t\t    rnd = 100000,\n\t\t\t    isDefault,\n\t\t\t    s,\n\t\t\t    m,\n\t\t\t    n,\n\t\t\t    dec;\n\t\t\tif (_transformProp) {\n\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t} else if (e.currentStyle) {\n\t\t\t\t//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\n\t\t\t\ts = e.currentStyle.filter.match(_ieGetMatrixExp);\n\t\t\t\ts = s && s.length === 4 ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), tm.x || 0, tm.y || 0].join(\",\") : \"\";\n\t\t\t}\n\t\t\tisDefault = !s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\";\n\t\t\tif (tm.svg || e.getBBox && _isSVG(e)) {\n\t\t\t\tif (isDefault && (e.style[_transformProp] + \"\").indexOf(\"matrix\") !== -1) {\n\t\t\t\t\t//some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n\t\t\t\t\ts = e.style[_transformProp];\n\t\t\t\t\tisDefault = 0;\n\t\t\t\t}\n\t\t\t\tm = e.getAttribute(\"transform\");\n\t\t\t\tif (isDefault && m) {\n\t\t\t\t\tif (m.indexOf(\"matrix\") !== -1) {\n\t\t\t\t\t\t//just in case there's a \"transform\" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.\n\t\t\t\t\t\ts = m;\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t} else if (m.indexOf(\"translate\") !== -1) {\n\t\t\t\t\t\ts = \"matrix(1,0,0,1,\" + m.match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi).join(\",\") + \")\";\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isDefault) {\n\t\t\t\treturn _identity2DMatrix;\n\t\t\t}\n\t\t\t//split the matrix values out into an array (m for matrix)\n\t\t\tm = (s || \"\").match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi) || [];\n\t\t\ti = m.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tn = Number(m[i]);\n\t\t\t\tm[i] = (dec = n - (n |= 0)) ? (dec * rnd + (dec < 0 ? -0.5 : 0.5) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n\t\t\t}\n\t\t\treturn force2D && m.length > 6 ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;\n\t\t},\n\n\n\t\t/**\n   * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\n   * @param {!Object} t target element\n   * @param {Object=} cs computed style object (optional)\n   * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\n   * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\n   * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\n   */\n\t\t_getTransform = _internals.getTransform = function (t, cs, rec, parse) {\n\t\t\tif (t._gsTransform && rec && !parse) {\n\t\t\t\treturn t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n\t\t\t}\n\t\t\tvar tm = rec ? t._gsTransform || new Transform() : new Transform(),\n\t\t\t    invX = tm.scaleX < 0,\n\t\t\t    //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\n\t\t\tmin = 0.00002,\n\t\t\t    rnd = 100000,\n\t\t\t    zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, \"0 0 0\").split(\" \")[2]) || tm.zOrigin || 0 : 0,\n\t\t\t    defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,\n\t\t\t    m,\n\t\t\t    i,\n\t\t\t    scaleX,\n\t\t\t    scaleY,\n\t\t\t    rotation,\n\t\t\t    skewX;\n\n\t\t\ttm.svg = !!(t.getBBox && _isSVG(t));\n\t\t\tif (tm.svg) {\n\t\t\t\t_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, _cs, false, \"50% 50%\") + \"\", tm, t.getAttribute(\"data-svg-origin\"));\n\t\t\t\t_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;\n\t\t\t}\n\t\t\tm = _getMatrix(t);\n\t\t\tif (m !== _identity2DMatrix) {\n\n\t\t\t\tif (m.length === 16) {\n\t\t\t\t\t//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\n\t\t\t\t\tvar a11 = m[0],\n\t\t\t\t\t    a21 = m[1],\n\t\t\t\t\t    a31 = m[2],\n\t\t\t\t\t    a41 = m[3],\n\t\t\t\t\t    a12 = m[4],\n\t\t\t\t\t    a22 = m[5],\n\t\t\t\t\t    a32 = m[6],\n\t\t\t\t\t    a42 = m[7],\n\t\t\t\t\t    a13 = m[8],\n\t\t\t\t\t    a23 = m[9],\n\t\t\t\t\t    a33 = m[10],\n\t\t\t\t\t    a14 = m[12],\n\t\t\t\t\t    a24 = m[13],\n\t\t\t\t\t    a34 = m[14],\n\t\t\t\t\t    a43 = m[11],\n\t\t\t\t\t    angle = Math.atan2(a32, a33),\n\t\t\t\t\t    t1,\n\t\t\t\t\t    t2,\n\t\t\t\t\t    t3,\n\t\t\t\t\t    t4,\n\t\t\t\t\t    cos,\n\t\t\t\t\t    sin;\n\n\t\t\t\t\t//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\n\t\t\t\t\tif (tm.zOrigin) {\n\t\t\t\t\t\ta34 = -tm.zOrigin;\n\t\t\t\t\t\ta14 = a13 * a34 - m[12];\n\t\t\t\t\t\ta24 = a23 * a34 - m[13];\n\t\t\t\t\t\ta34 = a33 * a34 + tm.zOrigin - m[14];\n\t\t\t\t\t}\n\t\t\t\t\ttm.rotationX = angle * _RAD2DEG;\n\t\t\t\t\t//rotationX\n\t\t\t\t\tif (angle) {\n\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\tt1 = a12 * cos + a13 * sin;\n\t\t\t\t\t\tt2 = a22 * cos + a23 * sin;\n\t\t\t\t\t\tt3 = a32 * cos + a33 * sin;\n\t\t\t\t\t\ta13 = a12 * -sin + a13 * cos;\n\t\t\t\t\t\ta23 = a22 * -sin + a23 * cos;\n\t\t\t\t\t\ta33 = a32 * -sin + a33 * cos;\n\t\t\t\t\t\ta43 = a42 * -sin + a43 * cos;\n\t\t\t\t\t\ta12 = t1;\n\t\t\t\t\t\ta22 = t2;\n\t\t\t\t\t\ta32 = t3;\n\t\t\t\t\t}\n\t\t\t\t\t//rotationY\n\t\t\t\t\tangle = Math.atan2(a13, a33);\n\t\t\t\t\ttm.rotationY = angle * _RAD2DEG;\n\t\t\t\t\tif (angle) {\n\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\tt1 = a11 * cos - a13 * sin;\n\t\t\t\t\t\tt2 = a21 * cos - a23 * sin;\n\t\t\t\t\t\tt3 = a31 * cos - a33 * sin;\n\t\t\t\t\t\ta23 = a21 * sin + a23 * cos;\n\t\t\t\t\t\ta33 = a31 * sin + a33 * cos;\n\t\t\t\t\t\ta43 = a41 * sin + a43 * cos;\n\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\ta21 = t2;\n\t\t\t\t\t\ta31 = t3;\n\t\t\t\t\t}\n\t\t\t\t\t//rotationZ\n\t\t\t\t\tangle = Math.atan2(a21, a11);\n\t\t\t\t\ttm.rotation = angle * _RAD2DEG;\n\t\t\t\t\tif (angle) {\n\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\ta11 = a11 * cos + a12 * sin;\n\t\t\t\t\t\tt2 = a21 * cos + a22 * sin;\n\t\t\t\t\t\ta22 = a21 * -sin + a22 * cos;\n\t\t\t\t\t\ta32 = a31 * -sin + a32 * cos;\n\t\t\t\t\t\ta21 = t2;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {\n\t\t\t\t\t\t//when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n\t\t\t\t\t\ttm.rotationX = tm.rotation = 0;\n\t\t\t\t\t\ttm.rotationY += 180;\n\t\t\t\t\t}\n\n\t\t\t\t\ttm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21) * rnd + 0.5 | 0) / rnd;\n\t\t\t\t\ttm.scaleY = (Math.sqrt(a22 * a22 + a23 * a23) * rnd + 0.5 | 0) / rnd;\n\t\t\t\t\ttm.scaleZ = (Math.sqrt(a32 * a32 + a33 * a33) * rnd + 0.5 | 0) / rnd;\n\t\t\t\t\ttm.skewX = 0;\n\t\t\t\t\ttm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n\t\t\t\t\ttm.x = a14;\n\t\t\t\t\ttm.y = a24;\n\t\t\t\t\ttm.z = a34;\n\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);\n\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);\n\t\t\t\t\t}\n\t\t\t\t} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) && !(tm.x !== undefined && _getStyle(t, \"display\", cs) === \"none\")) {\n\t\t\t\t\t//sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\n\t\t\t\t\tvar k = m.length >= 6,\n\t\t\t\t\t    a = k ? m[0] : 1,\n\t\t\t\t\t    b = m[1] || 0,\n\t\t\t\t\t    c = m[2] || 0,\n\t\t\t\t\t    d = k ? m[3] : 1;\n\t\t\t\t\ttm.x = m[4] || 0;\n\t\t\t\t\ttm.y = m[5] || 0;\n\t\t\t\t\tscaleX = Math.sqrt(a * a + b * b);\n\t\t\t\t\tscaleY = Math.sqrt(d * d + c * c);\n\t\t\t\t\trotation = a || b ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\t\t\t\t\tskewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;\n\t\t\t\t\tif (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n\t\t\t\t\t\tif (invX) {\n\t\t\t\t\t\t\tscaleX *= -1;\n\t\t\t\t\t\t\tskewX += rotation <= 0 ? 180 : -180;\n\t\t\t\t\t\t\trotation += rotation <= 0 ? 180 : -180;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscaleY *= -1;\n\t\t\t\t\t\t\tskewX += skewX <= 0 ? 180 : -180;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttm.scaleX = scaleX;\n\t\t\t\t\ttm.scaleY = scaleY;\n\t\t\t\t\ttm.rotation = rotation;\n\t\t\t\t\ttm.skewX = skewX;\n\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\ttm.rotationX = tm.rotationY = tm.z = 0;\n\t\t\t\t\t\ttm.perspective = defaultTransformPerspective;\n\t\t\t\t\t\ttm.scaleZ = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);\n\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttm.zOrigin = zOrigin;\n\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\n\t\t\t\tfor (i in tm) {\n\t\t\t\t\tif (tm[i] < min) if (tm[i] > -min) {\n\t\t\t\t\t\ttm[i] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\n\t\t\tif (rec) {\n\t\t\t\tt._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\n\t\t\t\tif (tm.svg) {\n\t\t\t\t\t//if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\n\t\t\t\t\tif (_useSVGTransformAttr && t.style[_transformProp]) {\n\t\t\t\t\t\tTweenLite.delayedCall(0.001, function () {\n\t\t\t\t\t\t\t//if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n\t\t\t\t\t\t\t_removeProp(t.style, _transformProp);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!_useSVGTransformAttr && t.getAttribute(\"transform\")) {\n\t\t\t\t\t\tTweenLite.delayedCall(0.001, function () {\n\t\t\t\t\t\t\tt.removeAttribute(\"transform\");\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tm;\n\t\t},\n\n\n\t\t//for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n\t\t_setIETransformRatio = function _setIETransformRatio(v) {\n\t\t\tvar t = this.data,\n\t\t\t    //refers to the element's _gsTransform object\n\t\t\tang = -t.rotation * _DEG2RAD,\n\t\t\t    skew = ang + t.skewX * _DEG2RAD,\n\t\t\t    rnd = 100000,\n\t\t\t    a = (Math.cos(ang) * t.scaleX * rnd | 0) / rnd,\n\t\t\t    b = (Math.sin(ang) * t.scaleX * rnd | 0) / rnd,\n\t\t\t    c = (Math.sin(skew) * -t.scaleY * rnd | 0) / rnd,\n\t\t\t    d = (Math.cos(skew) * t.scaleY * rnd | 0) / rnd,\n\t\t\t    style = this.t.style,\n\t\t\t    cs = this.t.currentStyle,\n\t\t\t    filters,\n\t\t\t    val;\n\t\t\tif (!cs) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tval = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\n\t\t\tb = -c;\n\t\t\tc = -val;\n\t\t\tfilters = cs.filter;\n\t\t\tstyle.filter = \"\"; //remove filters so that we can accurately measure offsetWidth/offsetHeight\n\t\t\tvar w = this.t.offsetWidth,\n\t\t\t    h = this.t.offsetHeight,\n\t\t\t    clip = cs.position !== \"absolute\",\n\t\t\t    m = \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + a + \", M12=\" + b + \", M21=\" + c + \", M22=\" + d,\n\t\t\t    ox = t.x + w * t.xPercent / 100,\n\t\t\t    oy = t.y + h * t.yPercent / 100,\n\t\t\t    dx,\n\t\t\t    dy;\n\n\t\t\t//if transformOrigin is being used, adjust the offset x and y\n\t\t\tif (t.ox != null) {\n\t\t\t\tdx = (t.oxp ? w * t.ox * 0.01 : t.ox) - w / 2;\n\t\t\t\tdy = (t.oyp ? h * t.oy * 0.01 : t.oy) - h / 2;\n\t\t\t\tox += dx - (dx * a + dy * b);\n\t\t\t\toy += dy - (dx * c + dy * d);\n\t\t\t}\n\n\t\t\tif (!clip) {\n\t\t\t\tm += \", sizingMethod='auto expand')\";\n\t\t\t} else {\n\t\t\t\tdx = w / 2;\n\t\t\t\tdy = h / 2;\n\t\t\t\t//translate to ensure that transformations occur around the correct origin (default is center).\n\t\t\t\tm += \", Dx=\" + (dx - (dx * a + dy * b) + ox) + \", Dy=\" + (dy - (dx * c + dy * d) + oy) + \")\";\n\t\t\t}\n\t\t\tif (filters.indexOf(\"DXImageTransform.Microsoft.Matrix(\") !== -1) {\n\t\t\t\tstyle.filter = filters.replace(_ieSetMatrixExp, m);\n\t\t\t} else {\n\t\t\t\tstyle.filter = m + \" \" + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n\t\t\t}\n\n\t\t\t//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\n\t\t\tif (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf(\"Dx=0, Dy=0\") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf(\"gradient(\" && filters.indexOf(\"Alpha\")) === -1) {\n\t\t\t\tstyle.removeAttribute(\"filter\");\n\t\t\t}\n\n\t\t\t//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\n\t\t\tif (!clip) {\n\t\t\t\tvar mult = _ieVers < 8 ? 1 : -1,\n\t\t\t\t    //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\n\t\t\t\tmarg,\n\t\t\t\t    prop,\n\t\t\t\t    dif;\n\t\t\t\tdx = t.ieOffsetX || 0;\n\t\t\t\tdy = t.ieOffsetY || 0;\n\t\t\t\tt.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);\n\t\t\t\tt.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);\n\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\tprop = _margins[i];\n\t\t\t\t\tmarg = cs[prop];\n\t\t\t\t\t//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\n\t\t\t\t\tval = marg.indexOf(\"px\") !== -1 ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, \"\")) || 0;\n\t\t\t\t\tif (val !== t[prop]) {\n\t\t\t\t\t\tdif = i < 2 ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdif = i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY;\n\t\t\t\t\t}\n\t\t\t\t\tstyle[prop] = (t[prop] = Math.round(val - dif * (i === 0 || i === 2 ? 1 : mult))) + \"px\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/* translates a super small decimal to a string WITHOUT scientific notation\n  _safeDecimal = function(n) {\n  \tvar s = (n < 0 ? -n : n) + \"\",\n  \t\ta = s.split(\"e-\");\n  \treturn (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\n  },\n  */\n\n\t\t_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function (v) {\n\t\t\tvar t = this.data,\n\t\t\t    //refers to the element's _gsTransform object\n\t\t\tstyle = this.t.style,\n\t\t\t    angle = t.rotation,\n\t\t\t    rotationX = t.rotationX,\n\t\t\t    rotationY = t.rotationY,\n\t\t\t    sx = t.scaleX,\n\t\t\t    sy = t.scaleY,\n\t\t\t    sz = t.scaleZ,\n\t\t\t    x = t.x,\n\t\t\t    y = t.y,\n\t\t\t    z = t.z,\n\t\t\t    isSVG = t.svg,\n\t\t\t    perspective = t.perspective,\n\t\t\t    force3D = t.force3D,\n\t\t\t    a11,\n\t\t\t    a12,\n\t\t\t    a13,\n\t\t\t    a21,\n\t\t\t    a22,\n\t\t\t    a23,\n\t\t\t    a31,\n\t\t\t    a32,\n\t\t\t    a33,\n\t\t\t    a41,\n\t\t\t    a42,\n\t\t\t    a43,\n\t\t\t    zOrigin,\n\t\t\t    min,\n\t\t\t    cos,\n\t\t\t    sin,\n\t\t\t    t1,\n\t\t\t    t2,\n\t\t\t    transform,\n\t\t\t    comma,\n\t\t\t    zero,\n\t\t\t    skew,\n\t\t\t    rnd;\n\t\t\t//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\n\t\t\tif (((v === 1 || v === 0) && force3D === \"auto\" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX || _useSVGTransformAttr && isSVG || !_supports3D) {\n\t\t\t\t//on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n\n\t\t\t\t//2D\n\t\t\t\tif (angle || t.skewX || isSVG) {\n\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\tskew = t.skewX * _DEG2RAD;\n\t\t\t\t\trnd = 100000;\n\t\t\t\t\ta11 = Math.cos(angle) * sx;\n\t\t\t\t\ta21 = Math.sin(angle) * sx;\n\t\t\t\t\ta12 = Math.sin(angle - skew) * -sy;\n\t\t\t\t\ta22 = Math.cos(angle - skew) * sy;\n\t\t\t\t\tif (skew && t.skewType === \"simple\") {\n\t\t\t\t\t\t//by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\tt1 = Math.tan(skew);\n\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\ta12 *= t1;\n\t\t\t\t\t\ta22 *= t1;\n\t\t\t\t\t\tif (t.skewY) {\n\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isSVG) {\n\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t\tif (_useSVGTransformAttr && (t.xPercent || t.yPercent)) {\n\t\t\t\t\t\t\t//The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\n\t\t\t\t\t\t\tmin = this.t.getBBox();\n\t\t\t\t\t\t\tx += t.xPercent * 0.01 * min.width;\n\t\t\t\t\t\t\ty += t.yPercent * 0.01 * min.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmin = 0.000001;\n\t\t\t\t\t\tif (x < min) if (x > -min) {\n\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (y < min) if (y > -min) {\n\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttransform = (a11 * rnd | 0) / rnd + \",\" + (a21 * rnd | 0) / rnd + \",\" + (a12 * rnd | 0) / rnd + \",\" + (a22 * rnd | 0) / rnd + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\tif (isSVG && _useSVGTransformAttr) {\n\t\t\t\t\t\tthis.t.setAttribute(\"transform\", \"matrix(\" + transform);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\n\t\t\t\t\t\tstyle[_transformProp] = (t.xPercent || t.yPercent ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + transform;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstyle[_transformProp] = (t.xPercent || t.yPercent ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + sx + \",0,0,\" + sy + \",\" + x + \",\" + y + \")\";\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (_isFirefox) {\n\t\t\t\t//Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\n\t\t\t\tmin = 0.0001;\n\t\t\t\tif (sx < min && sx > -min) {\n\t\t\t\t\tsx = sz = 0.00002;\n\t\t\t\t}\n\t\t\t\tif (sy < min && sy > -min) {\n\t\t\t\t\tsy = sz = 0.00002;\n\t\t\t\t}\n\t\t\t\tif (perspective && !t.z && !t.rotationX && !t.rotationY) {\n\t\t\t\t\t//Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\n\t\t\t\t\tperspective = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (angle || t.skewX) {\n\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\tcos = a11 = Math.cos(angle);\n\t\t\t\tsin = a21 = Math.sin(angle);\n\t\t\t\tif (t.skewX) {\n\t\t\t\t\tangle -= t.skewX * _DEG2RAD;\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\tif (t.skewType === \"simple\") {\n\t\t\t\t\t\t//by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\tt1 = Math.tan(t.skewX * _DEG2RAD);\n\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\tcos *= t1;\n\t\t\t\t\t\tsin *= t1;\n\t\t\t\t\t\tif (t.skewY) {\n\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta12 = -sin;\n\t\t\t\ta22 = cos;\n\t\t\t} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) {\n\t\t\t\t//if we're only translating and/or 2D scaling, this is faster...\n\t\t\t\tstyle[_transformProp] = (t.xPercent || t.yPercent ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) translate3d(\" : \"translate3d(\") + x + \"px,\" + y + \"px,\" + z + \"px)\" + (sx !== 1 || sy !== 1 ? \" scale(\" + sx + \",\" + sy + \")\" : \"\");\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\ta11 = a22 = 1;\n\t\t\t\ta12 = a21 = 0;\n\t\t\t}\n\t\t\t// KEY  INDEX   AFFECTS\n\t\t\t// a11  0       rotation, rotationY, scaleX\n\t\t\t// a21  1       rotation, rotationY, scaleX\n\t\t\t// a31  2       rotationY, scaleX\n\t\t\t// a41  3       rotationY, scaleX\n\t\t\t// a12  4       rotation, skewX, rotationX, scaleY\n\t\t\t// a22  5       rotation, skewX, rotationX, scaleY\n\t\t\t// a32  6       rotationX, scaleY\n\t\t\t// a42  7       rotationX, scaleY\n\t\t\t// a13  8       rotationY, rotationX, scaleZ\n\t\t\t// a23  9       rotationY, rotationX, scaleZ\n\t\t\t// a33  10      rotationY, rotationX, scaleZ\n\t\t\t// a43  11      rotationY, rotationX, perspective, scaleZ\n\t\t\t// a14  12      x, zOrigin, svgOrigin\n\t\t\t// a24  13      y, zOrigin, svgOrigin\n\t\t\t// a34  14      z, zOrigin\n\t\t\t// a44  15\n\t\t\t// rotation: Math.atan2(a21, a11)\n\t\t\t// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n\t\t\t// rotationX: Math.atan2(a32, a33)\n\t\t\ta33 = 1;\n\t\t\ta13 = a23 = a31 = a32 = a41 = a42 = 0;\n\t\t\ta43 = perspective ? -1 / perspective : 0;\n\t\t\tzOrigin = t.zOrigin;\n\t\t\tmin = 0.000001; //threshold below which browsers use scientific notation which won't work.\n\t\t\tcomma = \",\";\n\t\t\tzero = \"0\";\n\t\t\tangle = rotationY * _DEG2RAD;\n\t\t\tif (angle) {\n\t\t\t\tcos = Math.cos(angle);\n\t\t\t\tsin = Math.sin(angle);\n\t\t\t\ta31 = -sin;\n\t\t\t\ta41 = a43 * -sin;\n\t\t\t\ta13 = a11 * sin;\n\t\t\t\ta23 = a21 * sin;\n\t\t\t\ta33 = cos;\n\t\t\t\ta43 *= cos;\n\t\t\t\ta11 *= cos;\n\t\t\t\ta21 *= cos;\n\t\t\t}\n\t\t\tangle = rotationX * _DEG2RAD;\n\t\t\tif (angle) {\n\t\t\t\tcos = Math.cos(angle);\n\t\t\t\tsin = Math.sin(angle);\n\t\t\t\tt1 = a12 * cos + a13 * sin;\n\t\t\t\tt2 = a22 * cos + a23 * sin;\n\t\t\t\ta32 = a33 * sin;\n\t\t\t\ta42 = a43 * sin;\n\t\t\t\ta13 = a12 * -sin + a13 * cos;\n\t\t\t\ta23 = a22 * -sin + a23 * cos;\n\t\t\t\ta33 = a33 * cos;\n\t\t\t\ta43 = a43 * cos;\n\t\t\t\ta12 = t1;\n\t\t\t\ta22 = t2;\n\t\t\t}\n\t\t\tif (sz !== 1) {\n\t\t\t\ta13 *= sz;\n\t\t\t\ta23 *= sz;\n\t\t\t\ta33 *= sz;\n\t\t\t\ta43 *= sz;\n\t\t\t}\n\t\t\tif (sy !== 1) {\n\t\t\t\ta12 *= sy;\n\t\t\t\ta22 *= sy;\n\t\t\t\ta32 *= sy;\n\t\t\t\ta42 *= sy;\n\t\t\t}\n\t\t\tif (sx !== 1) {\n\t\t\t\ta11 *= sx;\n\t\t\t\ta21 *= sx;\n\t\t\t\ta31 *= sx;\n\t\t\t\ta41 *= sx;\n\t\t\t}\n\n\t\t\tif (zOrigin || isSVG) {\n\t\t\t\tif (zOrigin) {\n\t\t\t\t\tx += a13 * -zOrigin;\n\t\t\t\t\ty += a23 * -zOrigin;\n\t\t\t\t\tz += a33 * -zOrigin + zOrigin;\n\t\t\t\t}\n\t\t\t\tif (isSVG) {\n\t\t\t\t\t//due to bugs in some browsers, we need to manage the transform-origin of SVG manually\n\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t}\n\t\t\t\tif (x < min && x > -min) {\n\t\t\t\t\tx = zero;\n\t\t\t\t}\n\t\t\t\tif (y < min && y > -min) {\n\t\t\t\t\ty = zero;\n\t\t\t\t}\n\t\t\t\tif (z < min && z > -min) {\n\t\t\t\t\tz = 0; //don't use string because we calculate perspective later and need the number.\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\n\t\t\ttransform = t.xPercent || t.yPercent ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix3d(\" : \"matrix3d(\";\n\t\t\ttransform += (a11 < min && a11 > -min ? zero : a11) + comma + (a21 < min && a21 > -min ? zero : a21) + comma + (a31 < min && a31 > -min ? zero : a31);\n\t\t\ttransform += comma + (a41 < min && a41 > -min ? zero : a41) + comma + (a12 < min && a12 > -min ? zero : a12) + comma + (a22 < min && a22 > -min ? zero : a22);\n\t\t\tif (rotationX || rotationY) {\n\t\t\t\t//performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\n\t\t\t\ttransform += comma + (a32 < min && a32 > -min ? zero : a32) + comma + (a42 < min && a42 > -min ? zero : a42) + comma + (a13 < min && a13 > -min ? zero : a13);\n\t\t\t\ttransform += comma + (a23 < min && a23 > -min ? zero : a23) + comma + (a33 < min && a33 > -min ? zero : a33) + comma + (a43 < min && a43 > -min ? zero : a43) + comma;\n\t\t\t} else {\n\t\t\t\ttransform += \",0,0,0,0,1,0,\";\n\t\t\t}\n\t\t\ttransform += x + comma + y + comma + z + comma + (perspective ? 1 + -z / perspective : 1) + \")\";\n\n\t\t\tstyle[_transformProp] = transform;\n\t\t};\n\n\t\tp = Transform.prototype;\n\t\tp.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;\n\t\tp.scaleX = p.scaleY = p.scaleZ = 1;\n\n\t\t_registerComplexSpecialProp(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\", { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tif (cssp._lastParsedTransform === vars) {\n\t\t\t\t\treturn pt;\n\t\t\t\t} //only need to parse the transform once, and only if the browser supports it.\n\t\t\t\tcssp._lastParsedTransform = vars;\n\t\t\t\tvar originalGSTransform = t._gsTransform,\n\t\t\t\t    style = t.style,\n\t\t\t\t    min = 0.000001,\n\t\t\t\t    i = _transformProps.length,\n\t\t\t\t    v = vars,\n\t\t\t\t    endRotations = {},\n\t\t\t\t    transformOriginString = \"transformOrigin\",\n\t\t\t\t    m1,\n\t\t\t\t    m2,\n\t\t\t\t    skewY,\n\t\t\t\t    copy,\n\t\t\t\t    orig,\n\t\t\t\t    has3D,\n\t\t\t\t    hasChange,\n\t\t\t\t    dr,\n\t\t\t\t    x,\n\t\t\t\t    y;\n\t\t\t\tif (vars.display) {\n\t\t\t\t\t//if the user is setting display during this tween, it may not be instantiated yet but we must force it here in order to get accurate readings. If display is \"none\", some browsers refuse to report the transform properties correctly.\n\t\t\t\t\tcopy = _getStyle(t, \"display\");\n\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\tm1 = _getTransform(t, _cs, true, vars.parseTransform);\n\t\t\t\t\tstyle.display = copy;\n\t\t\t\t} else {\n\t\t\t\t\tm1 = _getTransform(t, _cs, true, vars.parseTransform);\n\t\t\t\t}\n\t\t\t\tcssp._transform = m1;\n\t\t\t\tif (typeof v.transform === \"string\" && _transformProp) {\n\t\t\t\t\t//for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\n\t\t\t\t\tcopy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\n\t\t\t\t\tcopy[_transformProp] = v.transform;\n\t\t\t\t\tcopy.display = \"block\"; //if display is \"none\", the browser often refuses to report the transform properties correctly.\n\t\t\t\t\tcopy.position = \"absolute\";\n\t\t\t\t\t_doc.body.appendChild(_tempDiv);\n\t\t\t\t\tm2 = _getTransform(_tempDiv, null, false);\n\t\t\t\t\t_doc.body.removeChild(_tempDiv);\n\t\t\t\t\tif (!m2.perspective) {\n\t\t\t\t\t\tm2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n\t\t\t\t\t}\n\t\t\t\t\tif (v.xPercent != null) {\n\t\t\t\t\t\tm2.xPercent = _parseVal(v.xPercent, m1.xPercent);\n\t\t\t\t\t}\n\t\t\t\t\tif (v.yPercent != null) {\n\t\t\t\t\t\tm2.yPercent = _parseVal(v.yPercent, m1.yPercent);\n\t\t\t\t\t}\n\t\t\t\t} else if ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\") {\n\t\t\t\t\t//for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\n\t\t\t\t\tm2 = { scaleX: _parseVal(v.scaleX != null ? v.scaleX : v.scale, m1.scaleX),\n\t\t\t\t\t\tscaleY: _parseVal(v.scaleY != null ? v.scaleY : v.scale, m1.scaleY),\n\t\t\t\t\t\tscaleZ: _parseVal(v.scaleZ, m1.scaleZ),\n\t\t\t\t\t\tx: _parseVal(v.x, m1.x),\n\t\t\t\t\t\ty: _parseVal(v.y, m1.y),\n\t\t\t\t\t\tz: _parseVal(v.z, m1.z),\n\t\t\t\t\t\txPercent: _parseVal(v.xPercent, m1.xPercent),\n\t\t\t\t\t\tyPercent: _parseVal(v.yPercent, m1.yPercent),\n\t\t\t\t\t\tperspective: _parseVal(v.transformPerspective, m1.perspective) };\n\t\t\t\t\tdr = v.directionalRotation;\n\t\t\t\t\tif (dr != null) {\n\t\t\t\t\t\tif ((typeof dr === \"undefined\" ? \"undefined\" : _typeof(dr)) === \"object\") {\n\t\t\t\t\t\t\tfor (copy in dr) {\n\t\t\t\t\t\t\t\tv[copy] = dr[copy];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv.rotation = dr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof v.x === \"string\" && v.x.indexOf(\"%\") !== -1) {\n\t\t\t\t\t\tm2.x = 0;\n\t\t\t\t\t\tm2.xPercent = _parseVal(v.x, m1.xPercent);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof v.y === \"string\" && v.y.indexOf(\"%\") !== -1) {\n\t\t\t\t\t\tm2.y = 0;\n\t\t\t\t\t\tm2.yPercent = _parseVal(v.y, m1.yPercent);\n\t\t\t\t\t}\n\n\t\t\t\t\tm2.rotation = _parseAngle(\"rotation\" in v ? v.rotation : \"shortRotation\" in v ? v.shortRotation + \"_short\" : \"rotationZ\" in v ? v.rotationZ : m1.rotation, m1.rotation, \"rotation\", endRotations);\n\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\tm2.rotationX = _parseAngle(\"rotationX\" in v ? v.rotationX : \"shortRotationX\" in v ? v.shortRotationX + \"_short\" : m1.rotationX || 0, m1.rotationX, \"rotationX\", endRotations);\n\t\t\t\t\t\tm2.rotationY = _parseAngle(\"rotationY\" in v ? v.rotationY : \"shortRotationY\" in v ? v.shortRotationY + \"_short\" : m1.rotationY || 0, m1.rotationY, \"rotationY\", endRotations);\n\t\t\t\t\t}\n\t\t\t\t\tm2.skewX = v.skewX == null ? m1.skewX : _parseAngle(v.skewX, m1.skewX);\n\n\t\t\t\t\t//note: for performance reasons, we combine all skewing into the skewX and rotation values, ignoring skewY but we must still record it so that we can discern how much of the overall skew is attributed to skewX vs. skewY. Otherwise, if the skewY would always act relative (tween skewY to 10deg, for example, multiple times and if we always combine things into skewX, we can't remember that skewY was 10 from last time). Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of -10 degrees.\n\t\t\t\t\tm2.skewY = v.skewY == null ? m1.skewY : _parseAngle(v.skewY, m1.skewY);\n\t\t\t\t\tif (skewY = m2.skewY - m1.skewY) {\n\t\t\t\t\t\tm2.skewX += skewY;\n\t\t\t\t\t\tm2.rotation += skewY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (_supports3D && v.force3D != null) {\n\t\t\t\t\tm1.force3D = v.force3D;\n\t\t\t\t\thasChange = true;\n\t\t\t\t}\n\n\t\t\t\tm1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;\n\n\t\t\t\thas3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;\n\t\t\t\tif (!has3D && v.scale != null) {\n\t\t\t\t\tm2.scaleZ = 1; //no need to tween scaleZ.\n\t\t\t\t}\n\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tp = _transformProps[i];\n\t\t\t\t\torig = m2[p] - m1[p];\n\t\t\t\t\tif (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {\n\t\t\t\t\t\thasChange = true;\n\t\t\t\t\t\tpt = new CSSPropTween(m1, p, m1[p], orig, pt);\n\t\t\t\t\t\tif (p in endRotations) {\n\t\t\t\t\t\t\tpt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt.xs0 = 0; //ensures the value stays numeric in setRatio()\n\t\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\torig = v.transformOrigin;\n\t\t\t\tif (m1.svg && (orig || v.svgOrigin)) {\n\t\t\t\t\tx = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\n\t\t\t\t\ty = m1.yOffset;\n\t\t\t\t\t_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOrigin\", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOrigin\", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);\n\t\t\t\t\tif (x !== m1.xOffset || y !== m1.yOffset) {\n\t\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOffset\", originalGSTransform ? x : m1.xOffset, m1.xOffset, pt, transformOriginString);\n\t\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOffset\", originalGSTransform ? y : m1.yOffset, m1.yOffset, pt, transformOriginString);\n\t\t\t\t\t}\n\t\t\t\t\torig = _useSVGTransformAttr ? null : \"0px 0px\"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n\t\t\t\t}\n\t\t\t\tif (orig || _supports3D && has3D && m1.zOrigin) {\n\t\t\t\t\t//if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\n\t\t\t\t\tif (_transformProp) {\n\t\t\t\t\t\thasChange = true;\n\t\t\t\t\t\tp = _transformOriginProp;\n\t\t\t\t\t\torig = (orig || _getStyle(t, p, _cs, false, \"50% 50%\")) + \"\"; //cast as string to avoid errors\n\t\t\t\t\t\tpt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);\n\t\t\t\t\t\tpt.b = style[p];\n\t\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\t\tcopy = m1.zOrigin;\n\t\t\t\t\t\t\torig = orig.split(\" \");\n\t\t\t\t\t\t\tm1.zOrigin = (orig.length > 2 && !(copy !== 0 && orig[2] === \"0px\") ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\n\t\t\t\t\t\t\tpt.xs0 = pt.e = orig[0] + \" \" + (orig[1] || \"50%\") + \" 0px\"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\n\t\t\t\t\t\t\tpt = new CSSPropTween(m1, \"zOrigin\", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\n\t\t\t\t\t\t\tpt.b = copy;\n\t\t\t\t\t\t\tpt.xs0 = pt.e = m1.zOrigin;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.xs0 = pt.e = orig;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_parsePosition(orig + \"\", m1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasChange) {\n\t\t\t\t\tcssp._transformType = !(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3) ? 3 : 2; //quicker than calling cssp._enableTransforms();\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}, prefix: true });\n\n\t\t_registerComplexSpecialProp(\"boxShadow\", { defaultValue: \"0px 0px 0px 0px #999\", prefix: true, color: true, multi: true, keyword: \"inset\" });\n\n\t\t_registerComplexSpecialProp(\"borderRadius\", { defaultValue: \"0px\", parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\te = this.format(e);\n\t\t\t\tvar props = [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomRightRadius\", \"borderBottomLeftRadius\"],\n\t\t\t\t    style = t.style,\n\t\t\t\t    ea1,\n\t\t\t\t    i,\n\t\t\t\t    es2,\n\t\t\t\t    bs2,\n\t\t\t\t    bs,\n\t\t\t\t    es,\n\t\t\t\t    bn,\n\t\t\t\t    en,\n\t\t\t\t    w,\n\t\t\t\t    h,\n\t\t\t\t    esfx,\n\t\t\t\t    bsfx,\n\t\t\t\t    rel,\n\t\t\t\t    hn,\n\t\t\t\t    vn,\n\t\t\t\t    em;\n\t\t\t\tw = parseFloat(t.offsetWidth);\n\t\t\t\th = parseFloat(t.offsetHeight);\n\t\t\t\tea1 = e.split(\" \");\n\t\t\t\tfor (i = 0; i < props.length; i++) {\n\t\t\t\t\t//if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\n\t\t\t\t\tif (this.p.indexOf(\"border\")) {\n\t\t\t\t\t\t//older browsers used a prefix\n\t\t\t\t\t\tprops[i] = _checkPropPrefix(props[i]);\n\t\t\t\t\t}\n\t\t\t\t\tbs = bs2 = _getStyle(t, props[i], _cs, false, \"0px\");\n\t\t\t\t\tif (bs.indexOf(\" \") !== -1) {\n\t\t\t\t\t\tbs2 = bs.split(\" \");\n\t\t\t\t\t\tbs = bs2[0];\n\t\t\t\t\t\tbs2 = bs2[1];\n\t\t\t\t\t}\n\t\t\t\t\tes = es2 = ea1[i];\n\t\t\t\t\tbn = parseFloat(bs);\n\t\t\t\t\tbsfx = bs.substr((bn + \"\").length);\n\t\t\t\t\trel = es.charAt(1) === \"=\";\n\t\t\t\t\tif (rel) {\n\t\t\t\t\t\ten = parseInt(es.charAt(0) + \"1\", 10);\n\t\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\t\tesfx = es.substr((en + \"\").length - (en < 0 ? 1 : 0)) || \"\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\t\tesfx = es.substr((en + \"\").length);\n\t\t\t\t\t}\n\t\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\t\tesfx = _suffixMap[p] || bsfx;\n\t\t\t\t\t}\n\t\t\t\t\tif (esfx !== bsfx) {\n\t\t\t\t\t\thn = _convertToPixels(t, \"borderLeft\", bn, bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\n\t\t\t\t\t\tvn = _convertToPixels(t, \"borderTop\", bn, bsfx); //vertical number\n\t\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\t\tbs = hn / w * 100 + \"%\";\n\t\t\t\t\t\t\tbs2 = vn / h * 100 + \"%\";\n\t\t\t\t\t\t} else if (esfx === \"em\") {\n\t\t\t\t\t\t\tem = _convertToPixels(t, \"borderLeft\", 1, \"em\");\n\t\t\t\t\t\t\tbs = hn / em + \"em\";\n\t\t\t\t\t\t\tbs2 = vn / em + \"em\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbs = hn + \"px\";\n\t\t\t\t\t\t\tbs2 = vn + \"px\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\tes = parseFloat(bs) + en + esfx;\n\t\t\t\t\t\t\tes2 = parseFloat(bs2) + en + esfx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = _parseComplex(style, props[i], bs + \" \" + bs2, es + \" \" + es2, false, \"0px\", pt);\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}, prefix: true, formatter: _getFormatter(\"0px 0px 0px 0px\", false, true) });\n\t\t_registerComplexSpecialProp(\"backgroundPosition\", { defaultValue: \"0 0\", parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\tvar bp = \"background-position\",\n\t\t\t\t    cs = _cs || _getComputedStyle(t, null),\n\t\t\t\t    bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + \"-x\") + \" \" + cs.getPropertyValue(bp + \"-y\") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + \" \" + t.currentStyle.backgroundPositionY) || \"0 0\"),\n\t\t\t\t    //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\n\t\t\t\tes = this.format(e),\n\t\t\t\t    ba,\n\t\t\t\t    ea,\n\t\t\t\t    i,\n\t\t\t\t    pct,\n\t\t\t\t    overlap,\n\t\t\t\t    src;\n\t\t\t\tif (bs.indexOf(\"%\") !== -1 !== (es.indexOf(\"%\") !== -1)) {\n\t\t\t\t\tsrc = _getStyle(t, \"backgroundImage\").replace(_urlExp, \"\");\n\t\t\t\t\tif (src && src !== \"none\") {\n\t\t\t\t\t\tba = bs.split(\" \");\n\t\t\t\t\t\tea = es.split(\" \");\n\t\t\t\t\t\t_tempImg.setAttribute(\"src\", src); //set the temp IMG's src to the background-image so that we can measure its width/height\n\t\t\t\t\t\ti = 2;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tbs = ba[i];\n\t\t\t\t\t\t\tpct = bs.indexOf(\"%\") !== -1;\n\t\t\t\t\t\t\tif (pct !== (ea[i].indexOf(\"%\") !== -1)) {\n\t\t\t\t\t\t\t\toverlap = i === 0 ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;\n\t\t\t\t\t\t\t\tba[i] = pct ? parseFloat(bs) / 100 * overlap + \"px\" : parseFloat(bs) / overlap * 100 + \"%\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbs = ba.join(\" \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.parseComplex(t.style, bs, es, pt, plugin);\n\t\t\t}, formatter: _parsePosition });\n\t\t_registerComplexSpecialProp(\"backgroundSize\", { defaultValue: \"0 0\", formatter: _parsePosition });\n\t\t_registerComplexSpecialProp(\"perspective\", { defaultValue: \"0px\", prefix: true });\n\t\t_registerComplexSpecialProp(\"perspectiveOrigin\", { defaultValue: \"50% 50%\", prefix: true });\n\t\t_registerComplexSpecialProp(\"transformStyle\", { prefix: true });\n\t\t_registerComplexSpecialProp(\"backfaceVisibility\", { prefix: true });\n\t\t_registerComplexSpecialProp(\"userSelect\", { prefix: true });\n\t\t_registerComplexSpecialProp(\"margin\", { parser: _getEdgeParser(\"marginTop,marginRight,marginBottom,marginLeft\") });\n\t\t_registerComplexSpecialProp(\"padding\", { parser: _getEdgeParser(\"paddingTop,paddingRight,paddingBottom,paddingLeft\") });\n\t\t_registerComplexSpecialProp(\"clip\", { defaultValue: \"rect(0px,0px,0px,0px)\", parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\tvar b, cs, delim;\n\t\t\t\tif (_ieVers < 9) {\n\t\t\t\t\t//IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\n\t\t\t\t\tcs = t.currentStyle;\n\t\t\t\t\tdelim = _ieVers < 8 ? \" \" : \",\";\n\t\t\t\t\tb = \"rect(\" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + \")\";\n\t\t\t\t\te = this.format(e).split(\",\").join(delim);\n\t\t\t\t} else {\n\t\t\t\t\tb = this.format(_getStyle(t, this.p, _cs, false, this.dflt));\n\t\t\t\t\te = this.format(e);\n\t\t\t\t}\n\t\t\t\treturn this.parseComplex(t.style, b, e, pt, plugin);\n\t\t\t} });\n\t\t_registerComplexSpecialProp(\"textShadow\", { defaultValue: \"0px 0px 0px #999\", color: true, multi: true });\n\t\t_registerComplexSpecialProp(\"autoRound,strictUnits\", { parser: function parser(t, e, p, cssp, pt) {\n\t\t\t\treturn pt;\n\t\t\t} }); //just so that we can ignore these properties (not tween them)\n\t\t_registerComplexSpecialProp(\"border\", { defaultValue: \"0px solid #000\", parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\treturn this.parseComplex(t.style, this.format(_getStyle(t, \"borderTopWidth\", _cs, false, \"0px\") + \" \" + _getStyle(t, \"borderTopStyle\", _cs, false, \"solid\") + \" \" + _getStyle(t, \"borderTopColor\", _cs, false, \"#000\")), this.format(e), pt, plugin);\n\t\t\t}, color: true, formatter: function formatter(v) {\n\t\t\t\tvar a = v.split(\" \");\n\t\t\t\treturn a[0] + \" \" + (a[1] || \"solid\") + \" \" + (v.match(_colorExp) || [\"#000\"])[0];\n\t\t\t} });\n\t\t_registerComplexSpecialProp(\"borderWidth\", { parser: _getEdgeParser(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\") }); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n\t\t_registerComplexSpecialProp(\"float,cssFloat,styleFloat\", { parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\tvar s = t.style,\n\t\t\t\t    prop = \"cssFloat\" in s ? \"cssFloat\" : \"styleFloat\";\n\t\t\t\treturn new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);\n\t\t\t} });\n\n\t\t//opacity-related\n\t\tvar _setIEOpacityRatio = function _setIEOpacityRatio(v) {\n\t\t\tvar t = this.t,\n\t\t\t    //refers to the element's style property\n\t\t\tfilters = t.filter || _getStyle(this.data, \"filter\") || \"\",\n\t\t\t    val = this.s + this.c * v | 0,\n\t\t\t    skip;\n\t\t\tif (val === 100) {\n\t\t\t\t//for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\n\t\t\t\tif (filters.indexOf(\"atrix(\") === -1 && filters.indexOf(\"radient(\") === -1 && filters.indexOf(\"oader(\") === -1) {\n\t\t\t\t\tt.removeAttribute(\"filter\");\n\t\t\t\t\tskip = !_getStyle(this.data, \"filter\"); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n\t\t\t\t} else {\n\t\t\t\t\tt.filter = filters.replace(_alphaFilterExp, \"\");\n\t\t\t\t\tskip = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!skip) {\n\t\t\t\tif (this.xn1) {\n\t\t\t\t\tt.filter = filters = filters || \"alpha(opacity=\" + val + \")\"; //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n\t\t\t\t}\n\t\t\t\tif (filters.indexOf(\"pacity\") === -1) {\n\t\t\t\t\t//only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\n\t\t\t\t\tif (val !== 0 || !this.xn1) {\n\t\t\t\t\t\t//bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\n\t\t\t\t\t\tt.filter = filters + \" alpha(opacity=\" + val + \")\"; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tt.filter = filters.replace(_opacityExp, \"opacity=\" + val);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"opacity,alpha,autoAlpha\", { defaultValue: \"1\", parser: function parser(t, e, p, cssp, pt, plugin) {\n\t\t\t\tvar b = parseFloat(_getStyle(t, \"opacity\", _cs, false, \"1\")),\n\t\t\t\t    style = t.style,\n\t\t\t\t    isAutoAlpha = p === \"autoAlpha\";\n\t\t\t\tif (typeof e === \"string\" && e.charAt(1) === \"=\") {\n\t\t\t\t\te = (e.charAt(0) === \"-\" ? -1 : 1) * parseFloat(e.substr(2)) + b;\n\t\t\t\t}\n\t\t\t\tif (isAutoAlpha && b === 1 && _getStyle(t, \"visibility\", _cs) === \"hidden\" && e !== 0) {\n\t\t\t\t\t//if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n\t\t\t\t\tb = 0;\n\t\t\t\t}\n\t\t\t\tif (_supportsOpacity) {\n\t\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b, e - b, pt);\n\t\t\t\t} else {\n\t\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b * 100, (e - b) * 100, pt);\n\t\t\t\t\tpt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\n\t\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\t\tpt.type = 2;\n\t\t\t\t\tpt.b = \"alpha(opacity=\" + pt.s + \")\";\n\t\t\t\t\tpt.e = \"alpha(opacity=\" + (pt.s + pt.c) + \")\";\n\t\t\t\t\tpt.data = t;\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tpt.setRatio = _setIEOpacityRatio;\n\t\t\t\t}\n\t\t\t\tif (isAutoAlpha) {\n\t\t\t\t\t//we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\n\t\t\t\t\tpt = new CSSPropTween(style, \"visibility\", 0, 0, pt, -1, null, false, 0, b !== 0 ? \"inherit\" : \"hidden\", e === 0 ? \"hidden\" : \"inherit\");\n\t\t\t\t\tpt.xs0 = \"inherit\";\n\t\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\t\tcssp._overwriteProps.push(p);\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t} });\n\n\t\tvar _removeProp = function _removeProp(s, p) {\n\t\t\tif (p) {\n\t\t\t\tif (s.removeProperty) {\n\t\t\t\t\tif (p.substr(0, 2) === \"ms\" || p.substr(0, 6) === \"webkit\") {\n\t\t\t\t\t\t//Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n\t\t\t\t\t\tp = \"-\" + p;\n\t\t\t\t\t}\n\t\t\t\t\ts.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t} else {\n\t\t\t\t\t//note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n\t\t\t\t\ts.removeAttribute(p);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t    _setClassNameRatio = function _setClassNameRatio(v) {\n\t\t\tthis.t._gsClassPT = this;\n\t\t\tif (v === 1 || v === 0) {\n\t\t\t\tthis.t.setAttribute(\"class\", v === 0 ? this.b : this.e);\n\t\t\t\tvar mpt = this.data,\n\t\t\t\t    //first MiniPropTween\n\t\t\t\ts = this.t.style;\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tif (!mpt.v) {\n\t\t\t\t\t\t_removeProp(s, mpt.p);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts[mpt.p] = mpt.v;\n\t\t\t\t\t}\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tif (v === 1 && this.t._gsClassPT === this) {\n\t\t\t\t\tthis.t._gsClassPT = null;\n\t\t\t\t}\n\t\t\t} else if (this.t.getAttribute(\"class\") !== this.e) {\n\t\t\t\tthis.t.setAttribute(\"class\", this.e);\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"className\", { parser: function parser(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tvar b = t.getAttribute(\"class\") || \"\",\n\t\t\t\t    //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\n\t\t\t\tcssText = t.style.cssText,\n\t\t\t\t    difData,\n\t\t\t\t    bs,\n\t\t\t\t    cnpt,\n\t\t\t\t    cnptLookup,\n\t\t\t\t    mpt;\n\t\t\t\tpt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\t\tpt.setRatio = _setClassNameRatio;\n\t\t\t\tpt.pr = -11;\n\t\t\t\t_hasPriority = true;\n\t\t\t\tpt.b = b;\n\t\t\t\tbs = _getAllStyles(t, _cs);\n\t\t\t\t//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\n\t\t\t\tcnpt = t._gsClassPT;\n\t\t\t\tif (cnpt) {\n\t\t\t\t\tcnptLookup = {};\n\t\t\t\t\tmpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tcnptLookup[mpt.p] = 1;\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t\tcnpt.setRatio(1);\n\t\t\t\t}\n\t\t\t\tt._gsClassPT = pt;\n\t\t\t\tpt.e = e.charAt(1) !== \"=\" ? e : b.replace(new RegExp(\"\\\\s*\\\\b\" + e.substr(2) + \"\\\\b\"), \"\") + (e.charAt(0) === \"+\" ? \" \" + e.substr(2) : \"\");\n\t\t\t\tt.setAttribute(\"class\", pt.e);\n\t\t\t\tdifData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);\n\t\t\t\tt.setAttribute(\"class\", b);\n\t\t\t\tpt.data = difData.firstMPT;\n\t\t\t\tt.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n\t\t\t\tpt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\n\t\t\t\treturn pt;\n\t\t\t} });\n\n\t\tvar _setClearPropsRatio = function _setClearPropsRatio(v) {\n\t\t\tif (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== \"isFromStart\") {\n\t\t\t\t//this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\n\t\t\t\tvar s = this.t.style,\n\t\t\t\t    transformParse = _specialProps.transform.parse,\n\t\t\t\t    a,\n\t\t\t\t    p,\n\t\t\t\t    i,\n\t\t\t\t    clearTransform,\n\t\t\t\t    transform;\n\t\t\t\tif (this.e === \"all\") {\n\t\t\t\t\ts.cssText = \"\";\n\t\t\t\t\tclearTransform = true;\n\t\t\t\t} else {\n\t\t\t\t\ta = this.e.split(\" \").join(\"\").split(\",\");\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = a[i];\n\t\t\t\t\t\tif (_specialProps[p]) {\n\t\t\t\t\t\t\tif (_specialProps[p].parse === transformParse) {\n\t\t\t\t\t\t\t\tclearTransform = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tp = p === \"transformOrigin\" ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeProp(s, p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (clearTransform) {\n\t\t\t\t\t_removeProp(s, _transformProp);\n\t\t\t\t\ttransform = this.t._gsTransform;\n\t\t\t\t\tif (transform) {\n\t\t\t\t\t\tif (transform.svg) {\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"data-svg-origin\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this.t._gsTransform;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"clearProps\", { parser: function parser(t, e, p, cssp, pt) {\n\t\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\t\tpt.setRatio = _setClearPropsRatio;\n\t\t\t\tpt.e = e;\n\t\t\t\tpt.pr = -10;\n\t\t\t\tpt.data = cssp._tween;\n\t\t\t\t_hasPriority = true;\n\t\t\t\treturn pt;\n\t\t\t} });\n\n\t\tp = \"bezier,throwProps,physicsProps,physics2D\".split(\",\");\n\t\ti = p.length;\n\t\twhile (i--) {\n\t\t\t_registerPluginProp(p[i]);\n\t\t}\n\n\t\tp = CSSPlugin.prototype;\n\t\tp._firstPT = p._lastParsedTransform = p._transform = null;\n\n\t\t//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\n\t\tp._onInitTween = function (target, vars, tween) {\n\t\t\tif (!target.nodeType) {\n\t\t\t\t//css is only for dom elements\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._target = target;\n\t\t\tthis._tween = tween;\n\t\t\tthis._vars = vars;\n\t\t\t_autoRound = vars.autoRound;\n\t\t\t_hasPriority = false;\n\t\t\t_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;\n\t\t\t_cs = _getComputedStyle(target, \"\");\n\t\t\t_overwriteProps = this._overwriteProps;\n\t\t\tvar style = target.style,\n\t\t\t    v,\n\t\t\t    pt,\n\t\t\t    pt2,\n\t\t\t    first,\n\t\t\t    last,\n\t\t\t    next,\n\t\t\t    zIndex,\n\t\t\t    tpt,\n\t\t\t    threeD;\n\t\t\tif (_reqSafariFix) if (style.zIndex === \"\") {\n\t\t\t\tv = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\tif (v === \"auto\" || v === \"\") {\n\t\t\t\t\t//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\n\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof vars === \"string\") {\n\t\t\t\tfirst = style.cssText;\n\t\t\t\tv = _getAllStyles(target, _cs);\n\t\t\t\tstyle.cssText = first + \";\" + vars;\n\t\t\t\tv = _cssDif(target, v, _getAllStyles(target)).difs;\n\t\t\t\tif (!_supportsOpacity && _opacityValExp.test(vars)) {\n\t\t\t\t\tv.opacity = parseFloat(RegExp.$1);\n\t\t\t\t}\n\t\t\t\tvars = v;\n\t\t\t\tstyle.cssText = first;\n\t\t\t}\n\n\t\t\tif (vars.className) {\n\t\t\t\t//className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\n\t\t\t\tthis._firstPT = pt = _specialProps.className.parse(target, vars.className, \"className\", this, null, null, vars);\n\t\t\t} else {\n\t\t\t\tthis._firstPT = pt = this.parse(target, vars, null);\n\t\t\t}\n\n\t\t\tif (this._transformType) {\n\t\t\t\tthreeD = this._transformType === 3;\n\t\t\t\tif (!_transformProp) {\n\t\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\t} else if (_isSafari) {\n\t\t\t\t\t_reqSafariFix = true;\n\t\t\t\t\t//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\n\t\t\t\t\tif (style.zIndex === \"\") {\n\t\t\t\t\t\tzIndex = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\t\t\tif (zIndex === \"auto\" || zIndex === \"\") {\n\t\t\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//Setting WebkitBackfaceVisibility corrects 3 bugs:\n\t\t\t\t\t// 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n\t\t\t\t\t// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n\t\t\t\t\t// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n\t\t\t\t\t//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\n\t\t\t\t\tif (_isSafariLT6) {\n\t\t\t\t\t\tthis._addLazySet(style, \"WebkitBackfaceVisibility\", this._vars.WebkitBackfaceVisibility || (threeD ? \"visible\" : \"hidden\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt2 = pt;\n\t\t\t\twhile (pt2 && pt2._next) {\n\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t}\n\t\t\t\ttpt = new CSSPropTween(target, \"transform\", 0, 0, null, 2);\n\t\t\t\tthis._linkCSSP(tpt, null, pt2);\n\t\t\t\ttpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;\n\t\t\t\ttpt.data = this._transform || _getTransform(target, _cs, true);\n\t\t\t\ttpt.tween = tween;\n\t\t\t\ttpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n\t\t\t\t_overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n\t\t\t}\n\n\t\t\tif (_hasPriority) {\n\t\t\t\t//reorders the linked list in order of pr (priority)\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev = pt2 ? pt2._prev : last) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next = pt2) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tthis._firstPT = first;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tp.parse = function (target, vars, pt, plugin) {\n\t\t\tvar style = target.style,\n\t\t\t    p,\n\t\t\t    sp,\n\t\t\t    bn,\n\t\t\t    en,\n\t\t\t    bs,\n\t\t\t    es,\n\t\t\t    bsfx,\n\t\t\t    esfx,\n\t\t\t    isStr,\n\t\t\t    rel;\n\t\t\tfor (p in vars) {\n\t\t\t\tes = vars[p]; //ending value string\n\t\t\t\tsp = _specialProps[p]; //SpecialProp lookup.\n\t\t\t\tif (sp) {\n\t\t\t\t\tpt = sp.parse(target, es, p, this, pt, plugin, vars);\n\t\t\t\t} else {\n\t\t\t\t\tbs = _getStyle(target, p, _cs) + \"\";\n\t\t\t\t\tisStr = typeof es === \"string\";\n\t\t\t\t\tif (p === \"color\" || p === \"fill\" || p === \"stroke\" || p.indexOf(\"Color\") !== -1 || isStr && _rgbhslExp.test(es)) {\n\t\t\t\t\t\t//Opera uses background: to define color sometimes in addition to backgroundColor:\n\t\t\t\t\t\tif (!isStr) {\n\t\t\t\t\t\t\tes = _parseColor(es);\n\t\t\t\t\t\t\tes = (es.length > 3 ? \"rgba(\" : \"rgb(\") + es.join(\",\") + \")\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, \"transparent\", pt, 0, plugin);\n\t\t\t\t\t} else if (isStr && (es.indexOf(\" \") !== -1 || es.indexOf(\",\") !== -1)) {\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbn = parseFloat(bs);\n\t\t\t\t\t\tbsfx = bn || bn === 0 ? bs.substr((bn + \"\").length) : \"\"; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\n\n\t\t\t\t\t\tif (bs === \"\" || bs === \"auto\") {\n\t\t\t\t\t\t\tif (p === \"width\" || p === \"height\") {\n\t\t\t\t\t\t\t\tbn = _getDimension(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else if (p === \"left\" || p === \"top\") {\n\t\t\t\t\t\t\t\tbn = _calculateOffset(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbn = p !== \"opacity\" ? 0 : 1;\n\t\t\t\t\t\t\t\tbsfx = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trel = isStr && es.charAt(1) === \"=\";\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten = parseInt(es.charAt(0) + \"1\", 10);\n\t\t\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\t\t\tesfx = es.replace(_suffixExp, \"\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\t\t\tesfx = isStr ? es.replace(_suffixExp, \"\") : \"\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\t\t\tesfx = p in _suffixMap ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tes = en || en === 0 ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n\n\t\t\t\t\t\t//if the beginning/ending suffixes don't match, normalize them...\n\t\t\t\t\t\tif (bsfx !== esfx) if (esfx !== \"\") if (en || en === 0) if (bn) {\n\t\t\t\t\t\t\t//note: if the beginning value (bn) is 0, we don't need to convert units!\n\t\t\t\t\t\t\tbn = _convertToPixels(target, p, bn, bsfx);\n\t\t\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 100, \"%\") / 100;\n\t\t\t\t\t\t\t\tif (vars.strictUnits !== true) {\n\t\t\t\t\t\t\t\t\t//some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\n\t\t\t\t\t\t\t\t\tbs = bn + \"%\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (esfx === \"em\" || esfx === \"rem\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 1, esfx);\n\n\t\t\t\t\t\t\t\t//otherwise convert to pixels.\n\t\t\t\t\t\t\t} else if (esfx !== \"px\") {\n\t\t\t\t\t\t\t\ten = _convertToPixels(target, p, en, esfx);\n\t\t\t\t\t\t\t\tesfx = \"px\"; //we don't use bsfx after this, so we don't need to set it to px too.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rel) if (en || en === 0) {\n\t\t\t\t\t\t\t\tes = en + bn + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten += bn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((bn || bn === 0) && (en || en === 0)) {\n\t\t\t\t\t\t\t//faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, _autoRound !== false && (esfx === \"px\" || p === \"zIndex\"), 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = esfx;\n\t\t\t\t\t\t\t//DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n\t\t\t\t\t\t} else if (style[p] === undefined || !es && (es + \"\" === \"NaN\" || es == null)) {\n\t\t\t\t\t\t\t_log(\"invalid \" + p + \" tween value: \" + vars[p]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = es === \"none\" && (p === \"display\" || p.indexOf(\"Style\") !== -1) ? bs : es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n\t\t\t\t\t\t\t//DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (plugin) if (pt && !pt.plugin) {\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\t\t//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\n\t\tp.setRatio = function (v) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t    min = 0.000001,\n\t\t\t    val,\n\t\t\t    str,\n\t\t\t    i;\n\t\t\t//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\n\t\t\tif (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tif (pt.r && pt.type !== -1) {\n\t\t\t\t\t\t\tval = Math.round(pt.s + pt.c);\n\t\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\t\t\t//complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\t\tstr += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = pt.c * v + pt.s;\n\t\t\t\t\tif (pt.r) {\n\t\t\t\t\t\tval = Math.round(val);\n\t\t\t\t\t} else if (val < min) if (val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\t//complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\tif (i === 2) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;\n\t\t\t\t\t\t} else if (i === 3) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;\n\t\t\t\t\t\t} else if (i === 4) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;\n\t\t\t\t\t\t} else if (i === 5) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\" + i] + pt[\"xs\" + (i + 1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (pt.type === -1) {\n\t\t\t\t\t\t//non-tweening value\n\t\t\t\t\t\tpt.t[pt.p] = pt.xs0;\n\t\t\t\t\t} else if (pt.setRatio) {\n\t\t\t\t\t\t//custom setRatio() for things like SpecialProps, external plugins, etc.\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t\t//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n\t\t\t} else {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tpt.t[pt.p] = pt.b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n   * @private\n   * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\n   * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\n   * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\n   * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\n   * doesn't have any transform-related properties of its own. You can call this method as many times as you\n   * want and it won't create duplicate CSSPropTweens.\n   *\n   * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\n   */\n\t\tp._enableTransforms = function (threeD) {\n\t\t\tthis._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.\n\t\t\tthis._transformType = !(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3) ? 3 : 2;\n\t\t};\n\n\t\tvar lazySet = function lazySet(v) {\n\t\t\tthis.t[this.p] = this.e;\n\t\t\tthis.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n\t\t};\n\t\t/** @private Gives us a way to set a value on the first render (and only the first render). **/\n\t\tp._addLazySet = function (t, p, v) {\n\t\t\tvar pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);\n\t\t\tpt.e = v;\n\t\t\tpt.setRatio = lazySet;\n\t\t\tpt.data = this;\n\t\t};\n\n\t\t/** @private **/\n\t\tp._linkCSSP = function (pt, next, prev, remove) {\n\t\t\tif (pt) {\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = pt;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t}\n\t\t\t\tif (pt._prev) {\n\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\tremove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n\t\t\t\t}\n\t\t\t\tif (prev) {\n\t\t\t\t\tprev._next = pt;\n\t\t\t\t} else if (!remove && this._firstPT === null) {\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t}\n\t\t\t\tpt._next = next;\n\t\t\t\tpt._prev = prev;\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\t\t//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\n\t\tp._kill = function (lookup) {\n\t\t\tvar copy = lookup,\n\t\t\t    pt,\n\t\t\t    p,\n\t\t\t    xfirst;\n\t\t\tif (lookup.autoAlpha || lookup.alpha) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in lookup) {\n\t\t\t\t\t//copy the lookup so that we're not changing the original which may be passed elsewhere.\n\t\t\t\t\tcopy[p] = lookup[p];\n\t\t\t\t}\n\t\t\t\tcopy.opacity = 1;\n\t\t\t\tif (copy.autoAlpha) {\n\t\t\t\t\tcopy.visibility = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lookup.className && (pt = this._classNamePT)) {\n\t\t\t\t//for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\n\t\t\t\txfirst = pt.xfirst;\n\t\t\t\tif (xfirst && xfirst._prev) {\n\t\t\t\t\tthis._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev\n\t\t\t\t} else if (xfirst === this._firstPT) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tthis._linkCSSP(pt._next, pt._next._next, xfirst._prev);\n\t\t\t\t}\n\t\t\t\tthis._classNamePT = null;\n\t\t\t}\n\t\t\treturn TweenPlugin.prototype._kill.call(this, copy);\n\t\t};\n\n\t\t//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\n\t\tvar _getChildStyles = function _getChildStyles(e, props, targets) {\n\t\t\tvar children, i, child, type;\n\t\t\tif (e.slice) {\n\t\t\t\ti = e.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t_getChildStyles(e[i], props, targets);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchildren = e.childNodes;\n\t\t\ti = children.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tchild = children[i];\n\t\t\t\ttype = child.type;\n\t\t\t\tif (child.style) {\n\t\t\t\t\tprops.push(_getAllStyles(child));\n\t\t\t\t\tif (targets) {\n\t\t\t\t\t\ttargets.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {\n\t\t\t\t\t_getChildStyles(child, props, targets);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n   * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\n   * and then compares the style properties of all the target's child elements at the tween's start and end, and\n   * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\n   * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\n   * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\n   * is because it creates entirely new tweens that may have completely different targets than the original tween,\n   * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\n   * and it would create other problems. For example:\n   *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\n   *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\n   *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\n   *\n   * @param {Object} target object to be tweened\n   * @param {number} Duration in seconds (or frames for frames-based tweens)\n   * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\n   * @return {Array} An array of TweenLite instances\n   */\n\t\tCSSPlugin.cascadeTo = function (target, duration, vars) {\n\t\t\tvar tween = TweenLite.to(target, duration, vars),\n\t\t\t    results = [tween],\n\t\t\t    b = [],\n\t\t\t    e = [],\n\t\t\t    targets = [],\n\t\t\t    _reservedProps = TweenLite._internals.reservedProps,\n\t\t\t    i,\n\t\t\t    difs,\n\t\t\t    p,\n\t\t\t    from;\n\t\t\ttarget = tween._targets || tween.target;\n\t\t\t_getChildStyles(target, b, targets);\n\t\t\ttween.render(duration, true, true);\n\t\t\t_getChildStyles(target, e);\n\t\t\ttween.render(0, true, true);\n\t\t\ttween._enabled(true);\n\t\t\ti = targets.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tdifs = _cssDif(targets[i], b[i], e[i]);\n\t\t\t\tif (difs.firstMPT) {\n\t\t\t\t\tdifs = difs.difs;\n\t\t\t\t\tfor (p in vars) {\n\t\t\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfrom = {};\n\t\t\t\t\tfor (p in difs) {\n\t\t\t\t\t\tfrom[p] = b[i][p];\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(TweenLite.fromTo(targets[i], duration, from, difs));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tTweenPlugin.activate([CSSPlugin]);\n\t\treturn CSSPlugin;\n\t}, true);\n\n\t/*\n  * ----------------------------------------------------------------\n  * RoundPropsPlugin\n  * ----------------------------------------------------------------\n  */\n\t(function () {\n\n\t\tvar RoundPropsPlugin = _gsScope._gsDefine.plugin({\n\t\t\tpropName: \"roundProps\",\n\t\t\tversion: \"1.5\",\n\t\t\tpriority: -1,\n\t\t\tAPI: 2,\n\n\t\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\tinit: function init(target, value, tween) {\n\t\t\t\tthis._tween = tween;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t}),\n\t\t    _roundLinkedList = function _roundLinkedList(node) {\n\t\t\twhile (node) {\n\t\t\t\tif (!node.f && !node.blob) {\n\t\t\t\t\tnode.r = 1;\n\t\t\t\t}\n\t\t\t\tnode = node._next;\n\t\t\t}\n\t\t},\n\t\t    p = RoundPropsPlugin.prototype;\n\n\t\tp._onInitAllProps = function () {\n\t\t\tvar tween = this._tween,\n\t\t\t    rp = tween.vars.roundProps.join ? tween.vars.roundProps : tween.vars.roundProps.split(\",\"),\n\t\t\t    i = rp.length,\n\t\t\t    lookup = {},\n\t\t\t    rpt = tween._propLookup.roundProps,\n\t\t\t    prop,\n\t\t\t    pt,\n\t\t\t    next;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlookup[rp[i]] = 1;\n\t\t\t}\n\t\t\ti = rp.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tprop = rp[i];\n\t\t\t\tpt = tween._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next; //record here, because it may get removed\n\t\t\t\t\tif (pt.pg) {\n\t\t\t\t\t\tpt.t._roundProps(lookup, true);\n\t\t\t\t\t} else if (pt.n === prop) {\n\t\t\t\t\t\tif (pt.f === 2 && pt.t) {\n\t\t\t\t\t\t\t//a blob (text containing multiple numeric values)\n\t\t\t\t\t\t\t_roundLinkedList(pt.t._firstPT);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._add(pt.t, prop, pt.s, pt.c);\n\t\t\t\t\t\t\t//remove from linked list\n\t\t\t\t\t\t\tif (next) {\n\t\t\t\t\t\t\t\tnext._prev = pt._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\tpt._prev._next = next;\n\t\t\t\t\t\t\t} else if (tween._firstPT === pt) {\n\t\t\t\t\t\t\t\ttween._firstPT = next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\ttween._propLookup[prop] = rpt;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._add = function (target, p, s, c) {\n\t\t\tthis._addTween(target, p, s, s + c, p, true);\n\t\t\tthis._overwriteProps.push(p);\n\t\t};\n\t})();\n\n\t/*\n  * ----------------------------------------------------------------\n  * AttrPlugin\n  * ----------------------------------------------------------------\n  */\n\n\t(function () {\n\n\t\t_gsScope._gsDefine.plugin({\n\t\t\tpropName: \"attr\",\n\t\t\tAPI: 2,\n\t\t\tversion: \"0.5.0\",\n\n\t\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\t\tinit: function init(target, value, tween) {\n\t\t\t\tvar p;\n\t\t\t\tif (typeof target.setAttribute !== \"function\") {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (p in value) {\n\t\t\t\t\tthis._addTween(target, \"setAttribute\", target.getAttribute(p) + \"\", value[p] + \"\", p, false, p);\n\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\t})();\n\n\t/*\n  * ----------------------------------------------------------------\n  * DirectionalRotationPlugin\n  * ----------------------------------------------------------------\n  */\n\t_gsScope._gsDefine.plugin({\n\t\tpropName: \"directionalRotation\",\n\t\tversion: \"0.2.1\",\n\t\tAPI: 2,\n\n\t\t//called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.\n\t\tinit: function init(target, value, tween) {\n\t\t\tif ((typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") {\n\t\t\t\tvalue = { rotation: value };\n\t\t\t}\n\t\t\tthis.finals = {};\n\t\t\tvar cap = value.useRadians === true ? Math.PI * 2 : 360,\n\t\t\t    min = 0.000001,\n\t\t\t    p,\n\t\t\t    v,\n\t\t\t    start,\n\t\t\t    end,\n\t\t\t    dif,\n\t\t\t    split;\n\t\t\tfor (p in value) {\n\t\t\t\tif (p !== \"useRadians\") {\n\t\t\t\t\tsplit = (value[p] + \"\").split(\"_\");\n\t\t\t\t\tv = split[0];\n\t\t\t\t\tstart = parseFloat(typeof target[p] !== \"function\" ? target[p] : target[p.indexOf(\"set\") || typeof target[\"get\" + p.substr(3)] !== \"function\" ? p : \"get\" + p.substr(3)]());\n\t\t\t\t\tend = this.finals[p] = typeof v === \"string\" && v.charAt(1) === \"=\" ? start + parseInt(v.charAt(0) + \"1\", 10) * Number(v.substr(2)) : Number(v) || 0;\n\t\t\t\t\tdif = end - start;\n\t\t\t\t\tif (split.length) {\n\t\t\t\t\t\tv = split.join(\"_\");\n\t\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\t\tdif = dif < 0 ? dif + cap : dif - cap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\t\tdif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap;\n\t\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\t\tdif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (dif > min || dif < -min) {\n\t\t\t\t\t\tthis._addTween(target, p, start, start + dif, p);\n\t\t\t\t\t\tthis._overwriteProps.push(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t//called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)\n\t\tset: function set(ratio) {\n\t\t\tvar pt;\n\t\t\tif (ratio !== 1) {\n\t\t\t\tthis._super.setRatio.call(this, ratio);\n\t\t\t} else {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\tpt.t[pt.p](this.finals[pt.p]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p] = this.finals[pt.p];\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t})._autoCSS = true;\n\n\t/*\n  * ----------------------------------------------------------------\n  * EasePack\n  * ----------------------------------------------------------------\n  */\n\t_gsScope._gsDefine(\"easing.Back\", [\"easing.Ease\"], function (Ease) {\n\n\t\tvar w = _gsScope.GreenSockGlobals || _gsScope,\n\t\t    gs = w.com.greensock,\n\t\t    _2PI = Math.PI * 2,\n\t\t    _HALF_PI = Math.PI / 2,\n\t\t    _class = gs._class,\n\t\t    _create = function _create(n, f) {\n\t\t\tvar C = _class(\"easing.\" + n, function () {}, true),\n\t\t\t    p = C.prototype = new Ease();\n\t\t\tp.constructor = C;\n\t\t\tp.getRatio = f;\n\t\t\treturn C;\n\t\t},\n\t\t    _easeReg = Ease.register || function () {},\n\t\t    //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.\n\t\t_wrap = function _wrap(name, EaseOut, EaseIn, EaseInOut, aliases) {\n\t\t\tvar C = _class(\"easing.\" + name, {\n\t\t\t\teaseOut: new EaseOut(),\n\t\t\t\teaseIn: new EaseIn(),\n\t\t\t\teaseInOut: new EaseInOut()\n\t\t\t}, true);\n\t\t\t_easeReg(C, name);\n\t\t\treturn C;\n\t\t},\n\t\t    EasePoint = function EasePoint(time, value, next) {\n\t\t\tthis.t = time;\n\t\t\tthis.v = value;\n\t\t\tif (next) {\n\t\t\t\tthis.next = next;\n\t\t\t\tnext.prev = this;\n\t\t\t\tthis.c = next.v - value;\n\t\t\t\tthis.gap = next.t - time;\n\t\t\t}\n\t\t},\n\n\n\t\t//Back\n\t\t_createBack = function _createBack(n, f) {\n\t\t\tvar C = _class(\"easing.\" + n, function (overshoot) {\n\t\t\t\tthis._p1 = overshoot || overshoot === 0 ? overshoot : 1.70158;\n\t\t\t\tthis._p2 = this._p1 * 1.525;\n\t\t\t}, true),\n\t\t\t    p = C.prototype = new Ease();\n\t\t\tp.constructor = C;\n\t\t\tp.getRatio = f;\n\t\t\tp.config = function (overshoot) {\n\t\t\t\treturn new C(overshoot);\n\t\t\t};\n\t\t\treturn C;\n\t\t},\n\t\t    Back = _wrap(\"Back\", _createBack(\"BackOut\", function (p) {\n\t\t\treturn (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1;\n\t\t}), _createBack(\"BackIn\", function (p) {\n\t\t\treturn p * p * ((this._p1 + 1) * p - this._p1);\n\t\t}), _createBack(\"BackInOut\", function (p) {\n\t\t\treturn (p *= 2) < 1 ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);\n\t\t})),\n\n\n\t\t//SlowMo\n\t\tSlowMo = _class(\"easing.SlowMo\", function (linearRatio, power, yoyoMode) {\n\t\t\tpower = power || power === 0 ? power : 0.7;\n\t\t\tif (linearRatio == null) {\n\t\t\t\tlinearRatio = 0.7;\n\t\t\t} else if (linearRatio > 1) {\n\t\t\t\tlinearRatio = 1;\n\t\t\t}\n\t\t\tthis._p = linearRatio !== 1 ? power : 0;\n\t\t\tthis._p1 = (1 - linearRatio) / 2;\n\t\t\tthis._p2 = linearRatio;\n\t\t\tthis._p3 = this._p1 + this._p2;\n\t\t\tthis._calcEnd = yoyoMode === true;\n\t\t}, true),\n\t\t    p = SlowMo.prototype = new Ease(),\n\t\t    SteppedEase,\n\t\t    RoughEase,\n\t\t    _createElastic;\n\n\t\tp.constructor = SlowMo;\n\t\tp.getRatio = function (p) {\n\t\t\tvar r = p + (0.5 - p) * this._p;\n\t\t\tif (p < this._p1) {\n\t\t\t\treturn this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r;\n\t\t\t} else if (p > this._p3) {\n\t\t\t\treturn this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p;\n\t\t\t}\n\t\t\treturn this._calcEnd ? 1 : r;\n\t\t};\n\t\tSlowMo.ease = new SlowMo(0.7, 0.7);\n\n\t\tp.config = SlowMo.config = function (linearRatio, power, yoyoMode) {\n\t\t\treturn new SlowMo(linearRatio, power, yoyoMode);\n\t\t};\n\n\t\t//SteppedEase\n\t\tSteppedEase = _class(\"easing.SteppedEase\", function (steps) {\n\t\t\tsteps = steps || 1;\n\t\t\tthis._p1 = 1 / steps;\n\t\t\tthis._p2 = steps + 1;\n\t\t}, true);\n\t\tp = SteppedEase.prototype = new Ease();\n\t\tp.constructor = SteppedEase;\n\t\tp.getRatio = function (p) {\n\t\t\tif (p < 0) {\n\t\t\t\tp = 0;\n\t\t\t} else if (p >= 1) {\n\t\t\t\tp = 0.999999999;\n\t\t\t}\n\t\t\treturn (this._p2 * p >> 0) * this._p1;\n\t\t};\n\t\tp.config = SteppedEase.config = function (steps) {\n\t\t\treturn new SteppedEase(steps);\n\t\t};\n\n\t\t//RoughEase\n\t\tRoughEase = _class(\"easing.RoughEase\", function (vars) {\n\t\t\tvars = vars || {};\n\t\t\tvar taper = vars.taper || \"none\",\n\t\t\t    a = [],\n\t\t\t    cnt = 0,\n\t\t\t    points = (vars.points || 20) | 0,\n\t\t\t    i = points,\n\t\t\t    randomize = vars.randomize !== false,\n\t\t\t    clamp = vars.clamp === true,\n\t\t\t    template = vars.template instanceof Ease ? vars.template : null,\n\t\t\t    strength = typeof vars.strength === \"number\" ? vars.strength * 0.4 : 0.4,\n\t\t\t    x,\n\t\t\t    y,\n\t\t\t    bump,\n\t\t\t    invX,\n\t\t\t    obj,\n\t\t\t    pnt;\n\t\t\twhile (--i > -1) {\n\t\t\t\tx = randomize ? Math.random() : 1 / points * i;\n\t\t\t\ty = template ? template.getRatio(x) : x;\n\t\t\t\tif (taper === \"none\") {\n\t\t\t\t\tbump = strength;\n\t\t\t\t} else if (taper === \"out\") {\n\t\t\t\t\tinvX = 1 - x;\n\t\t\t\t\tbump = invX * invX * strength;\n\t\t\t\t} else if (taper === \"in\") {\n\t\t\t\t\tbump = x * x * strength;\n\t\t\t\t} else if (x < 0.5) {\n\t\t\t\t\t//\"both\" (start)\n\t\t\t\t\tinvX = x * 2;\n\t\t\t\t\tbump = invX * invX * 0.5 * strength;\n\t\t\t\t} else {\n\t\t\t\t\t//\"both\" (end)\n\t\t\t\t\tinvX = (1 - x) * 2;\n\t\t\t\t\tbump = invX * invX * 0.5 * strength;\n\t\t\t\t}\n\t\t\t\tif (randomize) {\n\t\t\t\t\ty += Math.random() * bump - bump * 0.5;\n\t\t\t\t} else if (i % 2) {\n\t\t\t\t\ty += bump * 0.5;\n\t\t\t\t} else {\n\t\t\t\t\ty -= bump * 0.5;\n\t\t\t\t}\n\t\t\t\tif (clamp) {\n\t\t\t\t\tif (y > 1) {\n\t\t\t\t\t\ty = 1;\n\t\t\t\t\t} else if (y < 0) {\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta[cnt++] = { x: x, y: y };\n\t\t\t}\n\t\t\ta.sort(function (a, b) {\n\t\t\t\treturn a.x - b.x;\n\t\t\t});\n\n\t\t\tpnt = new EasePoint(1, 1, null);\n\t\t\ti = points;\n\t\t\twhile (--i > -1) {\n\t\t\t\tobj = a[i];\n\t\t\t\tpnt = new EasePoint(obj.x, obj.y, pnt);\n\t\t\t}\n\n\t\t\tthis._prev = new EasePoint(0, 0, pnt.t !== 0 ? pnt : pnt.next);\n\t\t}, true);\n\t\tp = RoughEase.prototype = new Ease();\n\t\tp.constructor = RoughEase;\n\t\tp.getRatio = function (p) {\n\t\t\tvar pnt = this._prev;\n\t\t\tif (p > pnt.t) {\n\t\t\t\twhile (pnt.next && p >= pnt.t) {\n\t\t\t\t\tpnt = pnt.next;\n\t\t\t\t}\n\t\t\t\tpnt = pnt.prev;\n\t\t\t} else {\n\t\t\t\twhile (pnt.prev && p <= pnt.t) {\n\t\t\t\t\tpnt = pnt.prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._prev = pnt;\n\t\t\treturn pnt.v + (p - pnt.t) / pnt.gap * pnt.c;\n\t\t};\n\t\tp.config = function (vars) {\n\t\t\treturn new RoughEase(vars);\n\t\t};\n\t\tRoughEase.ease = new RoughEase();\n\n\t\t//Bounce\n\t\t_wrap(\"Bounce\", _create(\"BounceOut\", function (p) {\n\t\t\tif (p < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * p * p;\n\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n\t\t\t}\n\t\t\treturn 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n\t\t}), _create(\"BounceIn\", function (p) {\n\t\t\tif ((p = 1 - p) < 1 / 2.75) {\n\t\t\t\treturn 1 - 7.5625 * p * p;\n\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\treturn 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);\n\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\treturn 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);\n\t\t\t}\n\t\t\treturn 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);\n\t\t}), _create(\"BounceInOut\", function (p) {\n\t\t\tvar invert = p < 0.5;\n\t\t\tif (invert) {\n\t\t\t\tp = 1 - p * 2;\n\t\t\t} else {\n\t\t\t\tp = p * 2 - 1;\n\t\t\t}\n\t\t\tif (p < 1 / 2.75) {\n\t\t\t\tp = 7.5625 * p * p;\n\t\t\t} else if (p < 2 / 2.75) {\n\t\t\t\tp = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;\n\t\t\t} else if (p < 2.5 / 2.75) {\n\t\t\t\tp = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;\n\t\t\t} else {\n\t\t\t\tp = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;\n\t\t\t}\n\t\t\treturn invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;\n\t\t}));\n\n\t\t//CIRC\n\t\t_wrap(\"Circ\", _create(\"CircOut\", function (p) {\n\t\t\treturn Math.sqrt(1 - (p = p - 1) * p);\n\t\t}), _create(\"CircIn\", function (p) {\n\t\t\treturn -(Math.sqrt(1 - p * p) - 1);\n\t\t}), _create(\"CircInOut\", function (p) {\n\t\t\treturn (p *= 2) < 1 ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);\n\t\t}));\n\n\t\t//Elastic\n\t\t_createElastic = function _createElastic(n, f, def) {\n\t\t\tvar C = _class(\"easing.\" + n, function (amplitude, period) {\n\t\t\t\tthis._p1 = amplitude >= 1 ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n\t\t\t\tthis._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);\n\t\t\t\tthis._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);\n\t\t\t\tthis._p2 = _2PI / this._p2; //precalculate to optimize\n\t\t\t}, true),\n\t\t\t    p = C.prototype = new Ease();\n\t\t\tp.constructor = C;\n\t\t\tp.getRatio = f;\n\t\t\tp.config = function (amplitude, period) {\n\t\t\t\treturn new C(amplitude, period);\n\t\t\t};\n\t\t\treturn C;\n\t\t};\n\t\t_wrap(\"Elastic\", _createElastic(\"ElasticOut\", function (p) {\n\t\t\treturn this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;\n\t\t}, 0.3), _createElastic(\"ElasticIn\", function (p) {\n\t\t\treturn -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2));\n\t\t}, 0.3), _createElastic(\"ElasticInOut\", function (p) {\n\t\t\treturn (p *= 2) < 1 ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * 0.5 + 1;\n\t\t}, 0.45));\n\n\t\t//Expo\n\t\t_wrap(\"Expo\", _create(\"ExpoOut\", function (p) {\n\t\t\treturn 1 - Math.pow(2, -10 * p);\n\t\t}), _create(\"ExpoIn\", function (p) {\n\t\t\treturn Math.pow(2, 10 * (p - 1)) - 0.001;\n\t\t}), _create(\"ExpoInOut\", function (p) {\n\t\t\treturn (p *= 2) < 1 ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\t\t}));\n\n\t\t//Sine\n\t\t_wrap(\"Sine\", _create(\"SineOut\", function (p) {\n\t\t\treturn Math.sin(p * _HALF_PI);\n\t\t}), _create(\"SineIn\", function (p) {\n\t\t\treturn -Math.cos(p * _HALF_PI) + 1;\n\t\t}), _create(\"SineInOut\", function (p) {\n\t\t\treturn -0.5 * (Math.cos(Math.PI * p) - 1);\n\t\t}));\n\n\t\t_class(\"easing.EaseLookup\", {\n\t\t\tfind: function find(s) {\n\t\t\t\treturn Ease.map[s];\n\t\t\t}\n\t\t}, true);\n\n\t\t//register the non-standard eases\n\t\t_easeReg(w.SlowMo, \"SlowMo\", \"ease,\");\n\t\t_easeReg(RoughEase, \"RoughEase\", \"ease,\");\n\t\t_easeReg(SteppedEase, \"SteppedEase\", \"ease,\");\n\n\t\treturn Back;\n\t}, true);\n});\n\nif (_gsScope._gsDefine) {\n\t_gsScope._gsQueue.pop()();\n} //necessary in case TweenLite was already loaded separately.\n\n\n/*\n * ----------------------------------------------------------------\n * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.\n * ----------------------------------------------------------------\n */\n(function (window, moduleName) {\n\n\t\"use strict\";\n\n\tvar _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\tif (_globals.TweenLite) {\n\t\treturn; //in case the core set of classes is already loaded, don't instantiate twice.\n\t}\n\tvar _namespace = function _namespace(ns) {\n\t\tvar a = ns.split(\".\"),\n\t\t    p = _globals,\n\t\t    i;\n\t\tfor (i = 0; i < a.length; i++) {\n\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t}\n\t\treturn p;\n\t},\n\t    gs = _namespace(\"com.greensock\"),\n\t    _tinyNum = 0.0000000001,\n\t    _slice = function _slice(a) {\n\t\t//don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\tvar b = [],\n\t\t    l = a.length,\n\t\t    i;\n\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\treturn b;\n\t},\n\t    _emptyFunc = function _emptyFunc() {},\n\t    _isArray = function () {\n\t\t//works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\tvar toString = Object.prototype.toString,\n\t\t    array = toString.call([]);\n\t\treturn function (obj) {\n\t\t\treturn obj != null && (obj instanceof Array || (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\" && !!obj.push && toString.call(obj) === array);\n\t\t};\n\t}(),\n\t    a,\n\t    i,\n\t    p,\n\t    _ticker,\n\t    _tickerActive,\n\t    _defLookup = {},\n\n\n\t/**\n  * @constructor\n  * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n  * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n  * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n  * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n  *\n  * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n  * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n  * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n  * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n  * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n  * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n  * sandbox the banner one like:\n  *\n  * <script>\n  *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n  * </script>\n  * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n  * <script>\n  *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n  * </script>\n  * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n  * <script>\n  *     gs.TweenLite.to(...); //would use v1.7\n  *     TweenLite.to(...); //would use v1.6\n  * </script>\n  *\n  * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n  * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n  * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n  * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n  */\n\tDefinition = function Definition(ns, dependencies, func, global) {\n\t\tthis.sc = _defLookup[ns] ? _defLookup[ns].sc : []; //subclasses\n\t\t_defLookup[ns] = this;\n\t\tthis.gsClass = null;\n\t\tthis.func = func;\n\t\tvar _classes = [];\n\t\tthis.check = function (init) {\n\t\t\tvar i = dependencies.length,\n\t\t\t    missing = i,\n\t\t\t    cur,\n\t\t\t    a,\n\t\t\t    n,\n\t\t\t    cl,\n\t\t\t    hasModule;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\tmissing--;\n\t\t\t\t} else if (init) {\n\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (missing === 0 && func) {\n\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\tn = a.pop();\n\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t//exports to multiple environments\n\t\t\t\tif (global) {\n\t\t\t\t\t_globals[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\thasModule = typeof module !== \"undefined\" && module.exports;\n\t\t\t\t\tif (!hasModule && \"function\" === \"function\" && __webpack_require__(19)) {\n\t\t\t\t\t\t//AMD\n\t\t\t\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\t\t\t\t\treturn cl;\n\t\t\t\t\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t\t\t\t} else if (ns === moduleName && hasModule) {\n\t\t\t\t\t\t//node\n\t\t\t\t\t\tmodule.exports = cl;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.check(true);\n\t},\n\n\n\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t_gsDefine = window._gsDefine = function (ns, dependencies, func, global) {\n\t\treturn new Definition(ns, dependencies, func, global);\n\t},\n\n\n\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t_class = gs._class = function (ns, func, global) {\n\t\tfunc = func || function () {};\n\t\t_gsDefine(ns, [], function () {\n\t\t\treturn func;\n\t\t}, global);\n\t\treturn func;\n\t};\n\n\t_gsDefine.globals = _globals;\n\n\t/*\n  * ----------------------------------------------------------------\n  * Ease\n  * ----------------------------------------------------------------\n  */\n\tvar _baseParams = [0, 0, 1, 1],\n\t    _blankArray = [],\n\t    Ease = _class(\"easing.Ease\", function (func, extraParams, type, power) {\n\t\tthis._func = func;\n\t\tthis._type = type || 0;\n\t\tthis._power = power || 0;\n\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t}, true),\n\t    _easeMap = Ease.map = {},\n\t    _easeReg = Ease.register = function (ease, names, types, create) {\n\t\tvar na = names.split(\",\"),\n\t\t    i = na.length,\n\t\t    ta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t    e,\n\t\t    name,\n\t\t    j,\n\t\t    type;\n\t\twhile (--i > -1) {\n\t\t\tname = na[i];\n\t\t\te = create ? _class(\"easing.\" + name, null, true) : gs.easing[name] || {};\n\t\t\tj = ta.length;\n\t\t\twhile (--j > -1) {\n\t\t\t\ttype = ta[j];\n\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t}\n\t\t}\n\t};\n\n\tp = Ease.prototype;\n\tp._calcEnd = false;\n\tp.getRatio = function (p) {\n\t\tif (this._func) {\n\t\t\tthis._params[0] = p;\n\t\t\treturn this._func.apply(null, this._params);\n\t\t}\n\t\tvar t = this._type,\n\t\t    pw = this._power,\n\t\t    r = t === 1 ? 1 - p : t === 2 ? p : p < 0.5 ? p * 2 : (1 - p) * 2;\n\t\tif (pw === 1) {\n\t\t\tr *= r;\n\t\t} else if (pw === 2) {\n\t\t\tr *= r * r;\n\t\t} else if (pw === 3) {\n\t\t\tr *= r * r * r;\n\t\t} else if (pw === 4) {\n\t\t\tr *= r * r * r * r;\n\t\t}\n\t\treturn t === 1 ? 1 - r : t === 2 ? r : p < 0.5 ? r / 2 : 1 - r / 2;\n\t};\n\n\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\ta = [\"Linear\", \"Quad\", \"Cubic\", \"Quart\", \"Quint,Strong\"];\n\ti = a.length;\n\twhile (--i > -1) {\n\t\tp = a[i] + \",Power\" + i;\n\t\t_easeReg(new Ease(null, null, 1, i), p, \"easeOut\", true);\n\t\t_easeReg(new Ease(null, null, 2, i), p, \"easeIn\" + (i === 0 ? \",easeNone\" : \"\"));\n\t\t_easeReg(new Ease(null, null, 3, i), p, \"easeInOut\");\n\t}\n\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n\t/*\n  * ----------------------------------------------------------------\n  * EventDispatcher\n  * ----------------------------------------------------------------\n  */\n\tvar EventDispatcher = _class(\"events.EventDispatcher\", function (target) {\n\t\tthis._listeners = {};\n\t\tthis._eventTarget = target || this;\n\t});\n\tp = EventDispatcher.prototype;\n\n\tp.addEventListener = function (type, callback, scope, useParam, priority) {\n\t\tpriority = priority || 0;\n\t\tvar list = this._listeners[type],\n\t\t    index = 0,\n\t\t    listener,\n\t\t    i;\n\t\tif (list == null) {\n\t\t\tthis._listeners[type] = list = [];\n\t\t}\n\t\ti = list.length;\n\t\twhile (--i > -1) {\n\t\t\tlistener = list[i];\n\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\tlist.splice(i, 1);\n\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\tindex = i + 1;\n\t\t\t}\n\t\t}\n\t\tlist.splice(index, 0, { c: callback, s: scope, up: useParam, pr: priority });\n\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t_ticker.wake();\n\t\t}\n\t};\n\n\tp.removeEventListener = function (type, callback) {\n\t\tvar list = this._listeners[type],\n\t\t    i;\n\t\tif (list) {\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tp.dispatchEvent = function (type) {\n\t\tvar list = this._listeners[type],\n\t\t    i,\n\t\t    t,\n\t\t    listener;\n\t\tif (list) {\n\t\t\ti = list.length;\n\t\t\tt = this._eventTarget;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener) {\n\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\tlistener.c.call(listener.s || t, { type: type, target: t });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n  * ----------------------------------------------------------------\n  * Ticker\n  * ----------------------------------------------------------------\n  */\n\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t    _cancelAnimFrame = window.cancelAnimationFrame,\n\t    _getTime = Date.now || function () {\n\t\treturn new Date().getTime();\n\t},\n\t    _lastUpdate = _getTime();\n\n\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\ta = [\"ms\", \"moz\", \"webkit\", \"o\"];\n\ti = a.length;\n\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t}\n\n\t_class(\"Ticker\", function (fps, useRAF) {\n\t\tvar _self = this,\n\t\t    _startTime = _getTime(),\n\t\t    _useRAF = useRAF !== false && _reqAnimFrame,\n\t\t    _lagThreshold = 500,\n\t\t    _adjustedLag = 33,\n\t\t    _tickWord = \"tick\",\n\t\t    //helps reduce gc burden\n\t\t_fps,\n\t\t    _req,\n\t\t    _id,\n\t\t    _gap,\n\t\t    _nextTime,\n\t\t    _tick = function _tick(manual) {\n\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t    overlap,\n\t\t\t    dispatch;\n\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t}\n\t\t\t_lastUpdate += elapsed;\n\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\toverlap = _self.time - _nextTime;\n\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t_self.frame++;\n\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\tdispatch = true;\n\t\t\t}\n\t\t\tif (manual !== true) {\n\t\t\t\t//make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t_id = _req(_tick);\n\t\t\t}\n\t\t\tif (dispatch) {\n\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t}\n\t\t};\n\n\t\tEventDispatcher.call(_self);\n\t\t_self.time = _self.frame = 0;\n\t\t_self.tick = function () {\n\t\t\t_tick(true);\n\t\t};\n\n\t\t_self.lagSmoothing = function (threshold, adjustedLag) {\n\t\t\t_lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited\n\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t};\n\n\t\t_self.sleep = function () {\n\t\t\tif (_id == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\tclearTimeout(_id);\n\t\t\t} else {\n\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t}\n\t\t\t_req = _emptyFunc;\n\t\t\t_id = null;\n\t\t\tif (_self === _ticker) {\n\t\t\t\t_tickerActive = false;\n\t\t\t}\n\t\t};\n\n\t\t_self.wake = function () {\n\t\t\tif (_id !== null) {\n\t\t\t\t_self.sleep();\n\t\t\t} else if (_self.frame > 10) {\n\t\t\t\t//don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t}\n\t\t\t_req = _fps === 0 ? _emptyFunc : !_useRAF || !_reqAnimFrame ? function (f) {\n\t\t\t\treturn setTimeout(f, (_nextTime - _self.time) * 1000 + 1 | 0);\n\t\t\t} : _reqAnimFrame;\n\t\t\tif (_self === _ticker) {\n\t\t\t\t_tickerActive = true;\n\t\t\t}\n\t\t\t_tick(2);\n\t\t};\n\n\t\t_self.fps = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn _fps;\n\t\t\t}\n\t\t\t_fps = value;\n\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t_nextTime = this.time + _gap;\n\t\t\t_self.wake();\n\t\t};\n\n\t\t_self.useRAF = function (value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn _useRAF;\n\t\t\t}\n\t\t\t_self.sleep();\n\t\t\t_useRAF = value;\n\t\t\t_self.fps(_fps);\n\t\t};\n\t\t_self.fps(fps);\n\n\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\tsetTimeout(function () {\n\t\t\tif (_useRAF && _self.frame < 5) {\n\t\t\t\t_self.useRAF(false);\n\t\t\t}\n\t\t}, 1500);\n\t});\n\n\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\tp.constructor = gs.Ticker;\n\n\t/*\n  * ----------------------------------------------------------------\n  * Animation\n  * ----------------------------------------------------------------\n  */\n\tvar Animation = _class(\"core.Animation\", function (duration, vars) {\n\t\tthis.vars = vars = vars || {};\n\t\tthis._duration = this._totalDuration = duration || 0;\n\t\tthis._delay = Number(vars.delay) || 0;\n\t\tthis._timeScale = 1;\n\t\tthis._active = vars.immediateRender === true;\n\t\tthis.data = vars.data;\n\t\tthis._reversed = vars.reversed === true;\n\n\t\tif (!_rootTimeline) {\n\t\t\treturn;\n\t\t}\n\t\tif (!_tickerActive) {\n\t\t\t//some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t_ticker.wake();\n\t\t}\n\n\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\ttl.add(this, tl._time);\n\n\t\tif (this.vars.paused) {\n\t\t\tthis.paused(true);\n\t\t}\n\t});\n\n\t_ticker = Animation.ticker = new gs.Ticker();\n\tp = Animation.prototype;\n\tp._dirty = p._gc = p._initted = p._paused = false;\n\tp._totalTime = p._time = 0;\n\tp._rawPrevTime = -1;\n\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\tp._paused = false;\n\n\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\tvar _checkTimeout = function _checkTimeout() {\n\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000) {\n\t\t\t_ticker.wake();\n\t\t}\n\t\tsetTimeout(_checkTimeout, 2000);\n\t};\n\t_checkTimeout();\n\n\tp.play = function (from, suppressEvents) {\n\t\tif (from != null) {\n\t\t\tthis.seek(from, suppressEvents);\n\t\t}\n\t\treturn this.reversed(false).paused(false);\n\t};\n\n\tp.pause = function (atTime, suppressEvents) {\n\t\tif (atTime != null) {\n\t\t\tthis.seek(atTime, suppressEvents);\n\t\t}\n\t\treturn this.paused(true);\n\t};\n\n\tp.resume = function (from, suppressEvents) {\n\t\tif (from != null) {\n\t\t\tthis.seek(from, suppressEvents);\n\t\t}\n\t\treturn this.paused(false);\n\t};\n\n\tp.seek = function (time, suppressEvents) {\n\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t};\n\n\tp.restart = function (includeDelay, suppressEvents) {\n\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, suppressEvents !== false, true);\n\t};\n\n\tp.reverse = function (from, suppressEvents) {\n\t\tif (from != null) {\n\t\t\tthis.seek(from || this.totalDuration(), suppressEvents);\n\t\t}\n\t\treturn this.reversed(true).paused(false);\n\t};\n\n\tp.render = function (time, suppressEvents, force) {\n\t\t//stub - we override this method in subclasses.\n\t};\n\n\tp.invalidate = function () {\n\t\tthis._time = this._totalTime = 0;\n\t\tthis._initted = this._gc = false;\n\t\tthis._rawPrevTime = -1;\n\t\tif (this._gc || !this.timeline) {\n\t\t\tthis._enabled(true);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.isActive = function () {\n\t\tvar tl = this._timeline,\n\t\t    //the 2 root timelines won't have a _timeline; they're always active.\n\t\tstartTime = this._startTime,\n\t\t    rawTime;\n\t\treturn !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale;\n\t};\n\n\tp._enabled = function (enabled, ignoreTimeline) {\n\t\tif (!_tickerActive) {\n\t\t\t_ticker.wake();\n\t\t}\n\t\tthis._gc = !enabled;\n\t\tthis._active = this.isActive();\n\t\tif (ignoreTimeline !== true) {\n\t\t\tif (enabled && !this.timeline) {\n\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tp._kill = function (vars, target) {\n\t\treturn this._enabled(false, false);\n\t};\n\n\tp.kill = function (vars, target) {\n\t\tthis._kill(vars, target);\n\t\treturn this;\n\t};\n\n\tp._uncache = function (includeSelf) {\n\t\tvar tween = includeSelf ? this : this.timeline;\n\t\twhile (tween) {\n\t\t\ttween._dirty = true;\n\t\t\ttween = tween.timeline;\n\t\t}\n\t\treturn this;\n\t};\n\n\tp._swapSelfInParams = function (params) {\n\t\tvar i = params.length,\n\t\t    copy = params.concat();\n\t\twhile (--i > -1) {\n\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\tcopy[i] = this;\n\t\t\t}\n\t\t}\n\t\treturn copy;\n\t};\n\n\tp._callback = function (type) {\n\t\tvar v = this.vars;\n\t\tv[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t};\n\n\t//----Animation getters/setters --------------------------------------------------------\n\n\tp.eventCallback = function (type, callback, params, scope) {\n\t\tif ((type || \"\").substr(0, 2) === \"on\") {\n\t\t\tvar v = this.vars;\n\t\t\tif (arguments.length === 1) {\n\t\t\t\treturn v[type];\n\t\t\t}\n\t\t\tif (callback == null) {\n\t\t\t\tdelete v[type];\n\t\t\t} else {\n\t\t\t\tv[type] = callback;\n\t\t\t\tv[type + \"Params\"] = _isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1 ? this._swapSelfInParams(params) : params;\n\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t}\n\t\t\tif (type === \"onUpdate\") {\n\t\t\t\tthis._onUpdate = callback;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.delay = function (value) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._delay;\n\t\t}\n\t\tif (this._timeline.smoothChildTiming) {\n\t\t\tthis.startTime(this._startTime + value - this._delay);\n\t\t}\n\t\tthis._delay = value;\n\t\treturn this;\n\t};\n\n\tp.duration = function (value) {\n\t\tif (!arguments.length) {\n\t\t\tthis._dirty = false;\n\t\t\treturn this._duration;\n\t\t}\n\t\tthis._duration = this._totalDuration = value;\n\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.totalDuration = function (value) {\n\t\tthis._dirty = false;\n\t\treturn !arguments.length ? this._totalDuration : this.duration(value);\n\t};\n\n\tp.time = function (value, suppressEvents) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._time;\n\t\t}\n\t\tif (this._dirty) {\n\t\t\tthis.totalDuration();\n\t\t}\n\t\treturn this.totalTime(value > this._duration ? this._duration : value, suppressEvents);\n\t};\n\n\tp.totalTime = function (time, suppressEvents, uncapped) {\n\t\tif (!_tickerActive) {\n\t\t\t_ticker.wake();\n\t\t}\n\t\tif (!arguments.length) {\n\t\t\treturn this._totalTime;\n\t\t}\n\t\tif (this._timeline) {\n\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\ttime += this.totalDuration();\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tthis.totalDuration();\n\t\t\t\t}\n\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t    tl = this._timeline;\n\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\ttime = totalDuration;\n\t\t\t\t}\n\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - (!this._reversed ? time : totalDuration - time) / this._timeScale;\n\t\t\t\tif (!tl._dirty) {\n\t\t\t\t\t//for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\tif (tl._timeline) {\n\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t//in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.progress = p.totalProgress = function (value, suppressEvents) {\n\t\tvar duration = this.duration();\n\t\treturn !arguments.length ? duration ? this._time / duration : this.ratio : this.totalTime(duration * value, suppressEvents);\n\t};\n\n\tp.startTime = function (value) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._startTime;\n\t\t}\n\t\tif (value !== this._startTime) {\n\t\t\tthis._startTime = value;\n\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.endTime = function (includeRepeats) {\n\t\treturn this._startTime + (includeRepeats != false ? this.totalDuration() : this.duration()) / this._timeScale;\n\t};\n\n\tp.timeScale = function (value) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._timeScale;\n\t\t}\n\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\tvar pauseTime = this._pauseTime,\n\t\t\t    t = pauseTime || pauseTime === 0 ? pauseTime : this._timeline.totalTime();\n\t\t\tthis._startTime = t - (t - this._startTime) * this._timeScale / value;\n\t\t}\n\t\tthis._timeScale = value;\n\t\treturn this._uncache(false);\n\t};\n\n\tp.reversed = function (value) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._reversed;\n\t\t}\n\t\tif (value != this._reversed) {\n\t\t\tthis._reversed = value;\n\t\t\tthis.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.paused = function (value) {\n\t\tif (!arguments.length) {\n\t\t\treturn this._paused;\n\t\t}\n\t\tvar tl = this._timeline,\n\t\t    raw,\n\t\t    elapsed;\n\t\tif (value != this._paused) if (tl) {\n\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\traw = tl.rawTime();\n\t\t\telapsed = raw - this._pauseTime;\n\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\tthis._startTime += elapsed;\n\t\t\t\tthis._uncache(false);\n\t\t\t}\n\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\tthis._paused = value;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\tthis.render(raw, raw === this._totalTime, true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t}\n\t\t}\n\t\tif (this._gc && !value) {\n\t\t\tthis._enabled(true, false);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/*\n  * ----------------------------------------------------------------\n  * SimpleTimeline\n  * ----------------------------------------------------------------\n  */\n\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function (vars) {\n\t\tAnimation.call(this, 0, vars);\n\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t});\n\n\tp = SimpleTimeline.prototype = new Animation();\n\tp.constructor = SimpleTimeline;\n\tp.kill()._gc = false;\n\tp._first = p._last = p._recent = null;\n\tp._sortChildren = false;\n\n\tp.add = p.insert = function (child, position, align, stagger) {\n\t\tvar prevTween, st;\n\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\tif (child._paused) if (this !== child._timeline) {\n\t\t\t//we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\tchild._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale;\n\t\t}\n\t\tif (child.timeline) {\n\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t}\n\t\tchild.timeline = child._timeline = this;\n\t\tif (child._gc) {\n\t\t\tchild._enabled(true, true);\n\t\t}\n\t\tprevTween = this._last;\n\t\tif (this._sortChildren) {\n\t\t\tst = child._startTime;\n\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\tprevTween = prevTween._prev;\n\t\t\t}\n\t\t}\n\t\tif (prevTween) {\n\t\t\tchild._next = prevTween._next;\n\t\t\tprevTween._next = child;\n\t\t} else {\n\t\t\tchild._next = this._first;\n\t\t\tthis._first = child;\n\t\t}\n\t\tif (child._next) {\n\t\t\tchild._next._prev = child;\n\t\t} else {\n\t\t\tthis._last = child;\n\t\t}\n\t\tchild._prev = prevTween;\n\t\tthis._recent = child;\n\t\tif (this._timeline) {\n\t\t\tthis._uncache(true);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp._remove = function (tween, skipDisable) {\n\t\tif (tween.timeline === this) {\n\t\t\tif (!skipDisable) {\n\t\t\t\ttween._enabled(false, true);\n\t\t\t}\n\n\t\t\tif (tween._prev) {\n\t\t\t\ttween._prev._next = tween._next;\n\t\t\t} else if (this._first === tween) {\n\t\t\t\tthis._first = tween._next;\n\t\t\t}\n\t\t\tif (tween._next) {\n\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t} else if (this._last === tween) {\n\t\t\t\tthis._last = tween._prev;\n\t\t\t}\n\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\tif (tween === this._recent) {\n\t\t\t\tthis._recent = this._last;\n\t\t\t}\n\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.render = function (time, suppressEvents, force) {\n\t\tvar tween = this._first,\n\t\t    next;\n\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\twhile (tween) {\n\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\tif (tween._active || time >= tween._startTime && !tween._paused) {\n\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t} else {\n\t\t\t\t\ttween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t}\n\t\t\t}\n\t\t\ttween = next;\n\t\t}\n\t};\n\n\tp.rawTime = function () {\n\t\tif (!_tickerActive) {\n\t\t\t_ticker.wake();\n\t\t}\n\t\treturn this._totalTime;\n\t};\n\n\t/*\n  * ----------------------------------------------------------------\n  * TweenLite\n  * ----------------------------------------------------------------\n  */\n\tvar TweenLite = _class(\"TweenLite\", function (target, duration, vars) {\n\t\tAnimation.call(this, duration, vars);\n\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\tif (target == null) {\n\t\t\tthrow \"Cannot tween a null target.\";\n\t\t}\n\n\t\tthis.target = target = typeof target !== \"string\" ? target : TweenLite.selector(target) || target;\n\n\t\tvar isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType),\n\t\t    overwrite = this.vars.overwrite,\n\t\t    i,\n\t\t    targ,\n\t\t    targets;\n\n\t\tthis._overwrite = overwrite = overwrite == null ? _overwriteLookup[TweenLite.defaultOverwrite] : typeof overwrite === \"number\" ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\tif ((isSelector || target instanceof Array || target.push && _isArray(target)) && typeof target[0] !== \"number\") {\n\t\t\tthis._targets = targets = _slice(target); //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\tthis._propLookup = [];\n\t\t\tthis._siblings = [];\n\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\ttarg = targets[i];\n\t\t\t\tif (!targ) {\n\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (typeof targ === \"string\") {\n\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\tif (typeof targ === \"string\") {\n\t\t\t\t\t\ttargets.splice(i + 1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {\n\t\t\t\t\t//in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._propLookup = {};\n\t\t\tthis._siblings = _register(target, this, false);\n\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t}\n\t\t}\n\t\tif (this.vars.immediateRender || duration === 0 && this._delay === 0 && this.vars.immediateRender !== false) {\n\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\tthis.render(-this._delay);\n\t\t}\n\t}, true),\n\t    _isSelector = function _isSelector(v) {\n\t\treturn v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t},\n\t    _autoCSS = function _autoCSS(vars, target) {\n\t\tvar css = {},\n\t\t    p;\n\t\tfor (p in vars) {\n\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)) {\n\t\t\t\t//note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\tcss[p] = vars[p];\n\t\t\t\tdelete vars[p];\n\t\t\t}\n\t\t}\n\t\tvars.css = css;\n\t};\n\n\tp = TweenLite.prototype = new Animation();\n\tp.constructor = TweenLite;\n\tp.kill()._gc = false;\n\n\t//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\tp.ratio = 0;\n\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\tTweenLite.version = \"1.18.0\";\n\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\tTweenLite.defaultOverwrite = \"auto\";\n\tTweenLite.ticker = _ticker;\n\tTweenLite.autoSleep = 120;\n\tTweenLite.lagSmoothing = function (threshold, adjustedLag) {\n\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t};\n\n\tTweenLite.selector = window.$ || window.jQuery || function (e) {\n\t\tvar selector = window.$ || window.jQuery;\n\t\tif (selector) {\n\t\t\tTweenLite.selector = selector;\n\t\t\treturn selector(e);\n\t\t}\n\t\treturn typeof document === \"undefined\" ? e : document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById(e.charAt(0) === \"#\" ? e.substr(1) : e);\n\t};\n\n\tvar _lazyTweens = [],\n\t    _lazyLookup = {},\n\t    _numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\n\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t_setRatio = function _setRatio(v) {\n\t\tvar pt = this._firstPT,\n\t\t    min = 0.000001,\n\t\t    val;\n\t\twhile (pt) {\n\t\t\tval = !pt.blob ? pt.c * v + pt.s : v ? this.join(\"\") : this.start;\n\t\t\tif (pt.r) {\n\t\t\t\tval = Math.round(val);\n\t\t\t} else if (val < min) if (val > -min) {\n\t\t\t\t//prevents issues with converting very small numbers to strings in the browser\n\t\t\t\tval = 0;\n\t\t\t}\n\t\t\tif (!pt.f) {\n\t\t\t\tpt.t[pt.p] = val;\n\t\t\t} else if (pt.fp) {\n\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t} else {\n\t\t\t\tpt.t[pt.p](val);\n\t\t\t}\n\t\t\tpt = pt._next;\n\t\t}\n\t},\n\n\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t_blobDif = function _blobDif(start, end, filter, pt) {\n\t\tvar a = [start, end],\n\t\t    charIndex = 0,\n\t\t    s = \"\",\n\t\t    color = 0,\n\t\t    startNums,\n\t\t    endNums,\n\t\t    num,\n\t\t    i,\n\t\t    l,\n\t\t    nonNumbers,\n\t\t    currentNum;\n\t\ta.start = start;\n\t\tif (filter) {\n\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\tstart = a[0];\n\t\t\tend = a[1];\n\t\t}\n\t\ta.length = 0;\n\t\tstartNums = start.match(_numbersExp) || [];\n\t\tendNums = end.match(_numbersExp) || [];\n\t\tif (pt) {\n\t\t\tpt._next = null;\n\t\t\tpt.blob = 1;\n\t\t\ta._firstPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t}\n\t\tl = endNums.length;\n\t\tfor (i = 0; i < l; i++) {\n\t\t\tcurrentNum = endNums[i];\n\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);\n\t\t\ts += nonNumbers || !i ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\tcharIndex += nonNumbers.length;\n\t\t\tif (color) {\n\t\t\t\t//sense rgba() values and round them.\n\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\tcolor = 1;\n\t\t\t}\n\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\ts += currentNum;\n\t\t\t} else {\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t\ts = \"\";\n\t\t\t\t}\n\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\ta.push(num);\n\t\t\t\ta._firstPT = { _next: a._firstPT, t: a, p: a.length - 1, s: num, c: (currentNum.charAt(1) === \"=\" ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : parseFloat(currentNum) - num) || 0, f: 0, r: color && color < 4 };\n\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t}\n\t\t\tcharIndex += currentNum.length;\n\t\t}\n\t\ts += end.substr(charIndex);\n\t\tif (s) {\n\t\t\ta.push(s);\n\t\t}\n\t\ta.setRatio = _setRatio;\n\t\treturn a;\n\t},\n\n\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t_addPropTween = function _addPropTween(target, prop, start, end, overwriteProp, round, funcParam, stringFilter) {\n\t\tvar s = start === \"get\" ? target[prop] : start,\n\t\t    type = _typeof(target[prop]),\n\t\t    isRelative = typeof end === \"string\" && end.charAt(1) === \"=\",\n\t\t    pt = { t: target, p: prop, s: s, f: type === \"function\", pg: 0, n: overwriteProp || prop, r: round, pr: 0, c: isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0 },\n\t\t    blob,\n\t\t    getterName;\n\t\tif (type !== \"number\") {\n\t\t\tif (type === \"function\" && start === \"get\") {\n\t\t\t\tgetterName = prop.indexOf(\"set\") || typeof target[\"get\" + prop.substr(3)] !== \"function\" ? prop : \"get\" + prop.substr(3);\n\t\t\t\tpt.s = s = funcParam ? target[getterName](funcParam) : target[getterName]();\n\t\t\t}\n\t\t\tif (typeof s === \"string\" && (funcParam || isNaN(s))) {\n\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\tpt.fp = funcParam;\n\t\t\t\tblob = _blobDif(s, end, stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\tpt = { t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0 }; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t} else if (!isRelative) {\n\t\t\t\tpt.c = parseFloat(end) - parseFloat(s) || 0;\n\t\t\t}\n\t\t}\n\t\tif (pt.c) {\n\t\t\t//only add it to the linked list if there's a change.\n\t\t\tif (pt._next = this._firstPT) {\n\t\t\t\tpt._next._prev = pt;\n\t\t\t}\n\t\t\tthis._firstPT = pt;\n\t\t\treturn pt;\n\t\t}\n\t},\n\t    _internals = TweenLite._internals = { isArray: _isArray, isSelector: _isSelector, lazyTweens: _lazyTweens, blobDif: _blobDif },\n\t    //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t_plugins = TweenLite._plugins = {},\n\t    _tweenLookup = _internals.tweenLookup = {},\n\t    _tweenLookupNum = 0,\n\t    _reservedProps = _internals.reservedProps = { ease: 1, delay: 1, overwrite: 1, onComplete: 1, onCompleteParams: 1, onCompleteScope: 1, useFrames: 1, runBackwards: 1, startAt: 1, onUpdate: 1, onUpdateParams: 1, onUpdateScope: 1, onStart: 1, onStartParams: 1, onStartScope: 1, onReverseComplete: 1, onReverseCompleteParams: 1, onReverseCompleteScope: 1, onRepeat: 1, onRepeatParams: 1, onRepeatScope: 1, easeParams: 1, yoyo: 1, immediateRender: 1, repeat: 1, repeatDelay: 1, data: 1, paused: 1, reversed: 1, autoCSS: 1, lazy: 1, onOverwrite: 1, callbackScope: 1, stringFilter: 1 },\n\t    _overwriteLookup = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, \"true\": 1, \"false\": 0 },\n\t    _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t    _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t    _nextGCFrame = 30,\n\t    _lazyRender = _internals.lazyRender = function () {\n\t\tvar i = _lazyTweens.length,\n\t\t    tween;\n\t\t_lazyLookup = {};\n\t\twhile (--i > -1) {\n\t\t\ttween = _lazyTweens[i];\n\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\ttween._lazy = false;\n\t\t\t}\n\t\t}\n\t\t_lazyTweens.length = 0;\n\t};\n\n\t_rootTimeline._startTime = _ticker.time;\n\t_rootFramesTimeline._startTime = _ticker.frame;\n\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\tAnimation._updateRoot = TweenLite.render = function () {\n\t\tvar i, a, p;\n\t\tif (_lazyTweens.length) {\n\t\t\t//if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t_lazyRender();\n\t\t}\n\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\tif (_lazyTweens.length) {\n\t\t\t_lazyRender();\n\t\t}\n\t\tif (_ticker.frame >= _nextGCFrame) {\n\t\t\t//dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\tfor (p in _tweenLookup) {\n\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (a.length === 0) {\n\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\tp = _rootTimeline._first;\n\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\tp = p._next;\n\t\t\t\t}\n\t\t\t\tif (!p) {\n\t\t\t\t\t_ticker.sleep();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\tvar _register = function _register(target, tween, scrub) {\n\t\tvar id = target._gsTweenID,\n\t\t    a,\n\t\t    i;\n\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + _tweenLookupNum++)]) {\n\t\t\t_tweenLookup[id] = { target: target, tweens: [] };\n\t\t}\n\t\tif (tween) {\n\t\t\ta = _tweenLookup[id].tweens;\n\t\t\ta[i = a.length] = tween;\n\t\t\tif (scrub) {\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _tweenLookup[id].tweens;\n\t},\n\t    _onOverwrite = function _onOverwrite(overwrittenTween, overwritingTween, target, killedProps) {\n\t\tvar func = overwrittenTween.vars.onOverwrite,\n\t\t    r1,\n\t\t    r2;\n\t\tif (func) {\n\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t}\n\t\tfunc = TweenLite.onOverwrite;\n\t\tif (func) {\n\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t}\n\t\treturn r1 !== false && r2 !== false;\n\t},\n\t    _applyOverwrite = function _applyOverwrite(target, tween, props, mode, siblings) {\n\t\tvar i, changed, curTween, l;\n\t\tif (mode === 1 || mode >= 4) {\n\t\t\tl = siblings.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t}\n\t\t//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t    overlaps = [],\n\t\t    oCount = 0,\n\t\t    zeroDur = tween._duration === 0,\n\t\t    globalStart;\n\t\ti = siblings.length;\n\t\twhile (--i > -1) {\n\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t//ignore\n\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t}\n\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {\n\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t}\n\t\t}\n\n\t\ti = oCount;\n\t\twhile (--i > -1) {\n\t\t\tcurTween = overlaps[i];\n\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tif (mode !== 2 || !curTween._firstPT && curTween._initted) {\n\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (curTween._enabled(false, false)) {\n\t\t\t\t\t//if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t},\n\t    _checkOverlap = function _checkOverlap(tween, reference, zeroDur) {\n\t\tvar tl = tween._timeline,\n\t\t    ts = tl._timeScale,\n\t\t    t = tween._startTime;\n\t\twhile (tl._timeline) {\n\t\t\tt += tl._startTime;\n\t\t\tts *= tl._timeScale;\n\t\t\tif (tl._paused) {\n\t\t\t\treturn -100;\n\t\t\t}\n\t\t\ttl = tl._timeline;\n\t\t}\n\t\tt /= ts;\n\t\treturn t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum ? _tinyNum : (t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum ? 0 : t - reference - _tinyNum;\n\t};\n\n\t//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\tp._init = function () {\n\t\tvar v = this.vars,\n\t\t    op = this._overwrittenProps,\n\t\t    dur = this._duration,\n\t\t    immediate = !!v.immediateRender,\n\t\t    ease = v.ease,\n\t\t    i,\n\t\t    initPlugins,\n\t\t    pt,\n\t\t    p,\n\t\t    startVars;\n\t\tif (v.startAt) {\n\t\t\tif (this._startAt) {\n\t\t\t\tthis._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\tthis._startAt.kill();\n\t\t\t}\n\t\t\tstartVars = {};\n\t\t\tfor (p in v.startAt) {\n\t\t\t\t//copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t}\n\t\t\tstartVars.overwrite = false;\n\t\t\tstartVars.immediateRender = true;\n\t\t\tstartVars.lazy = immediate && v.lazy !== false;\n\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\tthis._startAt = TweenLite.to(this.target, 0, startVars);\n\t\t\tif (immediate) {\n\t\t\t\tif (this._time > 0) {\n\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\tif (this._startAt) {\n\t\t\t\tthis._startAt.render(-1, true);\n\t\t\t\tthis._startAt.kill();\n\t\t\t\tthis._startAt = null;\n\t\t\t} else {\n\t\t\t\tif (this._time !== 0) {\n\t\t\t\t\t//in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\timmediate = false;\n\t\t\t\t}\n\t\t\t\tpt = {};\n\t\t\t\tfor (p in v) {\n\t\t\t\t\t//copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt.overwrite = 0;\n\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\tpt.lazy = immediate && v.lazy !== false;\n\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\tif (!immediate) {\n\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t}\n\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ease = ease = !ease ? TweenLite.defaultEase : ease instanceof Ease ? ease : typeof ease === \"function\" ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t}\n\t\tthis._easeType = this._ease._type;\n\t\tthis._easePower = this._ease._power;\n\t\tthis._firstPT = null;\n\n\t\tif (this._targets) {\n\t\t\ti = this._targets.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null)) {\n\t\t\t\t\tinitPlugins = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op);\n\t\t}\n\n\t\tif (initPlugins) {\n\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t}\n\t\tif (op) if (!this._firstPT) if (typeof this.target !== \"function\") {\n\t\t\t//if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\tthis._enabled(false, false);\n\t\t}\n\t\tif (v.runBackwards) {\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tpt.s += pt.c;\n\t\t\t\tpt.c = -pt.c;\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t}\n\t\tthis._onUpdate = v.onUpdate;\n\t\tthis._initted = true;\n\t};\n\n\tp._initProps = function (target, propLookup, siblings, overwrittenProps) {\n\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\tif (target == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t}\n\n\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) {\n\t\t\t//it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t_autoCSS(this.vars, target);\n\t\t}\n\t\tfor (p in this.vars) {\n\t\t\tv = this.vars[p];\n\t\t\tif (_reservedProps[p]) {\n\t\t\t\tif (v) if (v instanceof Array || v.push && _isArray(v)) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t}\n\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this)) {\n\n\t\t\t\t//t - target \t\t[object]\n\t\t\t\t//p - property \t\t[string]\n\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t//c - change\t\t[number]\n\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\tthis._firstPT = pt = { _next: this._firstPT, t: plugin, p: \"setRatio\", s: 0, c: 1, f: 1, n: p, pg: 1, pr: plugin._priority };\n\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t}\n\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\tinitPlugins = true;\n\t\t\t\t}\n\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter);\n\t\t\t}\n\t\t}\n\n\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) {\n\t\t\t//another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps);\n\t\t}\n\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\tthis._kill(propLookup, target);\n\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps);\n\t\t}\n\t\tif (this._firstPT) if (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration) {\n\t\t\t//zero duration tweens don't lazy render by default; everything else does.\n\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t}\n\t\treturn initPlugins;\n\t};\n\n\tp.render = function (time, suppressEvents, force) {\n\t\tvar prevTime = this._time,\n\t\t    duration = this._duration,\n\t\t    prevRawPrevTime = this._rawPrevTime,\n\t\t    isComplete,\n\t\t    callback,\n\t\t    pt,\n\t\t    rawPrevTime;\n\t\tif (time >= duration) {\n\t\t\tthis._totalTime = this._time = duration;\n\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n\t\t\tif (!this._reversed) {\n\t\t\t\tisComplete = true;\n\t\t\t\tcallback = \"onComplete\";\n\t\t\t\tforce = force || this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t}\n\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) {\n\t\t\t\t//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\tif (this._startTime === this._timeline._duration) {\n\t\t\t\t\t//if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\ttime = 0;\n\t\t\t\t}\n\t\t\t\tif (time === 0 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum && this.data !== \"isPause\") if (prevRawPrevTime !== time) {\n\t\t\t\t\t//note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\tforce = true;\n\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t}\n\t\t} else if (time < 0.0000001) {\n\t\t\t//to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\tthis._totalTime = this._time = 0;\n\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\tif (prevTime !== 0 || duration === 0 && prevRawPrevTime > 0) {\n\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\tisComplete = this._reversed;\n\t\t\t}\n\t\t\tif (time < 0) {\n\t\t\t\tthis._active = false;\n\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) {\n\t\t\t\t\t//zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === \"isPause\")) {\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this._initted) {\n\t\t\t\t//if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n\t\t\t\tforce = true;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._totalTime = this._time = time;\n\n\t\t\tif (this._easeType) {\n\t\t\t\tvar r = time / duration,\n\t\t\t\t    type = this._easeType,\n\t\t\t\t    pow = this._easePower;\n\t\t\t\tif (type === 1 || type === 3 && r >= 0.5) {\n\t\t\t\t\tr = 1 - r;\n\t\t\t\t}\n\t\t\t\tif (type === 3) {\n\t\t\t\t\tr *= 2;\n\t\t\t\t}\n\t\t\t\tif (pow === 1) {\n\t\t\t\t\tr *= r;\n\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\tr *= r * r;\n\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\tr *= r * r * r;\n\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t}\n\n\t\t\t\tif (type === 1) {\n\t\t\t\t\tthis.ratio = 1 - r;\n\t\t\t\t} else if (type === 2) {\n\t\t\t\t\tthis.ratio = r;\n\t\t\t\t} else if (time / duration < 0.5) {\n\t\t\t\t\tthis.ratio = r / 2;\n\t\t\t\t} else {\n\t\t\t\t\tthis.ratio = 1 - r / 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.ratio = this._ease.getRatio(time / duration);\n\t\t\t}\n\t\t}\n\n\t\tif (this._time === prevTime && !force) {\n\t\t\treturn;\n\t\t} else if (!this._initted) {\n\t\t\tthis._init();\n\t\t\tif (!this._initted || this._gc) {\n\t\t\t\t//immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\treturn;\n\t\t\t} else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {\n\t\t\t\tthis._time = this._totalTime = prevTime;\n\t\t\t\tthis._rawPrevTime = prevRawPrevTime;\n\t\t\t\t_lazyTweens.push(this);\n\t\t\t\tthis._lazy = [time, suppressEvents];\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\tif (this._time && !isComplete) {\n\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t} else if (isComplete && this._ease._calcEnd) {\n\t\t\t\tthis.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1);\n\t\t\t}\n\t\t}\n\t\tif (this._lazy !== false) {\n\t\t\t//in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\tthis._lazy = false;\n\t\t}\n\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n\t\t\tthis._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t}\n\t\tif (prevTime === 0) {\n\t\t\tif (this._startAt) {\n\t\t\t\tif (time >= 0) {\n\t\t\t\t\tthis._startAt.render(time, suppressEvents, force);\n\t\t\t\t} else if (!callback) {\n\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\tthis._callback(\"onStart\");\n\t\t\t}\n\t\t}\n\t\tpt = this._firstPT;\n\t\twhile (pt) {\n\t\t\tif (pt.f) {\n\t\t\t\tpt.t[pt.p](pt.c * this.ratio + pt.s);\n\t\t\t} else {\n\t\t\t\tpt.t[pt.p] = pt.c * this.ratio + pt.s;\n\t\t\t}\n\t\t\tpt = pt._next;\n\t\t}\n\n\t\tif (this._onUpdate) {\n\t\t\tif (time < 0) if (this._startAt && time !== -0.0001) {\n\t\t\t\t//if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\tthis._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t}\n\t\t\tif (!suppressEvents) if (this._time !== prevTime || isComplete) {\n\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t}\n\t\t}\n\t\tif (callback) if (!this._gc || force) {\n\t\t\t//check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\tif (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) {\n\t\t\t\t//-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\tthis._startAt.render(time, suppressEvents, force);\n\t\t\t}\n\t\t\tif (isComplete) {\n\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t}\n\t\t\t\tthis._active = false;\n\t\t\t}\n\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\tthis._callback(callback);\n\t\t\t}\n\t\t\tif (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {\n\t\t\t\t//the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\tthis._rawPrevTime = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\tp._kill = function (vars, target, overwritingTween) {\n\t\tif (vars === \"all\") {\n\t\t\tvars = null;\n\t\t}\n\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\tthis._lazy = false;\n\t\t\treturn this._enabled(false, false);\n\t\t}\n\t\ttarget = typeof target !== \"string\" ? target || this._targets || this.target : TweenLite.selector(target) || target;\n\t\tvar simultaneousOverwrite = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline,\n\t\t    i,\n\t\t    overwrittenProps,\n\t\t    p,\n\t\t    pt,\n\t\t    propLookup,\n\t\t    changed,\n\t\t    killProps,\n\t\t    record,\n\t\t    killed;\n\t\tif ((_isArray(target) || _isSelector(target)) && typeof target[0] !== \"number\") {\n\t\t\ti = target.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._targets) {\n\t\t\t\ti = this._targets.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target !== this.target) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t}\n\n\t\t\tif (propLookup) {\n\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\trecord = vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && ((typeof vars === \"undefined\" ? \"undefined\" : _typeof(vars)) !== \"object\" || !vars._tempKill); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {\n\t\t\t\t\t\t//if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (p in killProps) {\n\t\t\t\t\tif (pt = propLookup[p]) {\n\t\t\t\t\t\tif (simultaneousOverwrite) {\n\t\t\t\t\t\t\t//if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t}\n\t\t\t\t\tif (record) {\n\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._firstPT && this._initted) {\n\t\t\t\t\t//if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t};\n\n\tp.invalidate = function () {\n\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t}\n\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\tthis._propLookup = this._targets ? {} : [];\n\t\tAnimation.prototype.invalidate.call(this);\n\t\tif (this.vars.immediateRender) {\n\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\tthis.render(-this._delay);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp._enabled = function (enabled, ignoreTimeline) {\n\t\tif (!_tickerActive) {\n\t\t\t_ticker.wake();\n\t\t}\n\t\tif (enabled && this._gc) {\n\t\t\tvar targets = this._targets,\n\t\t\t    i;\n\t\t\tif (targets) {\n\t\t\t\ti = targets.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t}\n\t\t}\n\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\treturn TweenLite._onPluginEvent(enabled ? \"_onEnable\" : \"_onDisable\", this);\n\t\t}\n\t\treturn false;\n\t};\n\n\t//----TweenLite static methods -----------------------------------------------------\n\n\tTweenLite.to = function (target, duration, vars) {\n\t\treturn new TweenLite(target, duration, vars);\n\t};\n\n\tTweenLite.from = function (target, duration, vars) {\n\t\tvars.runBackwards = true;\n\t\tvars.immediateRender = vars.immediateRender != false;\n\t\treturn new TweenLite(target, duration, vars);\n\t};\n\n\tTweenLite.fromTo = function (target, duration, fromVars, toVars) {\n\t\ttoVars.startAt = fromVars;\n\t\ttoVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;\n\t\treturn new TweenLite(target, duration, toVars);\n\t};\n\n\tTweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {\n\t\treturn new TweenLite(callback, 0, { delay: delay, onComplete: callback, onCompleteParams: params, callbackScope: scope, onReverseComplete: callback, onReverseCompleteParams: params, immediateRender: false, lazy: false, useFrames: useFrames, overwrite: 0 });\n\t};\n\n\tTweenLite.set = function (target, vars) {\n\t\treturn new TweenLite(target, 0, vars);\n\t};\n\n\tTweenLite.getTweensOf = function (target, onlyActive) {\n\t\tif (target == null) {\n\t\t\treturn [];\n\t\t}\n\t\ttarget = typeof target !== \"string\" ? target : TweenLite.selector(target) || target;\n\t\tvar i, a, j, t;\n\t\tif ((_isArray(target) || _isSelector(target)) && typeof target[0] !== \"number\") {\n\t\t\ti = target.length;\n\t\t\ta = [];\n\t\t\twhile (--i > -1) {\n\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t}\n\t\t\ti = a.length;\n\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\twhile (--i > -1) {\n\t\t\t\tt = a[i];\n\t\t\t\tj = i;\n\t\t\t\twhile (--j > -1) {\n\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ta = _register(target).concat();\n\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (a[i]._gc || onlyActive && !a[i].isActive()) {\n\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t};\n\n\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function (target, onlyActive, vars) {\n\t\tif ((typeof onlyActive === \"undefined\" ? \"undefined\" : _typeof(onlyActive)) === \"object\") {\n\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\tonlyActive = false;\n\t\t}\n\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t    i = a.length;\n\t\twhile (--i > -1) {\n\t\t\ta[i]._kill(vars, target);\n\t\t}\n\t};\n\n\t/*\n  * ----------------------------------------------------------------\n  * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n  * ----------------------------------------------------------------\n  */\n\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function (props, priority) {\n\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\tthis._propName = this._overwriteProps[0];\n\t\tthis._priority = priority || 0;\n\t\tthis._super = TweenPlugin.prototype;\n\t}, true);\n\n\tp = TweenPlugin.prototype;\n\tTweenPlugin.version = \"1.18.0\";\n\tTweenPlugin.API = 2;\n\tp._firstPT = null;\n\tp._addTween = _addPropTween;\n\tp.setRatio = _setRatio;\n\n\tp._kill = function (lookup) {\n\t\tvar a = this._overwriteProps,\n\t\t    pt = this._firstPT,\n\t\t    i;\n\t\tif (lookup[this._propName] != null) {\n\t\t\tthis._overwriteProps = [];\n\t\t} else {\n\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (pt) {\n\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t}\n\t\t\t\tif (pt._prev) {\n\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\tpt._prev = null;\n\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = pt._next;\n\t\t}\n\t\treturn false;\n\t};\n\n\tp._roundProps = function (lookup, value) {\n\t\tvar pt = this._firstPT;\n\t\twhile (pt) {\n\t\t\tif (lookup[this._propName] || pt.n != null && lookup[pt.n.split(this._propName + \"_\").join(\"\")]) {\n\t\t\t\t//some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\tpt.r = value;\n\t\t\t}\n\t\t\tpt = pt._next;\n\t\t}\n\t};\n\n\tTweenLite._onPluginEvent = function (type, tween) {\n\t\tvar pt = tween._firstPT,\n\t\t    changed,\n\t\t    pt2,\n\t\t    first,\n\t\t    last,\n\t\t    next;\n\t\tif (type === \"_onInitAllProps\") {\n\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\twhile (pt) {\n\t\t\t\tnext = pt._next;\n\t\t\t\tpt2 = first;\n\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t}\n\t\t\t\tif (pt._prev = pt2 ? pt2._prev : last) {\n\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t} else {\n\t\t\t\t\tfirst = pt;\n\t\t\t\t}\n\t\t\t\tif (pt._next = pt2) {\n\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t} else {\n\t\t\t\t\tlast = pt;\n\t\t\t\t}\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t\tpt = tween._firstPT = first;\n\t\t}\n\t\twhile (pt) {\n\t\t\tif (pt.pg) if (typeof pt.t[type] === \"function\") if (pt.t[type]()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tpt = pt._next;\n\t\t}\n\t\treturn changed;\n\t};\n\n\tTweenPlugin.activate = function (plugins) {\n\t\tvar i = plugins.length;\n\t\twhile (--i > -1) {\n\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t_plugins[new plugins[i]()._propName] = plugins[i];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\n\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t_gsDefine.plugin = function (config) {\n\t\tif (!config || !config.propName || !config.init || !config.API) {\n\t\t\tthrow \"illegal plugin definition.\";\n\t\t}\n\t\tvar propName = config.propName,\n\t\t    priority = config.priority || 0,\n\t\t    overwriteProps = config.overwriteProps,\n\t\t    map = { init: \"_onInitTween\", set: \"setRatio\", kill: \"_kill\", round: \"_roundProps\", initAll: \"_onInitAllProps\" },\n\t\t    Plugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\", function () {\n\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t}, config.global === true),\n\t\t    p = Plugin.prototype = new TweenPlugin(propName),\n\t\t    prop;\n\t\tp.constructor = Plugin;\n\t\tPlugin.API = config.API;\n\t\tfor (prop in map) {\n\t\t\tif (typeof config[prop] === \"function\") {\n\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t}\n\t\t}\n\t\tPlugin.version = config.version;\n\t\tTweenPlugin.activate([Plugin]);\n\t\treturn Plugin;\n\t};\n\n\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\ta = window._gsQueue;\n\tif (a) {\n\t\tfor (i = 0; i < a.length; i++) {\n\t\t\ta[i]();\n\t\t}\n\t\tfor (p in _defLookup) {\n\t\t\tif (!_defLookup[p].func) {\n\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: com.greensock.\" + p);\n\t\t\t}\n\t\t}\n\t}\n\n\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n})(typeof module !== \"undefined\" && module.exports && typeof global !== \"undefined\" ? global : undefined || window, \"TweenMax\");\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 19 */
/***/ function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'popup-close-id-';\n\tvar idNum = 1;\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\telement.addEventListener('click', function (e) {\n\t\t\te.stopImmediatePropagation();\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'popup-close-all'\n\t\t\t});\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('view-popup-close');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3BvcHVwL3BvcHVwLWNsb3NlLnZpZXcuanM/YTgwOCJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaXRlbXMiLCJpZE5hbWUiLCJpZE51bSIsIl9hZGQiLCJlbGVtZW50IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImRpc3BhdGNoIiwidHlwZSIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImxlbmd0aCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxDQUFQLGtDQUEwQixVQUFTQSxVQUFULEVBQXFCOztBQUU5Qzs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUEsS0FBSUMsU0FBUyxpQkFBYjtBQUNBLEtBQUlDLFFBQVMsQ0FBYjs7QUFFQSxLQUFJQyxPQUFPLFNBQVBBLElBQU8sQ0FBU0gsS0FBVCxFQUFnQkksT0FBaEIsRUFBeUI7QUFDbkMsTUFBSUMsS0FBS0QsUUFBUUUsWUFBUixDQUFxQixTQUFyQixDQUFUOztBQUVBLE1BQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1JBLFFBQUtKLFNBQVNDLEtBQWQ7QUFDQUE7QUFDQTs7QUFFREUsVUFBUUcsZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsVUFBU0MsQ0FBVCxFQUFZO0FBQzdDQSxLQUFFQyx3QkFBRjs7QUFFQVYsY0FBV1csUUFBWCxDQUFvQjtBQUNuQkMsVUFBTTtBQURhLElBQXBCO0FBR0EsR0FORDs7QUFRQVgsUUFBTUssRUFBTixJQUFZO0FBQ1hBLE9BQUlBLEVBRE87QUFFWEQsWUFBU0E7QUFGRSxHQUFaO0FBSUEsRUFwQkQ7O0FBc0JBLEtBQUlRLFVBQVUsU0FBVkEsT0FBVSxDQUFTWixLQUFULEVBQWdCYSxJQUFoQixFQUFzQjtBQUNuQyxTQUFPYixNQUFNYSxLQUFLUixFQUFYLENBQVA7QUFDQSxFQUZEOztBQUlBLEtBQUlTLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJQyxRQUFKOztBQUVBLE1BQUlDLFFBQVEsU0FBUkEsS0FBUSxDQUFTaEIsS0FBVCxFQUFnQkksT0FBaEIsRUFBeUI7QUFDcEMsT0FBSWEsUUFBUSxLQUFaO0FBQ0EsUUFBSyxJQUFJWixFQUFULElBQWVMLEtBQWYsRUFBc0I7QUFDckIsUUFBSUEsTUFBTWtCLGNBQU4sQ0FBcUJiLEVBQXJCLENBQUosRUFBOEI7QUFDN0IsU0FBSUwsTUFBTUssRUFBTixFQUFVRCxPQUFWLEtBQXNCQSxPQUExQixFQUFtQztBQUNsQ2EsY0FBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxPQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNYZCxTQUFLSCxLQUFMLEVBQVlJLE9BQVo7QUFDQTtBQUNELEdBYkQ7O0FBZUEsTUFBSWUsWUFBWSxTQUFaQSxTQUFZLENBQVNuQixLQUFULEVBQWdCZSxRQUFoQixFQUEwQkYsSUFBMUIsRUFBZ0M7QUFDL0MsT0FBSVQsVUFBVVMsS0FBS1QsT0FBbkI7QUFDQSxPQUFJYSxRQUFVLEtBQWQ7O0FBRUEsUUFBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN6QyxRQUFJTCxTQUFTSyxDQUFULE1BQWdCUCxLQUFLVCxPQUF6QixFQUFrQztBQUNqQ2EsYUFBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEOztBQUVELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hMLFlBQVFaLEtBQVIsRUFBZWEsSUFBZjtBQUNBO0FBQ0QsR0FkRDs7QUFnQkFFLGFBQVdPLFNBQVNDLHNCQUFULENBQWdDLGtCQUFoQyxDQUFYO0FBQ0EsT0FBSyxJQUFJSCxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN6Q0osU0FBTWhCLEtBQU4sRUFBYWUsU0FBU0ssQ0FBVCxDQUFiO0FBQ0E7QUFDRCxPQUFLLElBQUlmLEVBQVQsSUFBZUwsS0FBZixFQUFzQjtBQUNyQixPQUFJQSxNQUFNa0IsY0FBTixDQUFxQmIsRUFBckIsQ0FBSixFQUE4QjtBQUM3QmMsY0FBVW5CLEtBQVYsRUFBaUJlLFFBQWpCLEVBQTJCZixNQUFNSyxFQUFOLENBQTNCO0FBQ0E7QUFDRDtBQUNELEVBM0NEOztBQTZDQSxLQUFJbUIsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDckJWOztBQUVBZixhQUFXMEIsU0FBWCxDQUFxQixVQUFTakIsQ0FBVCxFQUFZO0FBQ2hDLE9BQUlBLEVBQUVHLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCRztBQUNBO0FBQ0QsR0FKRDtBQUtBLEVBUkQ7O0FBVUEsUUFBTztBQUNOVSxRQUFNQTtBQURBLEVBQVA7QUFHQSxDQTdGRCIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0dmFyIGlkTmFtZSA9ICdwb3B1cC1jbG9zZS1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHRkaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHRcdFx0dHlwZTogJ3BvcHVwLWNsb3NlLWFsbCdcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0aXRlbXNbaWRdID0ge1xuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ZpZXctcG9wdXAtY2xvc2UnKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGVjayhpdGVtcywgZWxlbWVudHNbaV0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRiYWNrQ2hlY2soaXRlbXMsIGVsZW1lbnRzLCBpdGVtc1tpZF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZU11dGF0ZSgpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcG9wdXAvcG9wdXAtY2xvc2Uudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData().breakpoint.name;\n\t\tfor (var key in items) {\n\t\t\tif (storeData === \"mobile\") {\n\t\t\t\tvar width = 0;\n\t\t\t\tvar item = items[key].element.getElementsByClassName('item');\n\t\t\t\tfor (var i = 0; i < item.length; i++) {\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\twidth += item[i].offsetWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twidth += item[i].offsetWidth + 30;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titems[key].element.style.width = width + \"px\";\n\t\t\t} else {\n\t\t\t\titems[key].element.style.width = \"\";\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar license = document.getElementsByClassName('license')[0];\n\t\tif (!license) {\n\t\t\treturn;\n\t\t}\n\t\telements = license.getElementsByClassName('container');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL3dpZHRoLWxpY2Vuc2Uudmlldy5qcz9lMzExIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJzdG9yZSIsIml0ZW1zIiwiaWROYW1lIiwiaWROdW0iLCJfaGFuZGxlQ2hhbmdlIiwic3RvcmVEYXRhIiwiZ2V0RGF0YSIsImJyZWFrcG9pbnQiLCJuYW1lIiwia2V5Iiwid2lkdGgiLCJpdGVtIiwiZWxlbWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpIiwibGVuZ3RoIiwib2Zmc2V0V2lkdGgiLCJzdHlsZSIsIl9hZGQiLCJpZCIsImdldEF0dHJpYnV0ZSIsIl9yZW1vdmUiLCJfaGFuZGxlTXV0YXRlIiwiZWxlbWVudHMiLCJjaGVjayIsImZvdW5kIiwiaGFzT3duUHJvcGVydHkiLCJiYWNrQ2hlY2siLCJsaWNlbnNlIiwiZG9jdW1lbnQiLCJpbml0IiwiZXZlbnRFbWl0dGVyIiwic3Vic2NyaWJlIiwiZSIsInR5cGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxFQUFrQix1QkFBbEIsQ0FBUCxrQ0FBd0QsVUFBU0EsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEI7O0FBRW5GOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQTtBQUNBLEtBQUlDLFNBQVMsU0FBYjtBQUNBLEtBQUlDLFFBQVMsQ0FBYjs7QUFHQSxLQUFJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDOUIsTUFBSUMsWUFBWUwsTUFBTU0sT0FBTixHQUFnQkMsVUFBaEIsQ0FBMkJDLElBQTNDO0FBQ0EsT0FBSyxJQUFJQyxHQUFULElBQWdCUixLQUFoQixFQUF1QjtBQUN0QixPQUFJSSxjQUFjLFFBQWxCLEVBQTRCO0FBQzNCLFFBQUlLLFFBQVEsQ0FBWjtBQUNBLFFBQUlDLE9BQU9WLE1BQU1RLEdBQU4sRUFBV0csT0FBWCxDQUFtQkMsc0JBQW5CLENBQTBDLE1BQTFDLENBQVg7QUFDQSxT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QUFDN0JRLGNBQVUxQixLQUFWLEVBQWlCc0IsUUFBakIsRUFBMkJ0QixNQUFNa0IsRUFBTixDQUEzQjtBQUNBO0FBQ0Q7QUFDRDtBQUNBLEVBakREOztBQW1EQSxLQUFJVyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNyQlI7QUFDQWxCOztBQUVBSixRQUFNK0IsWUFBTixDQUFtQkMsU0FBbkIsQ0FBNkI1QixhQUE3Qjs7QUFFQUwsYUFBV2lDLFNBQVgsQ0FBcUIsVUFBU0MsQ0FBVCxFQUFZO0FBQ2hDLE9BQUlBLEVBQUVDLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCWjtBQUNBbEI7QUFDQTtBQUNELEdBTEQ7QUFNQSxFQVpEOztBQWNBLFFBQU87QUFDTjBCLFFBQU1BO0FBREEsRUFBUDtBQUdBLENBdkhEIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlcicsICcuLi9yZXNpemUvYnJlYWtwb2ludC5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCBzdG9yZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0Ly8hISFyZXBsYWNlIGlmIHNldHRpbmcgZGF0YS1hdHRyaWJ1dGUhXG5cdHZhciBpZE5hbWUgPSAnbmV3LWlkLSc7XG5cdHZhciBpZE51bSAgPSAxO1xuXG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RvcmVEYXRhID0gc3RvcmUuZ2V0RGF0YSgpLmJyZWFrcG9pbnQubmFtZTtcblx0XHRmb3IgKHZhciBrZXkgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChzdG9yZURhdGEgPT09IFwibW9iaWxlXCIpIHtcblx0XHRcdFx0dmFyIHdpZHRoID0gMDtcblx0XHRcdFx0dmFyIGl0ZW0gPSBpdGVtc1trZXldLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaXRlbScpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW0ubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoaSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0d2lkdGggKz0gaXRlbVtpXS5vZmZzZXRXaWR0aDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0d2lkdGggKz0gaXRlbVtpXS5vZmZzZXRXaWR0aCArIDMwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtc1trZXldLmVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zW2tleV0uZWxlbWVudC5zdHlsZS53aWR0aCA9IFwiXCI7XG5cdFx0XHR9XHRcblx0XHR9XG5cdH1cblxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXG5cdFx0XHQvL3NldEF0dHJpYnV0ZSgnZGF0YS1pZCcsIGlkKTtcblx0XHR9XG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRlbGVtZW50OiBlbGVtZW50XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fVxuXG5cdHZhciBfaGFuZGxlTXV0YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzO1xuXG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdGlmIChpdGVtc1tpZF0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9hZGQoaXRlbXMsIGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBiYWNrQ2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudHMsIGl0ZW0pIHtcblx0XHRcdHZhciBlbGVtZW50ID0gaXRlbS5lbGVtZW50O1xuXHRcdFx0dmFyIGZvdW5kICAgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHNbaV0gPT09IGl0ZW0uZWxlbWVudCkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9yZW1vdmUoaXRlbXMsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vLS0tLS0tLVxuXHRcdHZhciBsaWNlbnNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGljZW5zZScpWzBdO1xuXHRcdGlmICghbGljZW5zZSkge1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdGVsZW1lbnRzID0gbGljZW5zZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjb250YWluZXInKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGVjayhpdGVtcywgZWxlbWVudHNbaV0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRiYWNrQ2hlY2soaXRlbXMsIGVsZW1lbnRzLCBpdGVtc1tpZF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLy0tLS0tLS1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdF9oYW5kbGVDaGFuZ2UoKTtcblxuXHRcdHN0b3JlLmV2ZW50RW1pdHRlci5zdWJzY3JpYmUoX2hhbmRsZUNoYW5nZSk7XG5cblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS50eXBlID09PSAnbXV0YXRlJykge1xuXHRcdFx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0XHRcdF9oYW5kbGVDaGFuZ2UoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL3dpZHRoLWxpY2Vuc2Uudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar container;\n\tvar apiLoaded = false;\n\tvar lang;\n\n\tvar _build = function _build(container) {\n\t\tvar lat, lng, zoom;\n\t\tvar id;\n\t\tvar config, styles;\n\t\tvar map;\n\n\t\tid = container.id;\n\t\tlat = container.getAttribute('data-lat') || 0;\n\t\tlng = container.getAttribute('data-lng') || 0;\n\t\tzoom = parseInt(container.getAttribute('data-zoom')) || 2;\n\n\t\tstyles = [{ \"featureType\": \"landscape\", \"elementType\": \"labels\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"featureType\": \"transit\", \"elementType\": \"labels\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"featureType\": \"poi\", \"elementType\": \"labels\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"featureType\": \"water\", \"elementType\": \"labels\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"featureType\": \"road\", \"elementType\": \"labels.icon\", \"stylers\": [{ \"visibility\": \"off\" }] }, { \"stylers\": [{ \"hue\": \"#00aaff\" }, { \"saturation\": -100 }, { \"gamma\": 2.15 }, { \"lightness\": 12 }] }, { \"featureType\": \"road\", \"elementType\": \"labels.text.fill\", \"stylers\": [{ \"visibility\": \"on\" }, { \"lightness\": 24 }] }, { \"featureType\": \"road\", \"elementType\": \"geometry\", \"stylers\": [{ \"lightness\": 57 }] }];\n\n\t\tconfig = {\n\t\t\tzoom: zoom,\n\t\t\tscrollwheel: false,\n\t\t\tdisableDefaultUI: true,\n\t\t\tcenter: new google.maps.LatLng(lat, lng)\n\t\t};\n\n\t\tmap = new google.maps.Map(container, config);\n\n\t\tmap.setOptions({ styles: styles });\n\n\t\tcontainer.style.background = 'rgba(1, 3, 6, 1)';\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'map-initialized',\n\t\t\tmap: map\n\t\t});\n\t};\n\n\tvar _add = function _add(element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t\t// element.setAttribute('data-id', id);\n\t\t}\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar html = document.getElementsByTagName('html')[0];\n\t\tvar loadMaps = function loadMaps() {\n\t\t\tvar script;\n\n\t\t\tif (apiLoaded) {\n\t\t\t\t_build(container);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tapiLoaded = true;\n\n\t\t\tscript = document.createElement('script');\n\t\t\tscript.type = 'text/javascript';\n\t\t\tscript.src = 'https://www.google.com/jsapi?key=AIzaSyCIuYnYUScrpSJwCMtCUKM-9yVn8wT_QoM&callback=initLoader';\n\t\t\tscript.setAttribute('async', '');\n\t\t\tdocument.body.appendChild(script);\n\t\t};\n\n\t\tlang = html.getAttribute('lang');\n\n\t\tif (!lang) lang = 'ru';\n\n\t\tcontainer = document.getElementsByClassName('map-view')[0];\n\t\tif (!container) return;\n\n\t\tloadMaps();\n\t};\n\n\tvar _initMaps = function _initMaps() {\n\t\t_build(container);\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\twindow.initLoader = function () {\n\t\tgoogle.load(\"maps\", \"3.x\", { \"callback\": _initMaps, \"other_params\": \"sensor=false&language=\" + lang });\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(24), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, utils) {\n\n\t\"use strict\";\n\n\tvar map = false;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar map = store.getData().map;\n\t\tvar markers = document.getElementsByClassName('view-map-marker');\n\n\t\tvar add = function add(marker, i) {\n\t\t\tvar title;\n\t\t\tvar lat, lng, latLng;\n\t\t\tvar icon, marker;\n\t\t\tvar iconPath;\n\n\t\t\tlat = marker.getAttribute('data-lat');\n\t\t\tlng = marker.getAttribute('data-lng');\n\t\t\ttitle = marker.getAttribute('data-title');\n\n\t\t\tif (!lat || !lng) {\n\t\t\t\tconsole.warn('marker lat or/and lng is missing');\n\t\t\t}\n\n\t\t\tif (utils.getIE() !== -1) {\n\t\t\t\ticonPath = '/templates/asia-import.su/tmp/marker.png';\n\t\t\t} else {\n\t\t\t\ticonPath = '/templates/asia-import.su/tmp/marker.svg';\n\t\t\t}\n\n\t\t\ticon = {\n\t\t\t\turl: iconPath,\n\t\t\t\tsize: new google.maps.Size(27, 37),\n\t\t\t\torigin: new google.maps.Point(0, 0),\n\t\t\t\tanchor: new google.maps.Point(14, 37)\n\t\t\t};\n\n\t\t\tlatLng = new google.maps.LatLng(lat, lng);\n\n\t\t\tmarker = new google.maps.Marker({\n\t\t\t\tposition: latLng,\n\t\t\t\tmap: map,\n\t\t\t\ticon: icon,\n\t\t\t\ttitle: title\n\t\t\t});\n\t\t};\n\n\t\tif (!map) return;\n\n\t\tfor (var i = 0; i < markers.length; i++) {\n\t\t\tadd(markers[i], i);\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL21hcC9tYXAtbWFya2Vycy52aWV3LmpzP2Y2YzAiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsInN0b3JlIiwidXRpbHMiLCJtYXAiLCJfaGFuZGxlQ2hhbmdlIiwiZ2V0RGF0YSIsIm1hcmtlcnMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGQiLCJtYXJrZXIiLCJpIiwidGl0bGUiLCJsYXQiLCJsbmciLCJsYXRMbmciLCJpY29uIiwiaWNvblBhdGgiLCJnZXRBdHRyaWJ1dGUiLCJjb25zb2xlIiwid2FybiIsImdldElFIiwidXJsIiwic2l6ZSIsImdvb2dsZSIsIm1hcHMiLCJTaXplIiwib3JpZ2luIiwiUG9pbnQiLCJhbmNob3IiLCJMYXRMbmciLCJNYXJrZXIiLCJwb3NpdGlvbiIsImxlbmd0aCIsImluaXQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxFQUFrQix1QkFBbEIsRUFBaUMsc0JBQWpDLENBQVAsa0NBQXFELFVBQVNBLFVBQVQsRUFBcUJDLEtBQXJCLEVBQTRCQyxLQUE1QixFQUFtQzs7QUFFdkY7O0FBRUEsS0FBSUMsTUFBTSxLQUFWOztBQUVBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJRCxNQUFNRixNQUFNSSxPQUFOLEdBQWdCRixHQUExQjtBQUNBLE1BQUlHLFVBQVVDLFNBQVNDLHNCQUFULENBQWdDLGlCQUFoQyxDQUFkOztBQUVBLE1BQUlDLE1BQU0sU0FBTkEsR0FBTSxDQUFTQyxNQUFULEVBQWlCQyxDQUFqQixFQUFvQjtBQUM3QixPQUFJQyxLQUFKO0FBQ0EsT0FBSUMsR0FBSixFQUFTQyxHQUFULEVBQWNDLE1BQWQ7QUFDQSxPQUFJQyxJQUFKLEVBQVVOLE1BQVY7QUFDQSxPQUFJTyxRQUFKOztBQUdBSixTQUFRSCxPQUFPUSxZQUFQLENBQW9CLFVBQXBCLENBQVI7QUFDQUosU0FBUUosT0FBT1EsWUFBUCxDQUFvQixVQUFwQixDQUFSO0FBQ0FOLFdBQVFGLE9BQU9RLFlBQVAsQ0FBb0IsWUFBcEIsQ0FBUjs7QUFFQSxPQUFJLENBQUNMLEdBQUQsSUFBUSxDQUFDQyxHQUFiLEVBQWtCO0FBQ2pCSyxZQUFRQyxJQUFSLENBQWEsa0NBQWI7QUFDQTs7QUFFRCxPQUFJbEIsTUFBTW1CLEtBQU4sT0FBa0IsQ0FBQyxDQUF2QixFQUEwQjtBQUN6QkosZUFBVywwQ0FBWDtBQUNBLElBRkQsTUFFTztBQUNOQSxlQUFXLDBDQUFYO0FBQ0E7O0FBR0RELFVBQU87QUFDTk0sU0FBS0wsUUFEQztBQUVOTSxVQUFNLElBQUlDLE9BQU9DLElBQVAsQ0FBWUMsSUFBaEIsQ0FBcUIsRUFBckIsRUFBeUIsRUFBekIsQ0FGQTtBQUdOQyxZQUFRLElBQUlILE9BQU9DLElBQVAsQ0FBWUcsS0FBaEIsQ0FBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsQ0FIRjtBQUlOQyxZQUFRLElBQUlMLE9BQU9DLElBQVAsQ0FBWUcsS0FBaEIsQ0FBc0IsRUFBdEIsRUFBMEIsRUFBMUI7QUFKRixJQUFQOztBQU9BYixZQUFTLElBQUlTLE9BQU9DLElBQVAsQ0FBWUssTUFBaEIsQ0FBdUJqQixHQUF2QixFQUE0QkMsR0FBNUIsQ0FBVDs7QUFFQUosWUFBUyxJQUFJYyxPQUFPQyxJQUFQLENBQVlNLE1BQWhCLENBQXVCO0FBQy9CQyxjQUFVakIsTUFEcUI7QUFFL0JaLFNBQUtBLEdBRjBCO0FBRy9CYSxVQUFNQSxJQUh5QjtBQUkvQkosV0FBT0E7QUFKd0IsSUFBdkIsQ0FBVDtBQU1BLEdBckNEOztBQXVDQSxNQUFJLENBQUNULEdBQUwsRUFBVTs7QUFFVixPQUFLLElBQUlRLElBQUksQ0FBYixFQUFnQkEsSUFBSUwsUUFBUTJCLE1BQTVCLEVBQW9DdEIsR0FBcEMsRUFBeUM7QUFDeENGLE9BQUlILFFBQVFLLENBQVIsQ0FBSixFQUFnQkEsQ0FBaEI7QUFDQTtBQUNELEVBaEREOztBQWtEQSxLQUFJdUIsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDckI5Qjs7QUFFQUgsUUFBTWtDLFlBQU4sQ0FBbUJDLFNBQW5CLENBQTZCaEMsYUFBN0I7QUFDQSxFQUpEOztBQU1BLFFBQU87QUFDTjhCLFFBQU1BO0FBREEsRUFBUDtBQUdBLENBakVEIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlcicsICcuL21hcC5zdG9yZScsICcuLi91dGlscyddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCBzdG9yZSwgdXRpbHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgbWFwID0gZmFsc2U7XG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWFwID0gc3RvcmUuZ2V0RGF0YSgpLm1hcDtcblx0XHR2YXIgbWFya2VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ZpZXctbWFwLW1hcmtlcicpO1xuXG5cdFx0dmFyIGFkZCA9IGZ1bmN0aW9uKG1hcmtlciwgaSkge1xuXHRcdFx0dmFyIHRpdGxlO1xuXHRcdFx0dmFyIGxhdCwgbG5nLCBsYXRMbmc7XG5cdFx0XHR2YXIgaWNvbiwgbWFya2VyO1xuXHRcdFx0dmFyIGljb25QYXRoO1xuXG5cblx0XHRcdGxhdCAgID0gbWFya2VyLmdldEF0dHJpYnV0ZSgnZGF0YS1sYXQnKTtcblx0XHRcdGxuZyAgID0gbWFya2VyLmdldEF0dHJpYnV0ZSgnZGF0YS1sbmcnKTtcblx0XHRcdHRpdGxlID0gbWFya2VyLmdldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScpO1xuXG5cdFx0XHRpZiAoIWxhdCB8fCAhbG5nKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignbWFya2VyIGxhdCBvci9hbmQgbG5nIGlzIG1pc3NpbmcnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHV0aWxzLmdldElFKCkgIT09IC0xKSB7XG5cdFx0XHRcdGljb25QYXRoID0gJy90ZW1wbGF0ZXMvYXNpYS1pbXBvcnQuc3UvdG1wL21hcmtlci5wbmcnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWNvblBhdGggPSAnL3RlbXBsYXRlcy9hc2lhLWltcG9ydC5zdS90bXAvbWFya2VyLnN2Zyc7XG5cdFx0XHR9XG5cblxuXHRcdFx0aWNvbiA9IHtcblx0XHRcdFx0dXJsOiBpY29uUGF0aCxcblx0XHRcdFx0c2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMjcsIDM3KSxcblx0XHRcdFx0b3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG5cdFx0XHRcdGFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDE0LCAzNylcblx0XHRcdH1cblxuXHRcdFx0bGF0TG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsYXQsIGxuZyk7XG5cblx0XHRcdG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuXHRcdFx0XHRwb3NpdGlvbjogbGF0TG5nLFxuXHRcdFx0XHRtYXA6IG1hcCxcblx0XHRcdFx0aWNvbjogaWNvbixcblx0XHRcdFx0dGl0bGU6IHRpdGxlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIW1hcCkgcmV0dXJuO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhZGQobWFya2Vyc1tpXSwgaSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpIHtcblx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cblx0XHRzdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYW5kbGVDaGFuZ2UpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvbWFwL21hcC1tYXJrZXJzLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar map = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'map-initialized') {\n\t\t\tmap = e.map;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tmap: map\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL21hcC9tYXAuc3RvcmUuanM/YjQyOSJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaW5pdGlhbGl6ZWQiLCJtYXAiLCJfaGFuZGxlRXZlbnQiLCJlIiwidHlwZSIsImV2ZW50RW1pdHRlciIsImRpc3BhdGNoIiwiX2luaXQiLCJzdWJzY3JpYmUiLCJfaGFuZGxlcnMiLCJldmVudCIsImkiLCJsZW5ndGgiLCJoYW5kbGVyIiwicHVzaCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwiZ2V0RGF0YSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7QUFDOUM7O0FBRUEsS0FBSUMsY0FBYyxLQUFsQjtBQUNBLEtBQUlDLE1BQU0sS0FBVjs7QUFFQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsQ0FBVCxFQUFZO0FBQzlCLE1BQUlBLEVBQUVDLElBQUYsS0FBVyxpQkFBZixFQUFrQztBQUNqQ0gsU0FBTUUsRUFBRUYsR0FBUjs7QUFFQUksZ0JBQWFDLFFBQWIsQ0FBc0I7QUFDckJGLFVBQU07QUFEZSxJQUF0QjtBQUdBO0FBQ0QsRUFSRDs7QUFVQSxLQUFJRyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUN0QlIsYUFBV1MsU0FBWCxDQUFxQk4sWUFBckI7QUFDQSxFQUZEOztBQUlBLEtBQUlHLGVBQWUsWUFBVztBQUM3QixNQUFJSSxZQUFZLEVBQWhCOztBQUVBLE1BQUlILFdBQVcsU0FBWEEsUUFBVyxDQUFTSSxLQUFULEVBQWdCO0FBQzlCLFFBQUssSUFBSUMsSUFBSUYsVUFBVUcsTUFBVixHQUFtQixDQUFoQyxFQUFtQ0QsS0FBSyxDQUF4QyxFQUEyQ0EsR0FBM0MsRUFBZ0Q7QUFDL0NGLGNBQVVFLENBQVYsRUFBYUQsS0FBYjtBQUNBO0FBQ0QsR0FKRDtBQUtBLE1BQUlGLFlBQVksU0FBWkEsU0FBWSxDQUFTSyxPQUFULEVBQWtCO0FBQ2pDSixhQUFVSyxJQUFWLENBQWVELE9BQWY7QUFDQSxHQUZEO0FBR0EsTUFBSUUsY0FBYyxTQUFkQSxXQUFjLENBQVNGLE9BQVQsRUFBa0I7QUFDbkMsUUFBSyxJQUFJRixJQUFJLENBQWIsRUFBZ0JBLEtBQUtGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBeEMsRUFBMkNELEdBQTNDLEVBQWdEO0FBQy9DLFFBQUlGLFVBQVVFLENBQVYsS0FBZ0JFLE9BQXBCLEVBQTZCO0FBQzVCSixlQUFVTyxNQUFWLENBQWlCTCxHQUFqQixFQUFzQixDQUF0QjtBQUNBO0FBQ0Q7QUFDRCxHQU5EOztBQVFBLFNBQU87QUFDTkwsYUFBVUEsUUFESjtBQUVORSxjQUFXQSxTQUZMO0FBR05PLGdCQUFhQTtBQUhQLEdBQVA7QUFLQSxFQXhCa0IsRUFBbkI7O0FBMEJBLEtBQUlFLFVBQVUsU0FBVkEsT0FBVSxHQUFXO0FBQ3hCLFNBQU87QUFDTmhCLFFBQUtBO0FBREMsR0FBUDtBQUdBLEVBSkQ7O0FBTUEsS0FBSSxDQUFDRCxXQUFMLEVBQWtCO0FBQ2pCQSxnQkFBYyxJQUFkO0FBQ0FPO0FBQ0E7O0FBRUQsUUFBTztBQUNORixnQkFBY0EsWUFEUjtBQUVOWSxXQUFTQTtBQUZILEVBQVA7QUFJQSxDQTdERCIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0dmFyIG1hcCA9IGZhbHNlO1xuXG5cdHZhciBfaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUudHlwZSA9PT0gJ21hcC1pbml0aWFsaXplZCcpIHtcblx0XHRcdG1hcCA9IGUubWFwO1xuXG5cdFx0XHRldmVudEVtaXR0ZXIuZGlzcGF0Y2goe1xuXHRcdFx0XHR0eXBlOiAnY2hhbmdlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoX2hhbmRsZUV2ZW50KTtcblx0fVxuXG5cdHZhciBldmVudEVtaXR0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgX2hhbmRsZXJzID0gW107XG5cblx0XHR2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRfaGFuZGxlcnNbaV0oZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0X2hhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cdFx0fVxuXHRcdHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdFx0aWYgKF9oYW5kbGVyc1tpXSA9PSBoYW5kbGVyKSB7XG5cdFx0XHRcdFx0X2hhbmRsZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGRpc3BhdGNoOiBkaXNwYXRjaCxcblx0XHRcdHN1YnNjcmliZTogc3Vic2NyaWJlLFxuXHRcdFx0dW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG5cdFx0fVxuXHR9KCk7XG5cblx0dmFyIGdldERhdGEgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bWFwOiBtYXBcblx0XHR9XG5cdH1cblxuXHRpZiAoIWluaXRpYWxpemVkKSB7XG5cdFx0aW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdF9pbml0KCk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGV2ZW50RW1pdHRlcjogZXZlbnRFbWl0dGVyLFxuXHRcdGdldERhdGE6IGdldERhdGFcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9tYXAvbWFwLnN0b3JlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar map = false;\n\tvar controls;\n\tvar geolocated = false;\n\n\tvar _handleChange = function _handleChange(e) {\n\t\tmap = store.getData().map;\n\n\t\te.stopPropagation();\n\t\tvar el = e.currentTarget;\n\n\t\tvar lat = el.getAttribute('data-lat');\n\t\tvar lng = el.getAttribute('data-lng');\n\t\tvar zoom = el.getAttribute('data-zoom');\n\t\tvar latLng;\n\n\t\tzoom = parseInt(zoom);\n\n\t\tif (!lat || !lng) {\n\t\t\tconsole.warn('map-control coordinates are not specified');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!map) {\n\t\t\tconsole.log('map is not ready');\n\t\t\treturn;\n\t\t}\n\t\t// var id = el.getAttribute(\"data-map\");\n\t\t// if (id !== active) {\n\t\t// \tctrl[id].classList.add(\"active\");\n\t\t// \tctrl[active].classList.remove(\"active\");\n\n\t\t// \tactive = id;\n\t\t// }\n\n\t\tlatLng = new google.maps.LatLng(lat, lng);\n\n\t\tmap.setCenter(latLng);\n\n\t\tif (zoom) {\n\t\t\tmap.setZoom(zoom);\n\t\t}\n\t\t// map.panBy(-100, 140);\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-map');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\telement.addEventListener('click', _handleChange);\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('view-map-control');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tfor (var key in items) {\n\t\t\titems[key].element.classList.toggle('active');\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\telement.addEventListener('click', _handleChange);\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('head-agcy');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL21hcC9tYXAtY2hvaWNlLnZpZXcuanM/N2Y3OSJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaXRlbXMiLCJpZE5hbWUiLCJpZE51bSIsIl9oYW5kbGVDaGFuZ2UiLCJrZXkiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiX2FkZCIsImlkIiwiZ2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImxlbmd0aCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJzdWJzY3JpYmUiLCJlIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQTtBQUNBLEtBQUlDLFNBQVMsU0FBYjtBQUNBLEtBQUlDLFFBQVMsQ0FBYjs7QUFHQSxLQUFJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDOUIsT0FBSyxJQUFJQyxHQUFULElBQWdCSixLQUFoQixFQUF1QjtBQUN0QkEsU0FBTUksR0FBTixFQUFXQyxPQUFYLENBQW1CQyxTQUFuQixDQUE2QkMsTUFBN0IsQ0FBb0MsUUFBcEM7QUFDQTtBQUNELEVBSkQ7O0FBTUEsS0FBSUMsT0FBTyxTQUFQQSxJQUFPLENBQVNSLEtBQVQsRUFBZ0JLLE9BQWhCLEVBQXlCO0FBQ25DLE1BQUlJLEtBQUtKLFFBQVFLLFlBQVIsQ0FBcUIsU0FBckIsQ0FBVDs7QUFFQSxNQUFJLENBQUNELEVBQUwsRUFBUztBQUNSQSxRQUFLUixTQUFTQyxLQUFkO0FBQ0FBOztBQUVBO0FBQ0E7O0FBRURHLFVBQVFNLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDUixhQUFsQzs7QUFFQUgsUUFBTVMsRUFBTixJQUFZO0FBQ1hBLE9BQUlBLEVBRE87QUFFWEosWUFBU0E7QUFGRSxHQUFaO0FBSUEsRUFoQkQ7O0FBa0JBLEtBQUlPLFVBQVUsU0FBVkEsT0FBVSxDQUFTWixLQUFULEVBQWdCYSxJQUFoQixFQUFzQjtBQUNuQyxTQUFPYixNQUFNYSxLQUFLSixFQUFYLENBQVA7QUFDQSxFQUZEOztBQUlBLEtBQUlLLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJQyxRQUFKOztBQUVBLE1BQUlDLFFBQVEsU0FBUkEsS0FBUSxDQUFTaEIsS0FBVCxFQUFnQkssT0FBaEIsRUFBeUI7QUFDcEMsT0FBSVksUUFBUSxLQUFaO0FBQ0EsUUFBSyxJQUFJUixFQUFULElBQWVULEtBQWYsRUFBc0I7QUFDckIsUUFBSUEsTUFBTWtCLGNBQU4sQ0FBcUJULEVBQXJCLENBQUosRUFBOEI7QUFDN0IsU0FBSVQsTUFBTVMsRUFBTixFQUFVSixPQUFWLEtBQXNCQSxPQUExQixFQUFtQztBQUNsQ1ksY0FBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxPQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNYVCxTQUFLUixLQUFMLEVBQVlLLE9BQVo7QUFDQTtBQUNELEdBYkQ7O0FBZUEsTUFBSWMsWUFBWSxTQUFaQSxTQUFZLENBQVNuQixLQUFULEVBQWdCZSxRQUFoQixFQUEwQkYsSUFBMUIsRUFBZ0M7QUFDL0MsT0FBSVIsVUFBVVEsS0FBS1IsT0FBbkI7QUFDQSxPQUFJWSxRQUFVLEtBQWQ7O0FBRUEsUUFBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN6QyxRQUFJTCxTQUFTSyxDQUFULE1BQWdCUCxLQUFLUixPQUF6QixFQUFrQztBQUNqQ1ksYUFBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEOztBQUVELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hMLFlBQVFaLEtBQVIsRUFBZWEsSUFBZjtBQUNBO0FBQ0QsR0FkRDs7QUFnQkE7QUFDQUUsYUFBV08sU0FBU0Msc0JBQVQsQ0FBZ0MsV0FBaEMsQ0FBWDtBQUNBLE9BQUssSUFBSUgsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxTQUFTTSxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDekNKLFNBQU1oQixLQUFOLEVBQWFlLFNBQVNLLENBQVQsQ0FBYjtBQUNBO0FBQ0QsT0FBSyxJQUFJWCxFQUFULElBQWVULEtBQWYsRUFBc0I7QUFDckIsT0FBSUEsTUFBTWtCLGNBQU4sQ0FBcUJULEVBQXJCLENBQUosRUFBOEI7QUFDN0JVLGNBQVVuQixLQUFWLEVBQWlCZSxRQUFqQixFQUEyQmYsTUFBTVMsRUFBTixDQUEzQjtBQUNBO0FBQ0Q7QUFDRDtBQUNBLEVBN0NEOztBQStDQSxLQUFJZSxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNyQlY7O0FBRUFmLGFBQVcwQixTQUFYLENBQXFCLFVBQVNDLENBQVQsRUFBWTtBQUNoQyxPQUFJQSxFQUFFQyxJQUFGLEtBQVcsUUFBZixFQUF5QjtBQUN4QmI7QUFDQTtBQUNELEdBSkQ7QUFLQSxFQVJEOztBQVVBLFFBQU87QUFDTlUsUUFBTUE7QUFEQSxFQUFQO0FBR0EsQ0FuR0QiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi9kaXNwYXRjaGVyJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdC8vISEhcmVwbGFjZSBpZiBzZXR0aW5nIGRhdGEtYXR0cmlidXRlIVxuXHR2YXIgaWROYW1lID0gJ25ldy1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICh2YXIga2V5IGluIGl0ZW1zKSB7XG5cdFx0XHRpdGVtc1trZXldLmVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9oYW5kbGVDaGFuZ2UpXG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRlbGVtZW50OiBlbGVtZW50XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fVxuXG5cdHZhciBfaGFuZGxlTXV0YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzO1xuXG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdGlmIChpdGVtc1tpZF0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9hZGQoaXRlbXMsIGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBiYWNrQ2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudHMsIGl0ZW0pIHtcblx0XHRcdHZhciBlbGVtZW50ID0gaXRlbS5lbGVtZW50O1xuXHRcdFx0dmFyIGZvdW5kICAgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHNbaV0gPT09IGl0ZW0uZWxlbWVudCkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9yZW1vdmUoaXRlbXMsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vLS0tLS0tLVxuXHRcdGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaGVhZC1hZ2N5Jyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdtdXRhdGUnKSB7XG5cdFx0XHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL21hcC9tYXAtY2hvaWNlLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, bpStore) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'adaptive-image-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = bpStore.getData();\n\t\tvar bpName = storeData.breakpoint.name;\n\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tif (item.current === bpName) return;\n\t\t\tif (!item.sources.hasOwnProperty(bpName)) {\n\t\t\t\tconsole.warn('no source image for breakpoint ' + bpName);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\titem.current = bpName;\n\n\t\t\tif (item.element.tagName.toLowerCase() === 'img') {\n\t\t\t\tif (!item.listener) {\n\t\t\t\t\titem.listener = true;\n\t\t\t\t\titem.element.addEventListener('load', function () {\n\t\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\t\ttype: 'adaptive-image-load',\n\t\t\t\t\t\t\tid: item.id\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\titem.element.src = item.sources[bpName];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (item.element.tagName.toLowerCase() !== 'img') {\n\t\t\t\tif (!item.img) {\n\t\t\t\t\titem.img = document.createElement('img');\n\t\t\t\t}\n\t\t\t\tif (!item.listener) {\n\t\t\t\t\titem.listener = true;\n\t\t\t\t\titem.img.addEventListener('load', function () {\n\t\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\t\ttype: 'adaptive-image-load',\n\t\t\t\t\t\t\tid: item.id\n\t\t\t\t\t\t});\n\t\t\t\t\t\titem.element.style.backgroundImage = 'url(' + item.sources[bpName] + ')';\n\t\t\t\t\t});\n\t\t\t\t\titem.img.src = item.sources[bpName];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tcheckItem(items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-preload-id');\n\n\t\tvar desktop = element.getAttribute('data-desktop-src');\n\t\tvar tablet = element.getAttribute('data-tablet-src');\n\t\tvar mobile = element.getAttribute('data-mobile-src');\n\n\t\tif (!tablet) {\n\t\t\ttablet = desktop;\n\t\t}\n\t\tif (!mobile) {\n\t\t\tmobile = tablet;\n\t\t}\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t\telement.setAttribute('data-preload-id', id);\n\t\t}\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'adaptive-image-add',\n\t\t\tid: id\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tlistener: false,\n\t\t\tfakeImg: false,\n\t\t\tsources: {\n\t\t\t\tdesktop: desktop,\n\t\t\t\ttablet: tablet,\n\t\t\t\tmobile: mobile\n\t\t\t},\n\t\t\tcurrent: false\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'adaptive-image-remove',\n\t\t\tid: item.id\n\t\t});\n\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('adaptive-image');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tbpStore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(29)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'processed-link-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange(storeData) {\n\t\tvar href;\n\t\tvar id;\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tif (href === item.element.href) {\n\t\t\t\titem.element.classList.add('link-active');\n\t\t\t} else {\n\t\t\t\titem.element.classList.remove('link-active');\n\t\t\t}\n\t\t};\n\n\t\tstoreData = store.getData();\n\t\thref = storeData.href;\n\t\tid = storeData.id;\n\n\t\tfor (var key in items) {\n\t\t\tif (items.hasOwnProperty(key)) {\n\t\t\t\tcheckItem(items[key]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar animation = element.getAttribute('data-animation');\n\t\tvar href = element.getAttribute('href');\n\t\t// var scroll = element.getAttribute('data-scroll');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\t// if (!animation) animation = 'simple';\n\t\t// if (!scroll || scroll === 'false') {\n\t\t// \tscroll = false;\n\t\t// } else {\n\t\t// \tscroll = true;\n\t\t// }\n\n\t\telement.addEventListener('click', function (e) {\n\t\t\tvar href = element.href;\n\t\t\te.preventDefault();\n\n\t\t\tif (href === location.href) return;\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'link-animation-start',\n\t\t\t\tid: id,\n\t\t\t\tanimation: animation,\n\t\t\t\tme: 'links-view'\n\t\t\t});\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'route-change',\n\t\t\t\thref: href,\n\t\t\t\tme: 'links-view',\n\t\t\t\tid: id\n\t\t\t});\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tanimation: animation\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('inner-link');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar href = false;\n\tvar id = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'route-change') {\n\t\t\t// if (href === e.href) return;\n\n\t\t\thref = e.href;\n\t\t\tid = e.id;\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\thref = location.href;\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\thref: href,\n\t\t\tid: id\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3JvdXRlci9yb3V0ZXIuc3RvcmUuanM/Nzc3ZiJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaW5pdGlhbGl6ZWQiLCJocmVmIiwiaWQiLCJfaGFuZGxlRXZlbnQiLCJlIiwidHlwZSIsImV2ZW50RW1pdHRlciIsImRpc3BhdGNoIiwiX2luaXQiLCJsb2NhdGlvbiIsInN1YnNjcmliZSIsIl9oYW5kbGVycyIsImV2ZW50IiwiaSIsImxlbmd0aCIsImhhbmRsZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJnZXREYXRhIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsQ0FBUCxrQ0FBMEIsVUFBU0EsVUFBVCxFQUFxQjs7QUFFOUM7O0FBRUEsS0FBSUMsY0FBYyxLQUFsQjtBQUNBLEtBQUlDLE9BQU8sS0FBWDtBQUNBLEtBQUlDLEtBQUssS0FBVDs7QUFFQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsQ0FBVCxFQUFZO0FBQzlCLE1BQUlBLEVBQUVDLElBQUYsS0FBVyxjQUFmLEVBQStCO0FBQzlCOztBQUVBSixVQUFPRyxFQUFFSCxJQUFUO0FBQ0FDLFFBQUtFLEVBQUVGLEVBQVA7QUFDQUksZ0JBQWFDLFFBQWI7QUFDQTtBQUNELEVBUkQ7O0FBVUEsS0FBSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDdEJQLFNBQU9RLFNBQVNSLElBQWhCO0FBQ0FGLGFBQVdXLFNBQVgsQ0FBcUJQLFlBQXJCO0FBQ0EsRUFIRDs7QUFLQSxLQUFJRyxlQUFlLFlBQVc7QUFDN0IsTUFBSUssWUFBWSxFQUFoQjs7QUFFQSxNQUFJSixXQUFXLFNBQVhBLFFBQVcsQ0FBU0ssS0FBVCxFQUFnQjtBQUM5QixRQUFLLElBQUlDLElBQUlGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkNBLEdBQTNDLEVBQWdEO0FBQy9DRixjQUFVRSxDQUFWLEVBQWFELEtBQWI7QUFDQTtBQUNELEdBSkQ7QUFLQSxNQUFJRixZQUFZLFNBQVpBLFNBQVksQ0FBU0ssT0FBVCxFQUFrQjtBQUNqQ0osYUFBVUssSUFBVixDQUFlRCxPQUFmO0FBQ0EsR0FGRDtBQUdBLE1BQUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTRixPQUFULEVBQWtCO0FBQ25DLFFBQUssSUFBSUYsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixVQUFVRyxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJRixVQUFVRSxDQUFWLEtBQWdCRSxPQUFwQixFQUE2QjtBQUM1QkosZUFBVU8sTUFBVixDQUFpQkwsR0FBakIsRUFBc0IsQ0FBdEI7QUFDQTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05OLGFBQVVBLFFBREo7QUFFTkcsY0FBV0EsU0FGTDtBQUdOTyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ05sQixTQUFNQSxJQURBO0FBRU5DLE9BQUlBO0FBRkUsR0FBUDtBQUlBLEVBTEQ7O0FBT0EsS0FBSSxDQUFDRixXQUFMLEVBQWtCO0FBQ2pCQSxnQkFBYyxJQUFkO0FBQ0FRO0FBQ0E7O0FBRUQsUUFBTztBQUNORixnQkFBY0EsWUFEUjtBQUVOYSxXQUFTQTtBQUZILEVBQVA7QUFJQSxDQWpFRCIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuXHR2YXIgaHJlZiA9IGZhbHNlO1xuXHR2YXIgaWQgPSBmYWxzZTtcblxuXHR2YXIgX2hhbmRsZUV2ZW50ID0gZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnR5cGUgPT09ICdyb3V0ZS1jaGFuZ2UnKSB7XG5cdFx0XHQvLyBpZiAoaHJlZiA9PT0gZS5ocmVmKSByZXR1cm47XG5cblx0XHRcdGhyZWYgPSBlLmhyZWY7XG5cdFx0XHRpZCA9IGUuaWQ7XG5cdFx0XHRldmVudEVtaXR0ZXIuZGlzcGF0Y2goKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcblx0XHRocmVmID0gbG9jYXRpb24uaHJlZjtcblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShfaGFuZGxlRXZlbnQpO1xuXHR9XG5cblx0dmFyIGV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBfaGFuZGxlcnMgPSBbXTtcblxuXHRcdHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRmb3IgKHZhciBpID0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdF9oYW5kbGVyc1tpXShldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBzdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRfaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblx0XHR9XG5cdFx0dmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0XHRpZiAoX2hhbmRsZXJzW2ldID09IGhhbmRsZXIpIHtcblx0XHRcdFx0XHRfaGFuZGxlcnMuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZGlzcGF0Y2g6IGRpc3BhdGNoLFxuXHRcdFx0c3Vic2NyaWJlOiBzdWJzY3JpYmUsXG5cdFx0XHR1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcblx0XHR9XG5cdH0oKTtcblxuXHR2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRocmVmOiBocmVmLFxuXHRcdFx0aWQ6IGlkXG5cdFx0fVxuXHR9XG5cblx0aWYgKCFpbml0aWFsaXplZCkge1xuXHRcdGluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRfaW5pdCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcixcblx0XHRnZXREYXRhOiBnZXREYXRhXG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcm91dGVyL3JvdXRlci5zdG9yZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(29), __webpack_require__(5), __webpack_require__(31)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, routerStore, scrollStore, transitionStore) {\n\n\t\"use strict\";\n\n\tvar currentHref = false;\n\tvar currentChangeType = 'normal';\n\n\tvar _handleChange = function _handleChange(storeData) {\n\t\tstoreData = routerStore.getData();\n\n\t\tconsole.log(currentChangeType);\n\n\t\tif (currentChangeType === 'history') {\n\t\t\tcurrentChangeType = 'normal';\n\t\t\treturn;\n\t\t}\n\n\t\tif (!currentHref) {\n\t\t\tcurrentHref = storeData.href;\n\t\t\thistory.replaceState({\n\t\t\t\thref: currentHref\n\t\t\t}, false, currentHref);\n\t\t\treturn;\n\t\t}\n\n\t\t// if (currentHref === storeData.href) return;\n\t\tcurrentHref = storeData.href;\n\n\t\tif (!Modernizr.history) return;\n\n\t\thistory.pushState({\n\t\t\thref: currentHref\n\t\t}, false, currentHref);\n\t};\n\n\tvar _handlePopState = function _handlePopState(event) {\n\t\tvar scrolled = scrollStore.getData().top;\n\t\tvar transitionData = transitionStore.getData();\n\t\tvar href = event.state;\n\t\tif (!event.state) return;\n\t\thref = href.href;\n\t\t//наебем систему. после нативного скролла скроллим обратно\n\t\twindow.scrollTo(0, scrolled);\n\t\tsetTimeout(function () {\n\t\t\twindow.scrollTo(0, scrolled);\n\t\t}, 0);\n\n\t\tif (typeof href === 'undefined') {\n\t\t\tlocation.reload();\n\t\t}\n\n\t\tif (transitionData.step1ready === false && transitionData.step2ready === false) {\n\t\t\tcurrentChangeType = 'history';\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'link-animation-start',\n\t\t\t\tanimation: 'simple',\n\t\t\t\tscroll: 0,\n\t\t\t\tme: 'history-view'\n\t\t\t});\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'route-change',\n\t\t\t\thref: href,\n\t\t\t\tme: 'history-view'\n\t\t\t});\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleChange();\n\n\t\trouterStore.eventEmitter.subscribe(_handleChange);\n\n\t\twindow.onpopstate = _handlePopState;\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3JvdXRlci9oaXN0b3J5LnZpZXcuanM/MmNlMyJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwicm91dGVyU3RvcmUiLCJzY3JvbGxTdG9yZSIsInRyYW5zaXRpb25TdG9yZSIsImN1cnJlbnRIcmVmIiwiY3VycmVudENoYW5nZVR5cGUiLCJfaGFuZGxlQ2hhbmdlIiwic3RvcmVEYXRhIiwiZ2V0RGF0YSIsImNvbnNvbGUiLCJsb2ciLCJocmVmIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsIk1vZGVybml6ciIsInB1c2hTdGF0ZSIsIl9oYW5kbGVQb3BTdGF0ZSIsImV2ZW50Iiwic2Nyb2xsZWQiLCJ0b3AiLCJ0cmFuc2l0aW9uRGF0YSIsInN0YXRlIiwid2luZG93Iiwic2Nyb2xsVG8iLCJzZXRUaW1lb3V0IiwibG9jYXRpb24iLCJyZWxvYWQiLCJzdGVwMXJlYWR5Iiwic3RlcDJyZWFkeSIsImRpc3BhdGNoIiwidHlwZSIsImFuaW1hdGlvbiIsInNjcm9sbCIsIm1lIiwiaW5pdCIsImV2ZW50RW1pdHRlciIsInN1YnNjcmliZSIsIm9ucG9wc3RhdGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxFQUFrQix1QkFBbEIsRUFBb0Msc0JBQXBDLEVBQThELHVCQUE5RCxDQUFQLGtDQUFrSCxVQUFTQSxVQUFULEVBQXFCQyxXQUFyQixFQUFrQ0MsV0FBbEMsRUFBK0NDLGVBQS9DLEVBQWdFOztBQUVqTDs7QUFFQSxLQUFJQyxjQUFjLEtBQWxCO0FBQ0EsS0FBSUMsb0JBQW9CLFFBQXhCOztBQUVBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUN2Q0EsY0FBWU4sWUFBWU8sT0FBWixFQUFaOztBQUVBQyxVQUFRQyxHQUFSLENBQVlMLGlCQUFaOztBQUVBLE1BQUlBLHNCQUFzQixTQUExQixFQUFxQztBQUNwQ0EsdUJBQW9CLFFBQXBCO0FBQ0E7QUFDQTs7QUFFRCxNQUFJLENBQUNELFdBQUwsRUFBa0I7QUFDakJBLGlCQUFjRyxVQUFVSSxJQUF4QjtBQUNBQyxXQUFRQyxZQUFSLENBQXFCO0FBQ3BCRixVQUFNUDtBQURjLElBQXJCLEVBRUcsS0FGSCxFQUVVQSxXQUZWO0FBR0E7QUFDQTs7QUFFRDtBQUNBQSxnQkFBY0csVUFBVUksSUFBeEI7O0FBRUEsTUFBSSxDQUFDRyxVQUFVRixPQUFmLEVBQXdCOztBQUV4QkEsVUFBUUcsU0FBUixDQUFrQjtBQUNqQkosU0FBTVA7QUFEVyxHQUFsQixFQUVHLEtBRkgsRUFFVUEsV0FGVjtBQUdBLEVBMUJEOztBQTRCQSxLQUFJWSxrQkFBa0IsU0FBbEJBLGVBQWtCLENBQVNDLEtBQVQsRUFBZ0I7QUFDckMsTUFBSUMsV0FBV2hCLFlBQVlNLE9BQVosR0FBc0JXLEdBQXJDO0FBQ0EsTUFBSUMsaUJBQWlCakIsZ0JBQWdCSyxPQUFoQixFQUFyQjtBQUNBLE1BQUlHLE9BQU9NLE1BQU1JLEtBQWpCO0FBQ0EsTUFBSSxDQUFDSixNQUFNSSxLQUFYLEVBQWtCO0FBQ2xCVixTQUFPQSxLQUFLQSxJQUFaO0FBQ0E7QUFDQVcsU0FBT0MsUUFBUCxDQUFnQixDQUFoQixFQUFtQkwsUUFBbkI7QUFDQU0sYUFBVyxZQUFXO0FBQ3JCRixVQUFPQyxRQUFQLENBQWdCLENBQWhCLEVBQW1CTCxRQUFuQjtBQUNBLEdBRkQsRUFFRyxDQUZIOztBQUlBLE1BQUksT0FBT1AsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUNoQ2MsWUFBU0MsTUFBVDtBQUNBOztBQUVELE1BQUlOLGVBQWVPLFVBQWYsS0FBOEIsS0FBOUIsSUFBdUNQLGVBQWVRLFVBQWYsS0FBOEIsS0FBekUsRUFBZ0Y7QUFDL0V2Qix1QkFBb0IsU0FBcEI7O0FBRUFMLGNBQVc2QixRQUFYLENBQW9CO0FBQ25CQyxVQUFNLHNCQURhO0FBRW5CQyxlQUFXLFFBRlE7QUFHbkJDLFlBQVEsQ0FIVztBQUluQkMsUUFBSTtBQUplLElBQXBCO0FBTUFqQyxjQUFXNkIsUUFBWCxDQUFvQjtBQUNuQkMsVUFBTSxjQURhO0FBRW5CbkIsVUFBTUEsSUFGYTtBQUduQnNCLFFBQUk7QUFIZSxJQUFwQjtBQUtBO0FBQ0QsRUEvQkQ7O0FBaUNBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCNUI7O0FBRUFMLGNBQVlrQyxZQUFaLENBQXlCQyxTQUF6QixDQUFtQzlCLGFBQW5DOztBQUVBZ0IsU0FBT2UsVUFBUCxHQUFvQnJCLGVBQXBCO0FBQ0EsRUFORDs7QUFRQSxRQUFPO0FBQ05rQixRQUFNQTtBQURBLEVBQVA7QUFHQSxDQS9FRCIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi9yb3V0ZXIuc3RvcmUnLCAnLi4vc2Nyb2xsL3Njcm9sbC5zdG9yZScsICcuLi9wYWdlLXRyYW5zaXRpb24vcGFnZS10cmFuc2l0aW9uLnN0b3JlJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIsIHJvdXRlclN0b3JlLCBzY3JvbGxTdG9yZSwgdHJhbnNpdGlvblN0b3JlKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGN1cnJlbnRIcmVmID0gZmFsc2U7XG5cdHZhciBjdXJyZW50Q2hhbmdlVHlwZSA9ICdub3JtYWwnO1xuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oc3RvcmVEYXRhKSB7XG5cdFx0c3RvcmVEYXRhID0gcm91dGVyU3RvcmUuZ2V0RGF0YSgpO1xuXG5cdFx0Y29uc29sZS5sb2coY3VycmVudENoYW5nZVR5cGUpO1xuXG5cdFx0aWYgKGN1cnJlbnRDaGFuZ2VUeXBlID09PSAnaGlzdG9yeScpIHtcblx0XHRcdGN1cnJlbnRDaGFuZ2VUeXBlID0gJ25vcm1hbCc7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFjdXJyZW50SHJlZikge1xuXHRcdFx0Y3VycmVudEhyZWYgPSBzdG9yZURhdGEuaHJlZjtcblx0XHRcdGhpc3RvcnkucmVwbGFjZVN0YXRlKHtcblx0XHRcdFx0aHJlZjogY3VycmVudEhyZWZcblx0XHRcdH0sIGZhbHNlLCBjdXJyZW50SHJlZik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gaWYgKGN1cnJlbnRIcmVmID09PSBzdG9yZURhdGEuaHJlZikgcmV0dXJuO1xuXHRcdGN1cnJlbnRIcmVmID0gc3RvcmVEYXRhLmhyZWY7XG5cblx0XHRpZiAoIU1vZGVybml6ci5oaXN0b3J5KSByZXR1cm47XG5cblx0XHRoaXN0b3J5LnB1c2hTdGF0ZSh7XG5cdFx0XHRocmVmOiBjdXJyZW50SHJlZlxuXHRcdH0sIGZhbHNlLCBjdXJyZW50SHJlZik7XG5cdH1cblxuXHR2YXIgX2hhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgc2Nyb2xsZWQgPSBzY3JvbGxTdG9yZS5nZXREYXRhKCkudG9wO1xuXHRcdHZhciB0cmFuc2l0aW9uRGF0YSA9IHRyYW5zaXRpb25TdG9yZS5nZXREYXRhKCk7XG5cdFx0dmFyIGhyZWYgPSBldmVudC5zdGF0ZTtcblx0XHRpZiAoIWV2ZW50LnN0YXRlKSByZXR1cm47XG5cdFx0aHJlZiA9IGhyZWYuaHJlZjtcblx0XHQvL9C90LDQtdCx0LXQvCDRgdC40YHRgtC10LzRgy4g0L/QvtGB0LvQtSDQvdCw0YLQuNCy0L3QvtCz0L4g0YHQutGA0L7Qu9C70LAg0YHQutGA0L7Qu9C70LjQvCDQvtCx0YDQsNGC0L3QvlxuXHRcdHdpbmRvdy5zY3JvbGxUbygwLCBzY3JvbGxlZCk7XG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5zY3JvbGxUbygwLCBzY3JvbGxlZCk7XG5cdFx0fSwgMCk7XG5cblx0XHRpZiAodHlwZW9mIGhyZWYgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRsb2NhdGlvbi5yZWxvYWQoKTtcblx0XHR9XG5cblx0XHRpZiAodHJhbnNpdGlvbkRhdGEuc3RlcDFyZWFkeSA9PT0gZmFsc2UgJiYgdHJhbnNpdGlvbkRhdGEuc3RlcDJyZWFkeSA9PT0gZmFsc2UpIHtcblx0XHRcdGN1cnJlbnRDaGFuZ2VUeXBlID0gJ2hpc3RvcnknO1xuXG5cdFx0XHRkaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHRcdFx0dHlwZTogJ2xpbmstYW5pbWF0aW9uLXN0YXJ0Jyxcblx0XHRcdFx0YW5pbWF0aW9uOiAnc2ltcGxlJyxcblx0XHRcdFx0c2Nyb2xsOiAwLFxuXHRcdFx0XHRtZTogJ2hpc3Rvcnktdmlldydcblx0XHRcdH0pO1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdyb3V0ZS1jaGFuZ2UnLFxuXHRcdFx0XHRocmVmOiBocmVmLFxuXHRcdFx0XHRtZTogJ2hpc3Rvcnktdmlldydcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZUNoYW5nZSgpO1xuXG5cdFx0cm91dGVyU3RvcmUuZXZlbnRFbWl0dGVyLnN1YnNjcmliZShfaGFuZGxlQ2hhbmdlKTtcblxuXHRcdHdpbmRvdy5vbnBvcHN0YXRlID0gX2hhbmRsZVBvcFN0YXRlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcm91dGVyL2hpc3Rvcnkudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar step1counter = 0;\n\tvar step2counter = 0;\n\tvar step1total = 2;\n\tvar step2total = 3;\n\tvar step1ready = false;\n\tvar step2ready = false;\n\tvar animation = false;\n\tvar scheme = 'light';\n\tvar pageNameId = false;\n\tvar text = '';\n\tvar projectText = '';\n\tvar color = 'ffffff';\n\tvar id = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'transition-step-1') {\n\t\t\tstep1counter++;\n\t\t\tif (e.hasOwnProperty('animation') && e.animation !== false) {\n\t\t\t\tanimation = e.animation;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('id') && e.id !== false) {\n\t\t\t\tid = e.id;\n\t\t\t}\n\t\t\tif (step1counter >= step1total) {\n\t\t\t\tstep1ready = true;\n\t\t\t\teventEmitter.dispatch();\n\t\t\t}\n\t\t}\n\t\tif (e.type === 'transition-step-2') {\n\t\t\tif (step1counter < step1total) return;\n\n\t\t\tstep2counter++;\n\t\t\tif (e.hasOwnProperty('animation') && e.animation !== false) {\n\t\t\t\tanimation = e.animation;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('scheme') && e.scheme !== false) {\n\t\t\t\tscheme = e.scheme;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('pageNameId') && e.pageNameId !== false) {\n\t\t\t\tpageNameId = e.pageNameId;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('text') && e.pageNameId !== text) {\n\t\t\t\ttext = e.text;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('color') && e.color !== false) {\n\t\t\t\tcolor = e.color;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('projectText') && e.projectText !== false) {\n\t\t\t\tprojectText = e.projectText;\n\t\t\t}\n\t\t\tif (e.hasOwnProperty('id') && e.id !== false) {\n\t\t\t\tid = e.id;\n\t\t\t}\n\t\t\tif (step2counter >= step2total) {\n\t\t\t\tstep2ready = true;\n\t\t\t\teventEmitter.dispatch();\n\t\t\t}\n\t\t}\n\t\tif (e.type === 'transition-step-reset') {\n\t\t\tstep1counter = 0;\n\t\t\tstep2counter = 0;\n\t\t\tstep1ready = false;\n\t\t\tstep2ready = false;\n\t\t\tanimation = false;\n\t\t\tid = false;\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tstep1ready: step1ready,\n\t\t\tstep2ready: step2ready,\n\t\t\tanimation: animation,\n\t\t\tscheme: scheme,\n\t\t\tpageNameId: pageNameId,\n\t\t\ttext: text,\n\t\t\tcolor: color,\n\t\t\tprojectText: projectText\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(29), __webpack_require__(31), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, routerStore, transitionsStore, utils) {\n\t\"use strict\";\n\n\tvar idName = 'replaceable-id-';\n\tvar idNum = 1;\n\n\tvar replaceable = {};\n\tvar responce = false;\n\tvar asia;\n\tvar pw;\n\tvar header;\n\tvar footer;\n\n\t//step1\n\tvar _handleRouteChange = function _handleRouteChange(storeData) {\n\t\tstoreData = routerStore.getData();\n\n\t\tvar data = new FormData();\n\t\tif (!storeData.href) return;\n\n\t\tutils.ajax.send(storeData.href, function (rs) {\n\t\t\tresponce = rs;\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'transition-step-1'\n\t\t\t});\n\t\t}, 'GET', data, true);\n\t};\n\n\t//step2\n\tvar _replace = function _replace() {\n\t\tvar div;\n\t\tvar newContainers = [];\n\t\tvar pageName;\n\t\tvar shadow;\n\t\tvar headerStyle;\n\t\tvar footerStyle;\n\t\tvar title, titleValue;\n\t\tvar active;\n\t\tvar menuDiv;\n\t\tvar repls;\n\t\tvar page;\n\n\t\tvar _replaceContainer = function _replaceContainer(newContainer) {\n\t\t\twindow.scrollTo(0, 0);\n\t\t\tvar id = newContainer.getAttribute('data-id');\n\t\t\tif (!id) {\n\t\t\t\tconsole.warn('data-id attribute is missing');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!replaceable.hasOwnProperty(id)) {\n\t\t\t\tconsole.warn('container with id ' + id + ' is missing');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (page) {\n\t\t\t\treplaceable[id].conatainer.setAttribute('data-page', page);\n\t\t\t} else {\n\t\t\t\treplaceable[id].conatainer.setAttribute('data-page', \"\");\n\t\t\t}\n\n\t\t\treplaceable[id].conatainer.innerHTML = newContainer.innerHTML;\n\t\t};\n\n\t\tif (!responce) return;;\n\n\t\tdiv = document.createElement('div');\n\n\t\tdiv.innerHTML = responce;\n\t\tnewContainers = div.getElementsByClassName('replaceable');\n\t\tpageName = div.getElementsByClassName('asia')[0];\n\t\ttitle = div.getElementsByTagName('title')[0];\n\t\ttitleValue = title.innerHTML;\n\t\tshadow = div.querySelector('page-wrapper shadow');\n\t\theaderStyle = div.getElementsByClassName('wh')[0];\n\t\tfooterStyle = div.getElementsByTagName('footer')[0];\n\t\trepls = div.getElementsByClassName('replaceable')[0];\n\t\tpage = repls.getAttribute('data-page');\n\n\t\tdocument.title = titleValue;\n\n\t\tif (!pageName) {\n\t\t\tconsole.warn('page-names elements are missing');\n\t\t}\n\t\tif (!title) {\n\t\t\tconsole.warn('title element is missing');\n\t\t}\n\n\t\tasia.innerHTML = pageName.innerHTML;\n\t\tif (shadow) {\n\t\t\tpw.classList.add('shadow');\n\t\t} else {\n\t\t\tpw.classList.remove('shadow');\n\t\t}\n\t\tif (headerStyle) {\n\t\t\theader.classList.add('wh');\n\t\t} else {\n\t\t\theader.classList.remove('wh');\n\t\t}\n\t\tif (!footerStyle.getAttribute(\"data-active\")) {\n\t\t\tfooter.style.display = \"block\";\n\t\t} else {\n\t\t\tfooter.style.display = \"none\";\n\t\t}\n\n\t\tfor (var i = 0; i < newContainers.length; i++) {\n\t\t\t_replaceContainer(newContainers[i]);\n\t\t}\n\n\t\tsetTimeout(function () {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'transition-step-2'\n\t\t\t});\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'mutate'\n\t\t\t});\n\t\t}, 20);\n\t};\n\n\t//step3\n\tvar _reset = function _reset() {\n\t\tresponce = false;\n\t};\n\n\tvar _add = function _add(conatainer) {\n\t\tvar id = conatainer.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t\tconatainer.setAttribute('data-id', id);\n\t\t}\n\n\t\treplaceable[id] = {\n\t\t\tid: id,\n\t\t\tconatainer: conatainer\n\t\t};\n\t};\n\n\tvar _handleSteps = function _handleSteps() {\n\t\tvar storeData = transitionsStore.getData();\n\t\tif (storeData.step1ready === true && storeData.step2ready === false) {\n\t\t\t_replace();\n\t\t}\n\t\tif (storeData.step1ready === true && storeData.step2ready === true) {\n\t\t\t_reset();\n\t\t}\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar containers = document.getElementsByClassName('replaceable');\n\t\tfor (var i = 0; i < containers.length; i++) {\n\t\t\t_add(containers[i]);\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\tasia = document.getElementsByClassName('asia')[0];\n\t\tpw = document.getElementsByClassName('page-wrapper')[0];\n\t\theader = document.getElementsByTagName('header')[0];\n\t\tfooter = document.getElementsByTagName('footer')[0];\n\n\t\t_handleMutate();\n\t\ttransitionsStore.eventEmitter.subscribe(_handleSteps);\n\t\trouterStore.eventEmitter.subscribe(_handleRouteChange);\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(31), __webpack_require__(8), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, resizeStore, utils) {\n\n\t\"use strict\";\n\n\tvar body;\n\n\tvar idName = 'simple-load-id-';\n\tvar idNum = 1;\n\n\tvar animation = false;\n\tvar preloaderElement;\n\tvar transform;\n\tvar scroll;\n\n\tvar requestAnimationFrame;\n\tvar counter = 0;\n\tvar tl;\n\n\tvar _preventScroll = function _preventScroll(e) {\n\t\te.preventDefault();\n\t};\n\n\tvar _animate = function _animate() {\n\n\t\tvar loop = function loop() {\n\n\t\t\tcounter += 0.5;\n\n\t\t\tpreloaderElement.style.width = counter + \"%\";\n\n\t\t\tif (counter === 80) {\n\t\t\t\treturn;\n\t\t\t} else if (counter >= 100) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trequestAnimationFrame(loop);\n\t\t};\n\n\t\tloop();\n\t};\n\n\tvar _animateStep1 = function _animateStep1(e) {\n\t\tanimation = e.animation;\n\t\tvar pw = document.getElementsByClassName('page-wrapper')[0];\n\n\t\tif (animation !== 'simple') return;\n\n\t\ttl = new TimelineLite();\n\n\t\ttl.to(preloaderElement, 0, {\n\t\t\topacity: 0\n\t\t});\n\t\ttl.to(preloaderElement, 0.6, {\n\t\t\tonStart: function onStart() {\n\t\t\t\tcounter = 0;\n\t\t\t\t_animate();\n\t\t\t\tpreloaderElement.style.display = 'block';\n\t\t\t\tpw.classList.remove('transition-animation-complete');\n\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'popup-close-all'\n\t\t\t\t});\n\t\t\t},\n\t\t\topacity: 1,\n\t\t\tonComplete: function onComplete() {\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'transition-step-1',\n\t\t\t\t\tanimation: 'simple'\n\t\t\t\t});\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'transition-step-2',\n\t\t\t\t\tanimation: 'simple'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tvar _animateStep2 = function _animateStep2() {\n\t\tvar pw = document.getElementsByClassName('page-wrapper')[0];\n\n\t\t// if (animation !== 'simple') return;\n\n\t\ttl.to(preloaderElement, 0.6, {\n\t\t\tonStart: function onStart() {\n\t\t\t\tcounter = 81;\n\t\t\t\t_animate();\n\t\t\t\tpw.classList.add('transition-animation-complete');\n\t\t\t},\n\t\t\topacity: 0,\n\t\t\tonComplete: function onComplete() {\n\t\t\t\tpreloaderElement.style.display = 'none';\n\t\t\t\tanimation = false;\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\ttype: 'transition-step-reset',\n\t\t\t\t\t\tanimation: false\n\t\t\t\t\t});\n\t\t\t\t}, 20);\n\t\t\t}\n\t\t});\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tpreloaderElement = document.getElementById('simple-preloader');\n\t\tif (!preloaderElement) {\n\t\t\tconsole.warn('simple-preloader is missing');\n\t\t\treturn;\n\t\t}\n\t};\n\n\tvar _handle = function _handle() {\n\t\tvar storeData = store.getData();\n\n\t\tif (storeData.step1ready === true && storeData.step2ready === true) {\n\t\t\t_animateStep2();\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\tbody = document.getElementsByTagName('body')[0];\n\t\ttransform = Modernizr.prefixed('transform');\n\n\t\trequestAnimationFrame = utils.getRequestAnimationFrame();\n\n\t\t_handleMutate();\n\t\t_handle();\n\t\tstore.eventEmitter.subscribe(_handle);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'link-animation-start') {\n\t\t\t\t_animateStep1(e);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(TweenMax) {'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(31), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, breakpointStore) {\n\n\t\"use strict\";\n\n\tvar projectOverlay;\n\tvar imgContainer;\n\tvar body;\n\tvar items = {};\n\tvar imgs = {};\n\tvar activeImg = false;\n\tvar activeItem = false;\n\n\tvar idName = 'project-section-id-';\n\tvar idNum = 1;\n\n\tvar id = false;\n\tvar animation = false;\n\tvar transitionDelay;\n\n\tvar _preventScroll = function _preventScroll(e) {\n\t\te.preventDefault();\n\t};\n\n\tvar _animateStep1 = function _animateStep1(e) {\n\t\tvar item;\n\t\tvar tl;\n\t\tvar pw = document.getElementsByClassName('page-wrapper')[0];\n\n\t\t//здесь мы получаем id и анимацию чтобы потом их проверять на следующих этапах\n\t\tid = e.id;\n\t\tanimation = e.animation;\n\t\tif (animation !== 'project') return;\n\n\t\ttl = new TimelineLite();\n\n\t\tif (!items.hasOwnProperty(id)) {\n\t\t\tconsole.warn('project-section with id ' + id + ' is missing');\n\t\t\treturn;\n\t\t}\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'project-open',\n\t\t\tid: id\n\t\t});\n\n\t\titem = items[id];\n\n\t\tif (breakpointStore.getData().breakpoint.name === 'mobile' && imgContainer.getAttribute('id') === 'project-preloader-img-serv' || breakpointStore.getData().breakpoint.name === 'tablet' && imgContainer.getAttribute('id') === 'project-preloader-img-serv' || breakpointStore.getData().breakpoint.name === 'mobile' && imgContainer.getAttribute('id') === 'project-preloader-img-case') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-545px\" });\n\t\t} else if (breakpointStore.getData().breakpoint.name === 'desktop' && imgContainer.getAttribute('id') === 'project-preloader-img-serv') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-480px\" });\n\t\t} else if (breakpointStore.getData().breakpoint.name === 'mobile' && imgContainer.getAttribute('id') === 'project-preloader-img-blog') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-702px\" });\n\t\t} else if (breakpointStore.getData().breakpoint.name === 'tablet' && imgContainer.getAttribute('id') === 'project-preloader-img-blog') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-666px\" });\n\t\t} else if (breakpointStore.getData().breakpoint.name === 'desktop' && imgContainer.getAttribute('id') === 'project-preloader-img-blog') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-600px\" });\n\t\t} else if (breakpointStore.getData().breakpoint.name === 'desktop' && imgContainer.getAttribute('id') === 'project-preloader-img-blog' || breakpointStore.getData().breakpoint.name === 'tablet' && imgContainer.getAttribute('id') === 'project-preloader-img-case' || breakpointStore.getData().breakpoint.name === 'desktop' && imgContainer.getAttribute('id') === 'project-preloader-img-case') {\n\n\t\t\tTweenMax.to(imgContainer, 0, { top: \"100%\", y: \"-600px\" });\n\t\t}\n\n\t\tvar arrow = item.element.getElementsByClassName('arrow')[0];\n\n\t\ttl.to(item.element, 0.6, {\n\t\t\tonStart: function onStart() {\n\n\t\t\t\tbody.classList.add('prevent-scroll-2');\n\t\t\t\tbody.addEventListener('touchmove', _preventScroll);\n\n\t\t\t\tif (activeImg && imgs.hasOwnProperty(activeImg)) {\n\t\t\t\t\timgs[activeImg].element.classList.remove('active');\n\t\t\t\t}\n\t\t\t\tactiveImg = item.id;\n\t\t\t\tif (activeImg && imgs.hasOwnProperty(activeImg)) {\n\t\t\t\t\timgs[activeImg].element.classList.add('active');\n\t\t\t\t}\n\t\t\t\tif (breakpointStore.getData().breakpoint.name === 'mobile') {\n\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\ttype: 'scroll-to',\n\t\t\t\t\t\telement: arrow,\n\t\t\t\t\t\tspeed: 0.5\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\ttype: 'scroll-to',\n\t\t\t\t\t\telement: item.element,\n\t\t\t\t\t\tspeed: 0.5\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\titem.element.classList.add('project-loading');\n\t\t\t}\n\t\t});\n\t\ttl.to(projectOverlay, 0.6, {\n\t\t\tonStart: function onStart() {\n\t\t\t\tpw.classList.remove('transition-animation-complete');\n\t\t\t\tprojectOverlay.style.display = 'block';\n\t\t\t},\n\t\t\tonComplete: function onComplete() {\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'transition-step-1',\n\t\t\t\t\tanimation: 'project'\n\t\t\t\t});\n\t\t\t}\n\n\t\t});\n\t};\n\n\tvar _animateStep2 = function _animateStep2() {\n\t\tvar tl;\n\t\tvar pw = document.getElementsByClassName('page-wrapper')[0];\n\n\t\tif (animation !== 'project') return;\n\n\t\ttl = new TimelineLite();\n\n\t\ttl.to(projectOverlay, 1.2, {\n\t\t\tonStart: function onStart() {\n\t\t\t\tif (breakpointStore.getData().breakpoint.name === 'mobile' && imgContainer.getAttribute('id') === 'project-preloader-img-serv') {\n\n\t\t\t\t\tTweenMax.to(imgContainer, 0.6, { top: \"80px\", y: \"0\" });\n\t\t\t\t} else if (breakpointStore.getData().breakpoint.name === 'tablet' && imgContainer.getAttribute('id') === 'project-preloader-img-serv' || breakpointStore.getData().breakpoint.name === 'desktop' && imgContainer.getAttribute('id') === 'project-preloader-img-serv') {\n\n\t\t\t\t\tTweenMax.to(imgContainer, 0.6, { top: \"120px\", y: \"0\" });\n\t\t\t\t} else if (imgContainer.getAttribute('id') === 'project-preloader-img-blog' || imgContainer.getAttribute('id') === 'project-preloader-img-case') {\n\n\t\t\t\t\tTweenMax.to(imgContainer, 0.6, { top: \"0\", y: \"0\" });\n\t\t\t\t}\n\n\t\t\t\timgContainer.classList.add('move');\n\t\t\t},\n\t\t\tonComplete: function onComplete() {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\titems[id].element.classList.remove('project-loading');\n\t\t\t\t}\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'transition-step-2',\n\t\t\t\t\tanimation: 'project'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tvar _animateStep3 = function _animateStep3() {\n\t\tvar tl;\n\t\tvar storeData = store.getData();\n\t\tvar pw = document.getElementsByClassName('page-wrapper')[0];\n\n\t\tif (animation !== 'project') return;\n\n\t\ttl = new TimelineLite();\n\n\t\ttl.to(projectOverlay, 0.6, {\n\n\t\t\tonStart: function onStart() {\n\t\t\t\tpw.classList.add('transition-animation-complete');\n\t\t\t},\n\t\t\tonComplete: function onComplete() {\n\t\t\t\timgContainer.classList.remove('move');\n\t\t\t\tprojectOverlay.style.display = 'none';\n\t\t\t\tbody.classList.remove('prevent-scroll-2');\n\t\t\t\tbody.removeEventListener('touchmove', _preventScroll);\n\n\t\t\t\tif (activeImg && imgs.hasOwnProperty(activeImg)) {\n\t\t\t\t\timgs[activeImg].element.classList.remove('active');\n\t\t\t\t\tactiveImg = false;\n\t\t\t\t}\n\n\t\t\t\tanimation = false;\n\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\ttype: 'transition-step-reset',\n\t\t\t\t\tanimation: false\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\t\tvar imgElements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\t\tvar replaceable = document.getElementsByClassName('replaceable')[0];\n\t\tif (replaceable.getAttribute(\"data-page\") === 'service') {\n\t\t\timgContainer = document.getElementById('project-preloader-img-serv');\n\t\t} else if (replaceable.getAttribute(\"data-page\") === 'blog') {\n\t\t\timgContainer = document.getElementById('project-preloader-img-blog');\n\t\t} else if (replaceable.getAttribute(\"data-page\") === 'case') {\n\t\t\timgContainer = document.getElementById('project-preloader-img-case');\n\t\t}\n\n\t\tprojectOverlay = document.getElementById('project-preloader');\n\n\t\tif (!projectOverlay) {\n\t\t\tconsole.warn('project-overlay element is missing!');\n\t\t\treturn;\n\t\t}\n\t\tif (!imgContainer) {\n\t\t\tconsole.warn('project-preloader-img is missing');\n\t\t\treturn;\n\t\t}\n\n\t\telements = document.getElementsByClassName('project-preview');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\n\t\timgElements = document.getElementsByClassName('project-preload-img');\n\t\tfor (var i = 0; i < imgElements.length; i++) {\n\t\t\tcheck(imgs, imgElements[i]);\n\t\t}\n\t\tfor (var id in imgs) {\n\t\t\tif (imgs.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(imgs, imgElements, imgs[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _handle = function _handle() {\n\t\tvar storeData = store.getData();\n\t\tif (storeData.step1ready === true && storeData.step2ready === false) {\n\t\t\t_animateStep2();\n\t\t}\n\t\tif (storeData.step1ready === true && storeData.step2ready === true) {\n\t\t\t_animateStep3();\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tbody = document.getElementsByTagName('body')[0];\n\n\t\ttransitionDelay = Modernizr.prefixed('transition-delay');\n\n\t\t_handle();\n\t\tstore.eventEmitter.subscribe(_handle);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\n\t\t\tif (e.type === 'link-animation-start') {\n\t\t\t\t_animateStep1(e);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(36), __webpack_require__(37), __webpack_require__(6), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, imagesStore, utils, breakpointStore) {\n\n\t\"use strict\";\n\n\tvar pageWrapper;\n\tvar elements;\n\tvar imgItems = {};\n\tvar videoItems = {};\n\tvar total = 0;\n\tvar complete = false;\n\tvar loaded = 0;\n\tvar startTime;\n\tvar minTimeout = 300;\n\tvar delay = 0;\n\tvar preloader;\n\tvar myAnim;\n\tvar step1 = false;\n\tvar step2 = false;\n\tvar direction = \"front\";\n\n\tvar idName = 'preload-image-id-';\n\tvar idNum = 1;\n\n\tvar path = document.querySelector('head').getAttribute('data-path');\n\tif (path.slice(-1) !== '/') path += '/';\n\n\tvar _handleChange = function _handleChange() {\n\n\t\tvar storeData = store.getData();\n\n\t\tif (complete === storeData.complete) return;\n\t\tcomplete = storeData.complete;\n\n\t\tpageWrapper.classList.add('load-complete');\n\t\tpageWrapper.classList.add('load-complete-once');\n\n\t\tsetTimeout(function () {\n\t\t\twindow.cancelAnimationFrame(myAnim);\n\t\t\tstep2 = true;\n\t\t}, 700);\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'transition-step-2'\n\t\t});\n\t};\n\n\tvar _loaded = function _loaded() {\n\t\tvar currTime;\n\n\t\tcurrTime = Date.now();\n\t\tdelay = currTime - startTime + minTimeout;\n\n\t\tif (delay < 0) delay = 0;\n\n\t\tsetTimeout(function () {\n\t\t\tstep1 = true;\n\t\t\t_start();\n\t\t}, delay);\n\t};\n\tfunction _start() {\n\t\tif (step1 === true && step2 === true) {\n\t\t\tpreloader.style.opacity = \"0\";\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'preload-complete'\n\t\t\t});\n\t\t}\n\t}\n\n\tvar _pagePreloader = function _pagePreloader() {\n\t\tvar img = document.getElementsByClassName('preloader-img')[0];\n\t\timg.style.opacity = \"0\";\n\t\tvar start = 140;\n\t\tvar totalImg = 254;\n\t\tvar imgLoadNum = 1;\n\n\t\tisLoadingImg();\n\t\tfunction preloadImg() {\n\t\t\tvar loadImg = new Image();\n\t\t\tloadImg.src = path + \"preloader/img\" + imgLoadNum + \".jpg\";\n\t\t\timgLoadNum++;\n\t\t\tisLoadingImg();\n\t\t}\n\n\t\tfunction isLoadingImg() {\n\t\t\tif (imgLoadNum === 254) {\n\t\t\t\timg.style.opacity = \"1\";\n\t\t\t\tmyAnim = requestAnimationFrame(step);\n\t\t\t} else {\n\t\t\t\tpreloadImg();\n\t\t\t}\n\t\t}\n\n\t\tfunction step() {\n\t\t\tif (direction === 'front') {\n\t\t\t\tstart++;\n\t\t\t} else if (direction === 'back') {\n\t\t\t\tstart--;\n\t\t\t}\n\t\t\tstep2 = false;\n\t\t\timg.setAttribute(\"src\", path + \"preloader/img\" + start + \".jpg\");\n\n\t\t\tif (start === 254) {\n\t\t\t\tdirection = 'back';\n\t\t\t\tstep2 = true;\n\t\t\t\t_start();\n\t\t\t} else if (start === 1) {\n\t\t\t\tdirection = 'front';\n\t\t\t}\n\n\t\t\tmyAnim = requestAnimationFrame(step);\n\t\t}\n\t};\n\n\tvar _handleImages = function _handleImages() {\n\t\tvar storeData = imagesStore.getData();\n\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tvar storeItem;\n\t\t\tif (!storeData.items.hasOwnProperty(item.id)) return;\n\t\t\tif (item.loaded) return;\n\t\t\tstoreItem = storeData.items[item.id];\n\t\t\tif (storeItem.loaded) {\n\t\t\t\tloaded++;\n\t\t\t\titem.loaded = true;\n\t\t\t}\n\t\t};\n\t\tfor (var id in imgItems) {\n\t\t\tif (imgItems.hasOwnProperty(id)) {\n\t\t\t\tcheckItem(imgItems[id]);\n\t\t\t}\n\t\t}\n\n\t\tif (loaded >= total) {\n\t\t\t_loaded();\n\t\t}\n\t};\n\n\tvar _add = function _add(element, items) {\n\t\tvar id = element.getAttribute('data-preload-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t\telement.setAttribute('data-preload-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tloaded: false\n\t\t};\n\t};\n\n\tvar _handleWheel = function _handleWheel(e) {\n\t\te.preventDefault();\n\t};\n\tvar _setupHandlers = function _setupHandlers() {\n\t\twindow.addEventListener('mousewheel', _handleWheel);\n\t\tdocument.addEventListener('mousewheel', _handleWheel);\n\t\tdocument.addEventListener('DOMMouseScroll', _handleWheel);\n\t\tdocument.addEventListener('keydown', _handleWheel);\n\t\tdocument.addEventListener('touchmove', _handleWheel);\n\t};\n\n\tvar _removeHandlers = function _removeHandlers() {\n\t\twindow.removeEventListener('mousewheel', _handleWheel);\n\t\tdocument.removeEventListener('mousewheel', _handleWheel);\n\t\tdocument.removeEventListener('DOMMouseScroll', _handleWheel);\n\t\tdocument.removeEventListener('keydown', _handleWheel);\n\t\tdocument.removeEventListener('touchmove', _handleWheel);\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\t// _setupHandlers();\n\t\tpageWrapper = document.querySelector('.page-wrapper');\n\t\telements = document.querySelectorAll('.wait-load-image');\n\n\t\timgItems = {};\n\t\ttotal = 0;\n\t\tcomplete = false;\n\t\tloaded = 0;\n\n\t\tpageWrapper.classList.remove('load-complete');\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'preload-reset'\n\t\t});\n\n\t\ttotal = elements.length;\n\n\t\tstartTime = Date.now();\n\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t_add(elements[i], imgItems);\n\t\t}\n\n\t\tif (total === 0) {\n\t\t\t_loaded();\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\tpreloader = document.getElementById('preloader');\n\t\t_handleMutate();\n\t\t_handleChange();\n\t\t_handleImages();\n\t\t_pagePreloader();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\t\timagesStore.eventEmitter.subscribe(_handleImages);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t\t_handleImages();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar complete = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'preload-complete') {\n\t\t\tif (complete) return;\n\n\t\t\tcomplete = true;\n\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t\tif (e.type === 'preload-reset') {\n\t\t\tif (!complete) return;\n\t\t\tcomplete = false;\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tif (initialized) return;\n\t\tinitialized = true;\n\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tcomplete: complete\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3ByZWxvYWQvcHJlbG9hZC5zdG9yZS5qcz9iMzgwIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpbml0aWFsaXplZCIsImNvbXBsZXRlIiwiX2hhbmRsZUV2ZW50IiwiZSIsInR5cGUiLCJldmVudEVtaXR0ZXIiLCJkaXNwYXRjaCIsIl9pbml0Iiwic3Vic2NyaWJlIiwiX2hhbmRsZXJzIiwiZXZlbnQiLCJpIiwibGVuZ3RoIiwiaGFuZGxlciIsInB1c2giLCJ1bnN1YnNjcmliZSIsInNwbGljZSIsImdldERhdGEiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxDQUFQLGtDQUEwQixVQUFTQSxVQUFULEVBQXFCOztBQUU5Qzs7QUFFQSxLQUFJQyxjQUFjLEtBQWxCO0FBQ0EsS0FBSUMsV0FBVyxLQUFmOztBQUVBLEtBQUlDLGVBQWUsU0FBZkEsWUFBZSxDQUFTQyxDQUFULEVBQVk7QUFDOUIsTUFBSUEsRUFBRUMsSUFBRixLQUFXLGtCQUFmLEVBQW1DO0FBQ2xDLE9BQUlILFFBQUosRUFBYzs7QUFFZEEsY0FBVyxJQUFYOztBQUVBSSxnQkFBYUMsUUFBYjtBQUNBO0FBQ0QsTUFBSUgsRUFBRUMsSUFBRixLQUFXLGVBQWYsRUFBZ0M7QUFDL0IsT0FBSSxDQUFDSCxRQUFMLEVBQWU7QUFDZkEsY0FBVyxLQUFYO0FBQ0E7QUFDRCxFQVpEOztBQWNBLEtBQUlNLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCLE1BQUlQLFdBQUosRUFBaUI7QUFDakJBLGdCQUFjLElBQWQ7O0FBRUFELGFBQVdTLFNBQVgsQ0FBcUJOLFlBQXJCO0FBQ0EsRUFMRDs7QUFPQSxLQUFJRyxlQUFlLFlBQVc7QUFDN0IsTUFBSUksWUFBWSxFQUFoQjs7QUFFQSxNQUFJSCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ksS0FBVCxFQUFnQjtBQUM5QixRQUFLLElBQUlDLElBQUlGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkNBLEdBQTNDLEVBQWdEO0FBQy9DRixjQUFVRSxDQUFWLEVBQWFELEtBQWI7QUFDQTtBQUNELEdBSkQ7QUFLQSxNQUFJRixZQUFZLFNBQVpBLFNBQVksQ0FBU0ssT0FBVCxFQUFrQjtBQUNqQ0osYUFBVUssSUFBVixDQUFlRCxPQUFmO0FBQ0EsR0FGRDtBQUdBLE1BQUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTRixPQUFULEVBQWtCO0FBQ25DLFFBQUssSUFBSUYsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixVQUFVRyxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJRixVQUFVRSxDQUFWLEtBQWdCRSxPQUFwQixFQUE2QjtBQUM1QkosZUFBVU8sTUFBVixDQUFpQkwsR0FBakIsRUFBc0IsQ0FBdEI7QUFDQTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05MLGFBQVVBLFFBREo7QUFFTkUsY0FBV0EsU0FGTDtBQUdOTyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ05oQixhQUFVQTtBQURKLEdBQVA7QUFHQSxFQUpEOztBQU1BLEtBQUksQ0FBQ0QsV0FBTCxFQUFrQjtBQUNqQk87QUFDQTs7QUFFRCxRQUFPO0FBQ05GLGdCQUFjQSxZQURSO0FBRU5ZLFdBQVNBO0FBRkgsRUFBUDtBQUlBLENBcEVEIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlciddLCBmdW5jdGlvbihkaXNwYXRjaGVyKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGluaXRpYWxpemVkID0gZmFsc2U7XG5cdHZhciBjb21wbGV0ZSA9IGZhbHNlO1xuXG5cdHZhciBfaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUudHlwZSA9PT0gJ3ByZWxvYWQtY29tcGxldGUnKSB7XG5cdFx0XHRpZiAoY29tcGxldGUpIHJldHVybjtcblxuXHRcdFx0Y29tcGxldGUgPSB0cnVlO1xuXG5cdFx0XHRldmVudEVtaXR0ZXIuZGlzcGF0Y2goKTtcblx0XHR9XG5cdFx0aWYgKGUudHlwZSA9PT0gJ3ByZWxvYWQtcmVzZXQnKSB7XG5cdFx0XHRpZiAoIWNvbXBsZXRlKSByZXR1cm47XG5cdFx0XHRjb21wbGV0ZSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmIChpbml0aWFsaXplZCkgcmV0dXJuO1xuXHRcdGluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKF9oYW5kbGVFdmVudCk7XG5cdH1cblxuXHR2YXIgZXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIF9oYW5kbGVycyA9IFtdO1xuXG5cdFx0dmFyIGRpc3BhdGNoID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0X2hhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdF9oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdH1cblx0XHR2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRcdGlmIChfaGFuZGxlcnNbaV0gPT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdF9oYW5kbGVycy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRkaXNwYXRjaDogZGlzcGF0Y2gsXG5cdFx0XHRzdWJzY3JpYmU6IHN1YnNjcmliZSxcblx0XHRcdHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuXHRcdH1cblx0fSgpO1xuXG5cdHZhciBnZXREYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbXBsZXRlOiBjb21wbGV0ZVxuXHRcdH1cblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRfaW5pdCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcixcblx0XHRnZXREYXRhOiBnZXREYXRhXG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvcHJlbG9hZC9wcmVsb2FkLnN0b3JlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar items = {};\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'adaptive-image-add') {\n\t\t\tif (items.hasOwnProperty(e.id)) return;\n\t\t\titems[e.id] = {\n\t\t\t\tid: e.id,\n\t\t\t\tloaded: false\n\t\t\t};\n\t\t}\n\n\t\tif (e.type === 'adaptive-image-remove') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\tdelete items[e.id];\n\t\t}\n\n\t\tif (e.type === 'adaptive-image-load') {\n\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\t\t\titems[e.id].loaded = true;\n\n\t\t\teventEmitter.dispatch();\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\titems: items\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2ltYWdlcy9pbWFnZXMuc3RvcmUuanM/MjM2NiJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaW5pdGlhbGl6ZWQiLCJpdGVtcyIsIl9oYW5kbGVFdmVudCIsImUiLCJ0eXBlIiwiaGFzT3duUHJvcGVydHkiLCJpZCIsImxvYWRlZCIsImV2ZW50RW1pdHRlciIsImRpc3BhdGNoIiwiX2luaXQiLCJzdWJzY3JpYmUiLCJfaGFuZGxlcnMiLCJldmVudCIsImkiLCJsZW5ndGgiLCJoYW5kbGVyIiwicHVzaCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwiZ2V0RGF0YSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLGNBQWMsS0FBbEI7QUFDQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUEsS0FBSUMsZUFBZSxTQUFmQSxZQUFlLENBQVNDLENBQVQsRUFBWTtBQUM5QixNQUFJQSxFQUFFQyxJQUFGLEtBQVcsb0JBQWYsRUFBb0M7QUFDbkMsT0FBSUgsTUFBTUksY0FBTixDQUFxQkYsRUFBRUcsRUFBdkIsQ0FBSixFQUFnQztBQUNoQ0wsU0FBTUUsRUFBRUcsRUFBUixJQUFjO0FBQ2JBLFFBQUlILEVBQUVHLEVBRE87QUFFYkMsWUFBUTtBQUZLLElBQWQ7QUFJQTs7QUFFRCxNQUFJSixFQUFFQyxJQUFGLEtBQVcsdUJBQWYsRUFBdUM7QUFDdEMsT0FBSSxDQUFDSCxNQUFNSSxjQUFOLENBQXFCRixFQUFFRyxFQUF2QixDQUFMLEVBQWlDO0FBQ2pDLFVBQU9MLE1BQU1FLEVBQUVHLEVBQVIsQ0FBUDtBQUNBOztBQUVELE1BQUlILEVBQUVDLElBQUYsS0FBVyxxQkFBZixFQUFxQztBQUNwQyxPQUFJLENBQUNILE1BQU1JLGNBQU4sQ0FBcUJGLEVBQUVHLEVBQXZCLENBQUwsRUFBaUM7QUFDakNMLFNBQU1FLEVBQUVHLEVBQVIsRUFBWUMsTUFBWixHQUFxQixJQUFyQjs7QUFHQUMsZ0JBQWFDLFFBQWI7QUFDQTtBQUNELEVBckJEOztBQXVCQSxLQUFJQyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUN0QlgsYUFBV1ksU0FBWCxDQUFxQlQsWUFBckI7QUFDQSxFQUZEOztBQUlBLEtBQUlNLGVBQWUsWUFBVztBQUM3QixNQUFJSSxZQUFZLEVBQWhCOztBQUVBLE1BQUlILFdBQVcsU0FBWEEsUUFBVyxDQUFTSSxLQUFULEVBQWdCO0FBQzlCLFFBQUssSUFBSUMsSUFBSUYsVUFBVUcsTUFBVixHQUFtQixDQUFoQyxFQUFtQ0QsS0FBSyxDQUF4QyxFQUEyQ0EsR0FBM0MsRUFBZ0Q7QUFDL0NGLGNBQVVFLENBQVYsRUFBYUQsS0FBYjtBQUNBO0FBQ0QsR0FKRDtBQUtBLE1BQUlGLFlBQVksU0FBWkEsU0FBWSxDQUFTSyxPQUFULEVBQWtCO0FBQ2pDSixhQUFVSyxJQUFWLENBQWVELE9BQWY7QUFDQSxHQUZEO0FBR0EsTUFBSUUsY0FBYyxTQUFkQSxXQUFjLENBQVNGLE9BQVQsRUFBa0I7QUFDbkMsUUFBSyxJQUFJRixJQUFJLENBQWIsRUFBZ0JBLEtBQUtGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBeEMsRUFBMkNELEdBQTNDLEVBQWdEO0FBQy9DLFFBQUlGLFVBQVVFLENBQVYsS0FBZ0JFLE9BQXBCLEVBQTZCO0FBQzVCSixlQUFVTyxNQUFWLENBQWlCTCxHQUFqQixFQUFzQixDQUF0QjtBQUNBO0FBQ0Q7QUFDRCxHQU5EOztBQVFBLFNBQU87QUFDTkwsYUFBVUEsUUFESjtBQUVORSxjQUFXQSxTQUZMO0FBR05PLGdCQUFhQTtBQUhQLEdBQVA7QUFLQSxFQXhCa0IsRUFBbkI7O0FBMEJBLEtBQUlFLFVBQVUsU0FBVkEsT0FBVSxHQUFXO0FBQ3hCLFNBQU87QUFDTm5CLFVBQU9BO0FBREQsR0FBUDtBQUdBLEVBSkQ7O0FBTUEsS0FBSSxDQUFDRCxXQUFMLEVBQWtCO0FBQ2pCQSxnQkFBYyxJQUFkO0FBQ0FVO0FBQ0E7O0FBRUQsUUFBTztBQUNORixnQkFBY0EsWUFEUjtBQUVOWSxXQUFTQTtBQUZILEVBQVA7QUFJQSxDQTNFRCIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdHZhciBfaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUudHlwZSA9PT0gJ2FkYXB0aXZlLWltYWdlLWFkZCcpe1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGUuaWQpKSByZXR1cm47XG5cdFx0XHRpdGVtc1tlLmlkXSA9IHtcblx0XHRcdFx0aWQ6IGUuaWQsXG5cdFx0XHRcdGxvYWRlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZS50eXBlID09PSAnYWRhcHRpdmUtaW1hZ2UtcmVtb3ZlJyl7XG5cdFx0XHRpZiAoIWl0ZW1zLmhhc093blByb3BlcnR5KGUuaWQpKSByZXR1cm47XG5cdFx0XHRkZWxldGUgaXRlbXNbZS5pZF07XG5cdFx0fVxuXG5cdFx0aWYgKGUudHlwZSA9PT0gJ2FkYXB0aXZlLWltYWdlLWxvYWQnKXtcblx0XHRcdGlmICghaXRlbXMuaGFzT3duUHJvcGVydHkoZS5pZCkpIHJldHVybjtcblx0XHRcdGl0ZW1zW2UuaWRdLmxvYWRlZCA9IHRydWU7XG5cblxuXHRcdFx0ZXZlbnRFbWl0dGVyLmRpc3BhdGNoKCk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoX2hhbmRsZUV2ZW50KTtcblx0fVxuXG5cdHZhciBldmVudEVtaXR0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgX2hhbmRsZXJzID0gW107XG5cblx0XHR2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRfaGFuZGxlcnNbaV0oZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0X2hhbmRsZXJzLnB1c2goaGFuZGxlcik7XG5cdFx0fVxuXHRcdHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IF9oYW5kbGVycy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdFx0aWYgKF9oYW5kbGVyc1tpXSA9PSBoYW5kbGVyKSB7XG5cdFx0XHRcdFx0X2hhbmRsZXJzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGRpc3BhdGNoOiBkaXNwYXRjaCxcblx0XHRcdHN1YnNjcmliZTogc3Vic2NyaWJlLFxuXHRcdFx0dW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG5cdFx0fVxuXHR9KCk7XG5cblx0dmFyIGdldERhdGEgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aXRlbXM6IGl0ZW1zXG5cdFx0fVxuXHR9XG5cblx0aWYgKCFpbml0aWFsaXplZCkge1xuXHRcdGluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRfaW5pdCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcixcblx0XHRnZXREYXRhOiBnZXREYXRhXG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvaW1hZ2VzL2ltYWdlcy5zdG9yZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8), __webpack_require__(5), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, resizeStore, scrollStore, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'project-hover-';\n\tvar idNum = 1;\n\tvar number = 5;\n\tvar transform;\n\tvar transform;\n\tvar shown = false;\n\tvar x = 0;\n\tvar y = 0;\n\tvar x1 = 0;\n\tvar y1 = 0;\n\tvar sc = 0;\n\tvar butHid = {};\n\n\tvar _hadleScroll = function _hadleScroll() {\n\t\tsc = scrollStore.getData().top;\n\t\tfor (var key in items) {\n\t\t\tif (items[key].active === true) {\n\t\t\t\t_scroll(items[key]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _draw = function _draw(item) {\n\t\tfunction _animate() {\n\t\t\tif (Math.abs(x - x1) < 0.1) {\n\t\t\t\tx1 = x;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tx1 = x1 + (x - x1) / 200;\n\t\t\t}\n\n\t\t\tif (Math.abs(y - y1) < 0.1) {\n\t\t\t\ty1 = y;\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\ty1 = y1 + (y - y1) / 200;\n\t\t\t}\n\t\t\tif (item.cursor.tagName === \"circle\") {\n\t\t\t\titem.cursor.setAttribute(\"cx\", x1);\n\t\t\t\titem.cursor.setAttribute(\"cy\", y1);\n\t\t\t} else {\n\t\t\t\titem.cursor.style[transform] = 'translateX(' + x1 + 'px) translateY(' + y1 + 'px) translateZ(0px)';\n\t\t\t}\n\t\t\trequestAnimationFrame(_animate);\n\t\t}\n\t\t_animate();\n\t};\n\n\tvar _show = function _show(item, e, el) {\n\t\tvar wh = resizeStore.getData().height;\n\n\t\tshown = true;\n\t\titem.cursor.classList.add('show');\n\t\titem.cursor.classList.remove('hidden');\n\t\tvar height = item.element.offsetHeight;\n\t\tvar top = utils.offset(el).top;\n\n\t\tx = e.clientX - utils.offset(el).left;\n\t\tx1 = e.clientX - utils.offset(el).left;\n\t\ty = e.pageY - top;\n\t\ty1 = e.pageY - top;\n\n\t\t_draw(item);\n\t};\n\tvar _move = function _move(item, e, el) {\n\t\tvar wh = resizeStore.getData().height;\n\n\t\tif (!shown) return;\n\n\t\titem.cursor.classList.add('show');\n\t\titem.cursor.classList.remove('hidden');\n\t\tvar height = item.element.offsetHeight;\n\t\tvar top = utils.offset(el).top;\n\n\t\tx = e.clientX - utils.offset(el).left;\n\t\ty = e.pageY - top;\n\n\t\t_draw(item);\n\t};\n\tvar _scroll = function _scroll(item) {\n\t\titem.cursor.classList.remove('show');\n\t\titem.cursor.classList.add('hidden');\n\t};\n\tvar _hide = function _hide(item, e, el) {\n\t\tvar wh = resizeStore.getData().height;\n\n\t\tshown = false;\n\n\t\titem.cursor.classList.remove('show');\n\t\titem.cursor.classList.add('hidden');\n\n\t\tif (!e) return;\n\n\t\tvar height = item.element.offsetHeight;\n\t\tvar top = utils.offset(el).top;\n\n\t\tx = e.clientX - utils.offset(el).left;\n\t\tx1 = e.clientX - utils.offset(el).left;\n\t\ty = e.pageY - top;\n\t\ty1 = e.pageY - top;\n\n\t\t_draw(item);\n\t};\n\n\tfunction _handleChange() {}\n\n\tvar _add = function _add(items, element) {\n\t\tvar linkEditor = element.getElementsByClassName('link-editor');\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar cursor = element.getElementsByClassName('cursor')[0];\n\t\tif (!cursor) {\n\t\t\tcursor = element.getElementsByTagName('circle')[0];\n\t\t}\n\t\tcursor.classList.add(\"hidden\");\n\t\tvar active = false;\n\n\t\tvar _linkEditorList = function _linkEditorList(el) {\n\t\t\tel.addEventListener('mouseenter', function (e) {\n\t\t\t\titems[id].active = true;\n\t\t\t\t_show(items[id], e, el);\n\t\t\t});\n\t\t\tel.addEventListener('mousemove', function (e) {\n\t\t\t\titems[id].active = true;\n\t\t\t\t_move(items[id], e, el);\n\t\t\t});\n\t\t\tel.addEventListener('mouseleave', function (e) {\n\t\t\t\titems[id].active = false;\n\t\t\t\t_hide(items[id], e, el);\n\t\t\t});\n\t\t};\n\n\t\tif (linkEditor) {\n\t\t\tfor (var i = 0; i < linkEditor.length; i++) {\n\t\t\t\t_linkEditorList(linkEditor[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\tcursor: cursor,\n\t\t\telement: element,\n\t\t\tactive: active\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('project-preview');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\ttransform = Modernizr.prefixed('transform');\n\n\t\t_handleMutate();\n\t\t_hadleScroll();\n\n\t\tscrollStore.eventEmitter.subscribe(_hadleScroll);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL3Byb2plY3QtaG92ZXIudmlldy5qcz9mNWU3Il0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJyZXNpemVTdG9yZSIsInNjcm9sbFN0b3JlIiwidXRpbHMiLCJpdGVtcyIsImlkTmFtZSIsImlkTnVtIiwibnVtYmVyIiwidHJhbnNmb3JtIiwic2hvd24iLCJ4IiwieSIsIngxIiwieTEiLCJzYyIsImJ1dEhpZCIsIl9oYWRsZVNjcm9sbCIsImdldERhdGEiLCJ0b3AiLCJrZXkiLCJhY3RpdmUiLCJfc2Nyb2xsIiwiX2RyYXciLCJpdGVtIiwiX2FuaW1hdGUiLCJNYXRoIiwiYWJzIiwiY3Vyc29yIiwidGFnTmFtZSIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX3Nob3ciLCJlIiwiZWwiLCJ3aCIsImhlaWdodCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImVsZW1lbnQiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJjbGllbnRYIiwibGVmdCIsInBhZ2VZIiwiX21vdmUiLCJfaGlkZSIsIl9oYW5kbGVDaGFuZ2UiLCJfYWRkIiwibGlua0VkaXRvciIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpZCIsImdldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX2xpbmtFZGl0b3JMaXN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImkiLCJsZW5ndGgiLCJfcmVtb3ZlIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiZG9jdW1lbnQiLCJpbml0IiwiTW9kZXJuaXpyIiwicHJlZml4ZWQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsRUFBa0Isc0JBQWxCLEVBQTRDLHNC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RCxjQUFOLENBQXFCWixFQUFyQixDQUFKLEVBQThCO0FBQzdCYSxjQUFVN0QsS0FBVixFQUFpQnlELFFBQWpCLEVBQTJCekQsTUFBTWdELEVBQU4sQ0FBM0I7QUFDQTtBQUNEO0FBQ0QsRUE1Q0Q7O0FBOENBLEtBQUllLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCM0QsY0FBWTRELFVBQVVDLFFBQVYsQ0FBbUIsV0FBbkIsQ0FBWjs7QUFFQVQ7QUFDQTVDOztBQUVBZCxjQUFZb0UsWUFBWixDQUF5QkMsU0FBekIsQ0FBbUN2RCxZQUFuQzs7QUFFQWhCLGFBQVd1RSxTQUFYLENBQXFCLFVBQVN0QyxDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRXVDLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCWjtBQUNBO0FBQ0QsR0FKRDtBQUtBLEVBYkQ7O0FBZUEsUUFBTztBQUNOTyxRQUFNQTtBQURBLEVBQVA7QUFHQSxDQXBPRCIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi4vcmVzaXplL3Jlc2l6ZS5zdG9yZScsICcuLi9zY3JvbGwvc2Nyb2xsLnN0b3JlJywgJy4uL3V0aWxzJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIsIHJlc2l6ZVN0b3JlLCBzY3JvbGxTdG9yZSwgdXRpbHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdHZhciBpZE5hbWUgPSAncHJvamVjdC1ob3Zlci0nO1xuXHR2YXIgaWROdW0gID0gMTtcblx0dmFyIG51bWJlciA9IDU7XG5cdHZhciB0cmFuc2Zvcm07XG5cdHZhciB0cmFuc2Zvcm07XG5cdHZhciBzaG93biA9IGZhbHNlO1xuXHR2YXIgeCA9IDA7XG5cdHZhciB5ID0gMDtcblx0dmFyIHgxID0gMDtcblx0dmFyIHkxID0gMDtcblx0dmFyIHNjID0gMDtcblx0dmFyIGJ1dEhpZCA9IHt9O1xuXG5cdHZhciBfaGFkbGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcblx0XHRzYyA9IHNjcm9sbFN0b3JlLmdldERhdGEoKS50b3A7XG5cdFx0Zm9yICh2YXIga2V5IGluIGl0ZW1zKSB7XG5cdFx0XHRpZiAoaXRlbXNba2V5XS5hY3RpdmUgPT09IHRydWUpIHtcblx0XHRcdFx0X3Njcm9sbChpdGVtc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHZhciBfZHJhdyA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRmdW5jdGlvbiBfYW5pbWF0ZSgpIHtcblx0XHRcdGlmIChNYXRoLmFicyh4IC0geDEpIDwgMC4xKSB7XG5cdFx0XHRcdHgxID0geDtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR4MSA9IHgxICsgKHggLSB4MSkvMjAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoTWF0aC5hYnMoeSAtIHkxKSA8IDAuMSkge1xuXHRcdFx0XHR5MSA9IHk7XG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eTEgPSB5MSArICh5IC0geTEpLzIwMDtcblx0XHRcdH1cblx0XHRcdGlmIChpdGVtLmN1cnNvci50YWdOYW1lID09PSBcImNpcmNsZVwiKSB7XG5cdFx0XHRcdGl0ZW0uY3Vyc29yLnNldEF0dHJpYnV0ZShcImN4XCIsIHgxKTtcblx0XHRcdFx0aXRlbS5jdXJzb3Iuc2V0QXR0cmlidXRlKFwiY3lcIiwgKHkxKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtLmN1cnNvci5zdHlsZVt0cmFuc2Zvcm1dID0gJ3RyYW5zbGF0ZVgoJyArIHgxICsgJ3B4KSB0cmFuc2xhdGVZKCcgKyAoeTEpICsgJ3B4KSB0cmFuc2xhdGVaKDBweCknO1x0XG5cdFx0XHR9XG5cdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX2FuaW1hdGUpO1xuXHRcdH1cblx0XHRfYW5pbWF0ZSgpO1xuXHR9XG5cdFxuXHR2YXIgX3Nob3cgPSBmdW5jdGlvbihpdGVtLCBlLCBlbCkge1xuXHRcdHZhciB3aCA9IHJlc2l6ZVN0b3JlLmdldERhdGEoKS5oZWlnaHQ7XG5cblx0XHRzaG93biA9IHRydWU7XG5cdFx0aXRlbS5jdXJzb3IuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuXHRcdGl0ZW0uY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXHRcdHZhciBoZWlnaHQgPSBpdGVtLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRcdHZhciB0b3AgPSB1dGlscy5vZmZzZXQoZWwpLnRvcDtcblxuXHRcdHggPSBlLmNsaWVudFggLSB1dGlscy5vZmZzZXQoZWwpLmxlZnQ7XG5cdFx0eDEgPSBlLmNsaWVudFggLSB1dGlscy5vZmZzZXQoZWwpLmxlZnQ7XG5cdFx0eSA9IGUucGFnZVkgLSB0b3A7XG5cdFx0eTEgPSBlLnBhZ2VZIC0gdG9wO1xuXG5cdFx0X2RyYXcoaXRlbSk7XG5cdH1cblx0dmFyIF9tb3ZlID0gZnVuY3Rpb24oaXRlbSwgZSwgZWwpIHtcblx0XHR2YXIgd2ggPSByZXNpemVTdG9yZS5nZXREYXRhKCkuaGVpZ2h0O1xuXG5cdFx0aWYgKCFzaG93bikgcmV0dXJuO1xuXG5cdFx0aXRlbS5jdXJzb3IuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuXHRcdGl0ZW0uY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXHRcdHZhciBoZWlnaHQgPSBpdGVtLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRcdHZhciB0b3AgPSB1dGlscy5vZmZzZXQoZWwpLnRvcDtcblxuXHRcdHggPSBlLmNsaWVudFggLSB1dGlscy5vZmZzZXQoZWwpLmxlZnQ7XG5cdFx0eSA9IGUucGFnZVkgLSB0b3A7XG5cblx0XHRfZHJhdyhpdGVtKTtcblx0fVxuXHR2YXIgX3Njcm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpdGVtLmN1cnNvci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG5cdFx0aXRlbS5jdXJzb3IuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG5cdH1cblx0dmFyIF9oaWRlID0gZnVuY3Rpb24oaXRlbSwgZSwgZWwpIHtcblx0XHR2YXIgd2ggPSByZXNpemVTdG9yZS5nZXREYXRhKCkuaGVpZ2h0O1xuXG5cdFx0c2hvd24gPSBmYWxzZTtcblxuXHRcdGl0ZW0uY3Vyc29yLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcblx0XHRpdGVtLmN1cnNvci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcblxuXHRcdGlmICghZSkgcmV0dXJuO1xuXG5cdFx0dmFyIGhlaWdodCA9IGl0ZW0uZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdFx0dmFyIHRvcCA9IHV0aWxzLm9mZnNldChlbCkudG9wO1xuXG5cdFx0eCA9IGUuY2xpZW50WCAtIHV0aWxzLm9mZnNldChlbCkubGVmdDtcblx0XHR4MSA9IGUuY2xpZW50WCAtIHV0aWxzLm9mZnNldChlbCkubGVmdDtcblx0XHR5ID0gZS5wYWdlWSAtIHRvcDtcblx0XHR5MSA9IGUucGFnZVkgLSB0b3A7XG5cblx0XHRfZHJhdyhpdGVtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoKSB7XG5cdFx0XG5cdH1cblxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGxpbmtFZGl0b3IgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xpbmstZWRpdG9yJyk7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblx0XHR2YXIgY3Vyc29yID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXJzb3InKVswXTtcblx0XHRpZiAoIWN1cnNvcikge1xuXHRcdFx0Y3Vyc29yID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY2lyY2xlJylbMF07XG5cdFx0fVxuXHRcdGN1cnNvci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuXHRcdHZhciBhY3RpdmUgPSBmYWxzZTtcblxuXHRcdHZhciBfbGlua0VkaXRvckxpc3QgPSBmdW5jdGlvbihlbCkge1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aXRlbXNbaWRdLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdF9zaG93KGl0ZW1zW2lkXSwgZSwgZWwpO1xuXHRcdFx0fSk7XG5cdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGl0ZW1zW2lkXS5hY3RpdmUgPSB0cnVlO1xuXHRcdFx0XHRfbW92ZShpdGVtc1tpZF0sIGUsIGVsKTtcblx0XHRcdH0pO1xuXHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aXRlbXNbaWRdLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRfaGlkZShpdGVtc1tpZF0sIGUsIGVsKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChsaW5rRWRpdG9yKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtFZGl0b3IubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0X2xpbmtFZGl0b3JMaXN0KGxpbmtFZGl0b3JbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXHRcdH1cblxuXHRcdGl0ZW1zW2lkXSA9IHtcblx0XHRcdGlkOiBpZCxcblx0XHRcdGN1cnNvcjogY3Vyc29yLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdGFjdGl2ZTogYWN0aXZlXG5cdFx0fVxuXHRcdFxuXHR9XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fVxuXG5cdHZhciBfaGFuZGxlTXV0YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzO1xuXHRcdFxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJvamVjdC1wcmV2aWV3Jyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRyYW5zZm9ybSA9IE1vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyk7XG5cblx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0X2hhZGxlU2Nyb2xsKCk7XG5cblx0XHRzY3JvbGxTdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYWRsZVNjcm9sbCk7XG5cblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS50eXBlID09PSAnbXV0YXRlJykge1xuXHRcdFx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9kZWNvci9wcm9qZWN0LWhvdmVyLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t};\n\n\tfunction _activeNo() {}\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\telement.addEventListener('click', function () {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'btn-control',\n\t\t\t\tid: id\n\t\t\t});\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar footer = document.getElementsByTagName('footer')[0];\n\t\tif (!footer) {\n\t\t\treturn;\n\t\t}\n\n\t\telements = footer.getElementsByClassName('btn');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvb3Rlci9mb290ZXItY3RybC52aWV3LmpzPzYwOWIiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsInN0b3JlIiwiaXRlbXMiLCJpZE5hbWUiLCJpZE51bSIsIl9oYW5kbGVDaGFuZ2UiLCJzdG9yZURhdGEiLCJnZXREYXRhIiwiX2FjdGl2ZU5vIiwiX2FkZCIsImVsZW1lbnQiLCJpZCIsImdldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaCIsInR5cGUiLCJfcmVtb3ZlIiwiaXRlbSIsIl9oYW5kbGVNdXRhdGUiLCJlbGVtZW50cyIsImNoZWNrIiwiZm91bmQiLCJoYXNPd25Qcm9wZXJ0eSIsImJhY2tDaGVjayIsImkiLCJsZW5ndGgiLCJmb290ZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJlIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsRUFBa0IsdUJBQWxCLENBQVAsa0NBQTRDLFVBQVNBLFVBQVQsRUFBcUJDLEtBQXJCLEVBQTRCOztBQUV2RTs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUE7QUFDQSxLQUFJQyxTQUFTLFNBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7O0FBR0EsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXO0FBQzlCLE1BQUlDLFlBQVlMLE1BQU1NLE9BQU4sRUFBaEI7QUFDQSxFQUZEOztBQUlBLFVBQVNDLFNBQVQsR0FBcUIsQ0FFcEI7QUFDRCxLQUFJQyxPQUFPLFNBQVBBLElBQU8sQ0FBU1AsS0FBVCxFQUFnQlEsT0FBaEIsRUFBeUI7QUFDbkMsTUFBSUMsS0FBS0QsUUFBUUUsWUFBUixDQUFxQixTQUFyQixDQUFUOztBQUVBLE1BQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1JBLFFBQUtS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b3Rlci5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCBzdG9yZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0Ly8hISFyZXBsYWNlIGlmIHNldHRpbmcgZGF0YS1hdHRyaWJ1dGUhXG5cdHZhciBpZE5hbWUgPSAnbmV3LWlkLSc7XG5cdHZhciBpZE51bSAgPSAxO1xuXG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RvcmVEYXRhID0gc3RvcmUuZ2V0RGF0YSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2FjdGl2ZU5vKCkge1xuXG5cdH1cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdidG4tY29udHJvbCcsXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fSk7XG5cdFx0fSlcblxuXG5cdFx0aXRlbXNbaWRdID0ge1xuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLy0tLS0tLS1cblx0XHR2YXIgZm9vdGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Zvb3RlcicpWzBdO1xuXHRcdGlmICghZm9vdGVyKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZWxlbWVudHMgPSBmb290ZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuJyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cblx0XHRzdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYW5kbGVDaGFuZ2UpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9mb290ZXIvZm9vdGVyLWN0cmwudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar activeYes = false;\n\tvar active = 'circle-1';\n\tvar activeNo = false;\n\tvar itemsYes = {};\n\tvar counter = 0;\n\tvar count = 0;\n\tvar noneElem = false;\n\tvar last = false;\n\tvar close = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\n\t\tif (e.type === 'btn-control') {\n\t\t\tclose = false;\n\n\t\t\tif (e.id === \"yes\") {\n\t\t\t\tactiveYes = true;\n\n\t\t\t\tfor (var id in itemsYes) {\n\t\t\t\t\tif (count < counter - 1 && id !== active) {\n\t\t\t\t\t\tactive = id;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (count < counter - 1 && id === active) {\n\t\t\t\t\t\tnoneElem = id;\n\t\t\t\t\t} else if (count === counter - 1 && id === active) {\n\t\t\t\t\t\tlast = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (e.id === \"no\") {\n\t\t\t\tactiveYes = false;\n\t\t\t\tactiveNo = true;\n\t\t\t}\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\t\tif (e.type === 'footer-close') {\n\t\t\tclose = true;\n\t\t\tactiveYes = false;\n\t\t\tactive = 'circle-1';\n\t\t\tactiveNo = false;\n\t\t\tcounter = 0;\n\t\t\tcount = 0;\n\t\t\tnoneElem = false;\n\t\t\tlast = false;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\t\tif (e.type === 'items-add') {\n\n\t\t\titemsYes = e.items;\n\n\t\t\tcounter++;\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tactiveYes: activeYes,\n\t\t\tactive: active,\n\t\t\tactiveNo: activeNo,\n\t\t\tnoneElem: noneElem,\n\t\t\tlast: last,\n\t\t\tclose: close\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvb3Rlci9mb290ZXIuc3RvcmUuanM/NWE5ZiJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaW5pdGlhbGl6ZWQiLCJhY3RpdmVZZXMiLCJhY3RpdmUiLCJhY3RpdmVObyIsIml0ZW1zWWVzIiwiY291bnRlciIsImNvdW50Iiwibm9uZUVsZW0iLCJsYXN0IiwiY2xvc2UiLCJfaGFuZGxlRXZlbnQiLCJlIiwidHlwZSIsImlkIiwiZXZlbnRFbWl0dGVyIiwiZGlzcGF0Y2giLCJpdGVtcyIsIl9pbml0Iiwic3Vic2NyaWJlIiwiX2hhbmRsZXJzIiwiZXZlbnQiLCJpIiwibGVuZ3RoIiwiaGFuZGxlciIsInB1c2giLCJ1bnN1YnNjcmliZSIsInNwbGljZSIsImdldERhdGEiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxDQUFQLGtDQUEwQixVQUFTQSxVQUFULEVBQXFCOztBQUU5Qzs7QUFFQSxLQUFJQyxjQUFjLEtBQWxCO0FBQ0EsS0FBSUMsWUFBWSxLQUFoQjtBQUNBLEtBQUlDLFNBQVMsVUFBYjtBQUNBLEtBQUlDLFdBQVcsS0FBZjtBQUNBLEtBQUlDLFdBQVcsRUFBZjtBQUNBLEtBQUlDLFVBQVUsQ0FBZDtBQUNBLEtBQUlDLFFBQVEsQ0FBWjtBQUNBLEtBQUlDLFdBQVcsS0FBZjtBQUNBLEtBQUlDLE9BQU8sS0FBWDtBQUNBLEtBQUlDLFFBQVEsS0FBWjs7QUFFQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsQ0FBVCxFQUFZOztBQUU5QixNQUFJQSxFQUFFQyxJQUFGLEtBQVcsYUFBZixFQUE4QjtBQUM3QkgsV0FBUSxLQUFSOztBQUVBLE9BQUlFLEVBQUVFLEVBQUYsS0FBUyxLQUFiLEVBQW9CO0FBQ25CWixnQkFBWSxJQUFaOztBQUVBLFNBQUssSUFBSVksRUFBVCxJQUFlVCxRQUFmLEVBQXlCO0FBQ3hCLFNBQUlFLFFBQVNELFVBQVEsQ0FBakIsSUFBdUJRLE9BQU9YLE1BQWxDLEVBQTBDO0FBQ3pDQSxlQUFTVyxFQUFUO0FBQ0FQO0FBQ0E7QUFDQSxNQUpELE1BSU8sSUFBSUEsUUFBU0QsVUFBUSxDQUFqQixJQUF1QlEsT0FBT1gsTUFBbEMsRUFBMEM7QUFDaERLLGlCQUFXTSxFQUFYO0FBQ0EsTUFGTSxNQUVBLElBQUlQLFVBQVdELFVBQVEsQ0FBbkIsSUFBeUJRLE9BQU9YLE1BQXBDLEVBQTRDO0FBQ2xETSxhQUFPLElBQVA7QUFDQTtBQUNEO0FBRUQsSUFmRCxNQWVPLElBQUlHLEVBQUVFLEVBQUYsS0FBUyxJQUFiLEVBQW1CO0FBQ3pCWixnQkFBWSxLQUFaO0FBQ0FFLGVBQVcsSUFBWDtBQUNBOztBQUVEVyxnQkFBYUMsUUFBYixDQUFzQjtBQUNyQkgsVUFBTTtBQURlLElBQXRCO0FBR0E7QUFDRCxNQUFJRCxFQUFFQyxJQUFGLEtBQVcsY0FBZixFQUErQjtBQUM5QkgsV0FBUSxJQUFSO0FBQ0FSLGVBQVksS0FBWjtBQUNBQyxZQUFTLFVBQVQ7QUFDQUMsY0FBVyxLQUFYO0FBQ0FFLGFBQVUsQ0FBVjtBQUNBQyxXQUFRLENBQVI7QUFDQUMsY0FBVyxLQUFYO0FBQ0FDLFVBQU8sS0FBUDs7QUFFQU0sZ0JBQWFDLFFBQWIsQ0FBc0I7QUFDckJILFVBQU07QUFEZSxJQUF0QjtBQUdBO0FBQ0QsTUFBSUQsRUFBRUMsSUFBRixLQUFXLFdBQWYsRUFBNEI7O0FBRTNCUixjQUFXTyxFQUFFSyxLQUFiOztBQUVBWDtBQUNBO0FBQ0QsRUFqREQ7O0FBbURBLEtBQUlZLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCbEIsYUFBV21CLFNBQVgsQ0FBcUJSLFlBQXJCO0FBQ0EsRUFGRDs7QUFJQSxLQUFJSSxlQUFlLFlBQVc7QUFDN0IsTUFBSUssWUFBWSxFQUFoQjs7QUFFQSxNQUFJSixXQUFXLFNBQVhBLFFBQVcsQ0FBU0ssS0FBVCxFQUFnQjtBQUM5QixRQUFLLElBQUlDLElBQUlGLFVBQVVHLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkNBLEdBQTNDLEVBQWdEO0FBQy9DRixjQUFVRSxDQUFWLEVBQWFELEtBQWI7QUFDQTtBQUNELEdBSkQ7QUFLQSxNQUFJRixZQUFZLFNBQVpBLFNBQVksQ0FBU0ssT0FBVCxFQUFrQjtBQUNqQ0osYUFBVUssSUFBVixDQUFlRCxPQUFmO0FBQ0EsR0FGRDtBQUdBLE1BQUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTRixPQUFULEVBQWtCO0FBQ25DLFFBQUssSUFBSUYsSUFBSSxDQUFiLEVBQWdCQSxLQUFLRixVQUFVRyxNQUFWLEdBQW1CLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJRixVQUFVRSxDQUFWLEtBQWdCRSxPQUFwQixFQUE2QjtBQUM1QkosZUFBVU8sTUFBVixDQUFpQkwsR0FBakIsRUFBc0IsQ0FBdEI7QUFDQTtBQUNEO0FBQ0QsR0FORDs7QUFRQSxTQUFPO0FBQ05OLGFBQVVBLFFBREo7QUFFTkcsY0FBV0EsU0FGTDtBQUdOTyxnQkFBYUE7QUFIUCxHQUFQO0FBS0EsRUF4QmtCLEVBQW5COztBQTBCQSxLQUFJRSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixTQUFPO0FBQ04xQixjQUFXQSxTQURMO0FBRU5DLFdBQVFBLE1BRkY7QUFHTkMsYUFBVUEsUUFISjtBQUlOSSxhQUFVQSxRQUpKO0FBS05DLFNBQU1BLElBTEE7QUFNTkMsVUFBT0E7QUFORCxHQUFQO0FBUUEsRUFURDs7QUFXQSxLQUFJLENBQUNULFdBQUwsRUFBa0I7QUFDakJBLGdCQUFjLElBQWQ7QUFDQWlCO0FBQ0E7O0FBRUQsUUFBTztBQUNOSCxnQkFBY0EsWUFEUjtBQUVOYSxXQUFTQTtBQUZILEVBQVA7QUFJQSxDQXBIRCIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuXHR2YXIgYWN0aXZlWWVzID0gZmFsc2U7XG5cdHZhciBhY3RpdmUgPSAnY2lyY2xlLTEnO1xuXHR2YXIgYWN0aXZlTm8gPSBmYWxzZTtcblx0dmFyIGl0ZW1zWWVzID0ge307XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGNvdW50ID0gMDtcblx0dmFyIG5vbmVFbGVtID0gZmFsc2U7XG5cdHZhciBsYXN0ID0gZmFsc2U7XG5cdHZhciBjbG9zZSA9IGZhbHNlO1xuXG5cdHZhciBfaGFuZGxlRXZlbnQgPSBmdW5jdGlvbihlKSB7XG5cblx0XHRpZiAoZS50eXBlID09PSAnYnRuLWNvbnRyb2wnKSB7XG5cdFx0XHRjbG9zZSA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpZiAoZS5pZCA9PT0gXCJ5ZXNcIikge1xuXHRcdFx0XHRhY3RpdmVZZXMgPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXNZZXMpIHtcblx0XHRcdFx0XHRpZiAoY291bnQgPCAoY291bnRlci0xKSAmJiBpZCAhPT0gYWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRhY3RpdmUgPSBpZDtcblx0XHRcdFx0XHRcdGNvdW50Kytcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY291bnQgPCAoY291bnRlci0xKSAmJiBpZCA9PT0gYWN0aXZlKSB7XG5cdFx0XHRcdFx0XHRub25lRWxlbSA9IGlkO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY291bnQgPT09IChjb3VudGVyLTEpICYmIGlkID09PSBhY3RpdmUpIHtcblx0XHRcdFx0XHRcdGxhc3QgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAoZS5pZCA9PT0gXCJub1wiKSB7XG5cdFx0XHRcdGFjdGl2ZVllcyA9IGZhbHNlO1xuXHRcdFx0XHRhY3RpdmVObyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKGUudHlwZSA9PT0gJ2Zvb3Rlci1jbG9zZScpIHtcblx0XHRcdGNsb3NlID0gdHJ1ZTtcblx0XHRcdGFjdGl2ZVllcyA9IGZhbHNlO1xuXHRcdFx0YWN0aXZlID0gJ2NpcmNsZS0xJztcblx0XHRcdGFjdGl2ZU5vID0gZmFsc2U7XG5cdFx0XHRjb3VudGVyID0gMDtcblx0XHRcdGNvdW50ID0gMDtcblx0XHRcdG5vbmVFbGVtID0gZmFsc2U7XG5cdFx0XHRsYXN0ID0gZmFsc2U7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKGUudHlwZSA9PT0gJ2l0ZW1zLWFkZCcpIHtcblxuXHRcdFx0aXRlbXNZZXMgPSBlLml0ZW1zO1xuXG5cdFx0XHRjb3VudGVyKytcblx0XHR9XG5cdH1cblxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShfaGFuZGxlRXZlbnQpO1xuXHR9XG5cblx0dmFyIGV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBfaGFuZGxlcnMgPSBbXTtcblxuXHRcdHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRmb3IgKHZhciBpID0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdF9oYW5kbGVyc1tpXShldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBzdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRfaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblx0XHR9XG5cdFx0dmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0XHRpZiAoX2hhbmRsZXJzW2ldID09IGhhbmRsZXIpIHtcblx0XHRcdFx0XHRfaGFuZGxlcnMuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZGlzcGF0Y2g6IGRpc3BhdGNoLFxuXHRcdFx0c3Vic2NyaWJlOiBzdWJzY3JpYmUsXG5cdFx0XHR1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcblx0XHR9XG5cdH0oKTtcblxuXHR2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhY3RpdmVZZXM6IGFjdGl2ZVllcyxcblx0XHRcdGFjdGl2ZTogYWN0aXZlLFxuXHRcdFx0YWN0aXZlTm86IGFjdGl2ZU5vLFxuXHRcdFx0bm9uZUVsZW06IG5vbmVFbGVtLFxuXHRcdFx0bGFzdDogbGFzdCxcblx0XHRcdGNsb3NlOiBjbG9zZVxuXHRcdH1cblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cdFx0X2luaXQoKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZXZlbnRFbWl0dGVyOiBldmVudEVtaXR0ZXIsXG5cdFx0Z2V0RGF0YTogZ2V0RGF0YVxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvb3Rlci9mb290ZXIuc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar itemsYes = {};\n\tvar itemsNo = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar top, bottom;\n\tvar active = false;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\n\t\tactive = storeData.active;\n\n\t\tif (storeData.close === true) {\n\t\t\titemsYes = {};\n\t\t\titemsNo = {};\n\t\t\t_handleMutate();\n\t\t\tfor (var key in itemsYes) {\n\t\t\t\titemsYes[key].element.classList.remove('active');\n\t\t\t\titemsYes[key].element.style.display = \"none\";\n\t\t\t\titemsYes[key].element.style.opacity = '1';\n\t\t\t}\n\t\t\titemsYes[active].element.classList.remove('active');\n\t\t\titemsYes[active].element.style.display = \"block\";\n\t\t\ttop.style.display = \"block\";\n\t\t\tbottom.style.display = \"none\";\n\t\t\titemsNo.block.element.style.opacity = '1';\n\t\t\tsetTimeout(function () {\n\t\t\t\titemsNo.block.element.classList.remove('active');\n\t\t\t}, 1000 / 60);\n\t\t\tdocument.getElementsByClassName('thanks')[0].style.opacity = '0';\n\t\t}\n\t\tif (storeData.activeNo === true) {\n\n\t\t\titemsYes[active].element.classList.add('active');\n\t\t\ttop.style.display = \"none\";\n\t\t\tbottom.style.display = \"block\";\n\t\t\tsetTimeout(function () {\n\t\t\t\titemsNo.block.element.classList.add('active');\n\t\t\t}, 1000 / 60);\n\t\t}\n\t\tif (storeData.activeYes === true) {\n\t\t\tif (storeData.noneElem && storeData.last === false) {\n\t\t\t\tvar id = storeData.noneElem;\n\t\t\t\titemsYes[id].element.style.display = 'none';\n\t\t\t\tdelete itemsYes[id];\n\t\t\t\titemsYes[active].element.style.display = 'block';\n\t\t\t} else if (storeData.noneElem && storeData.last === true) {\n\t\t\t\titemsYes[active].element.style.opacity = '0';\n\t\t\t\titemsNo.block.element.style.opacity = '0';\n\t\t\t\tdocument.getElementsByClassName('thanks')[0].style.opacity = '1';\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(itemsYes, itemsNo, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\tif (id.indexOf('circle') !== -1) {\n\t\t\titemsYes[id] = {\n\t\t\t\tid: id,\n\t\t\t\telement: element\n\t\t\t};\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'items-add',\n\t\t\t\titems: itemsYes\n\t\t\t});\n\t\t} else {\n\t\t\titemsNo[id] = {\n\t\t\t\tid: id,\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\t};\n\n\tvar _remove = function _remove(itemsYes, itemsNo, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(itemsYes, itemsNo, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in itemsYes) {\n\t\t\t\tif (itemsYes.hasOwnProperty(id)) {\n\t\t\t\t\tif (itemsYes[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var id in itemsNo) {\n\t\t\t\tif (itemsNo.hasOwnProperty(id)) {\n\t\t\t\t\tif (itemsNo[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(itemsYes, itemsNo, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('amend');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(itemsYes, itemsNo, elements[i]);\n\t\t}\n\t\tfor (var id in itemsYes) {\n\t\t\tif (itemsYes.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(itemsYes, elements, itemsYes[id]);\n\t\t\t}\n\t\t}\n\t\tfor (var id in itemsNo) {\n\t\t\tif (itemsNo.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(itemsNo, elements, itemsNo[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\tfunction isEmptyObject(obj) {\n\t\tfor (var i in obj) {\n\t\t\tif (obj.hasOwnProperty(i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tif (!isEmptyObject(itemsNo)) {\n\t\t\ttop = itemsNo.block.element.getElementsByClassName('top')[0];\n\t\t\tbottom = itemsNo.block.element.getElementsByClassName('bottom')[0];\n\t\t}\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(TweenMax) {'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(6), __webpack_require__(5), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, utils, scrollStore, breakpointStore) {\n\n\t\"use strict\";\n\n\tvar rend = breakpointStore.getData().breakpoint.name;\n\n\tvar _scroll = function _scroll(e) {\n\t\tvar speed = 0.6;\n\t\tvar pos;\n\n\t\tvar animate = function animate() {\n\t\t\tvar obj = {\n\t\t\t\ty: 0\n\t\t\t};\n\n\t\t\tvar scrollPos = scrollStore.getData().top;\n\t\t\tobj.y = scrollPos;\n\t\t\tvar width = document.body.clientWidth;\n\n\t\t\tTweenMax.to(obj, speed, {\n\t\t\t\ty: pos,\n\t\t\t\tease: Sine.easeInOut,\n\t\t\t\tonUpdate: function onUpdate() {\n\t\t\t\t\twindow.scrollTo(0, obj.y);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (e.hasOwnProperty('speed') && typeof e.speed === 'number') {\n\t\t\tspeed = e.speed;\n\t\t}\n\t\tif (e.hasOwnProperty('position') && typeof e.position === 'number') {\n\t\t\tpos = e.position;\n\t\t\tanimate();\n\t\t} else if (e.hasOwnProperty('element')) {\n\t\t\tpos = utils.offset(e.element).top;\n\t\t\tanimate();\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'scroll-to') {\n\t\t\t\t_scroll(e);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3N5bnRoZXRpYy1zY3JvbGwvc3ludGhldGljLXNjcm9sbC52aWV3LmpzP2JmMmYiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsInV0aWxzIiwic2Nyb2xsU3RvcmUiLCJicmVha3BvaW50U3RvcmUiLCJyZW5kIiwiZ2V0RGF0YSIsImJyZWFrcG9pbnQiLCJuYW1lIiwiX3Njcm9sbCIsImUiLCJzcGVlZCIsInBvcyIsImFuaW1hdGUiLCJvYmoiLCJ5Iiwic2Nyb2xsUG9zIiwidG9wIiwid2lkdGgiLCJkb2N1bWVudCIsImJvZHkiLCJjbGllbnRXaWR0aCIsIlR3ZWVuTWF4IiwidG8iLCJlYXNlIiwiU2luZSIsImVhc2VJbk91dCIsIm9uVXBkYXRlIiwid2luZG93Iiwic2Nyb2xsVG8iLCJoYXNPd25Qcm9wZXJ0eSIsInBvc2l0aW9uIiwib2Zmc2V0IiwiZWxlbWVudCIsImluaXQiLCJzdWJzY3JpYmUiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsRUFBa0Isc0JBQWxCLEVBQThCLHNCQUE5QixFQUF3RCx1QkFBeEQsQ0FBUCxrQ0FBOEYsVUFBU0EsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEJDLFdBQTVCLEVBQXlDQyxlQUF6QyxFQUEwRDs7QUFFdko7O0FBRUEsS0FBSUMsT0FBT0QsZ0JBQWdCRSxPQUFoQixHQUEwQkMsVUFBMUIsQ0FBcUNDLElBQWhEOztBQUVBLEtBQUlDLFVBQVUsU0FBVkEsT0FBVSxDQUFTQyxDQUFULEVBQVk7QUFDekIsTUFBSUMsUUFBUSxHQUFaO0FBQ0EsTUFBSUMsR0FBSjs7QUFFQSxNQUFJQyxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUN4QixPQUFJQyxNQUFNO0FBQ1RDLE9BQUc7QUFETSxJQUFWOztBQUlBLE9BQUlDLFlBQVliLFlBQVlHLE9BQVosR0FBc0JXLEdBQXRDO0FBQ0FILE9BQUlDLENBQUosR0FBUUMsU0FBUjtBQUNBLE9BQUlFLFFBQVFDLFNBQVNDLElBQVQsQ0FBY0MsV0FBMUI7O0FBRUFDLFlBQVNDLEVBQVQsQ0FBWVQsR0FBWixFQUFpQkgsS0FBakIsRUFBd0I7QUFDdkJJLE9BQUdILEdBRG9CO0FBRXZCWSxVQUFLQyxLQUFLQyxTQUZhO0FBR3ZCQyxjQUFVLG9CQUFXO0FBQ3BCQyxZQUFPQyxRQUFQLENBQWdCLENBQWhCLEVBQW1CZixJQUFJQyxDQUF2QjtBQUNBO0FBTHNCLElBQXhCO0FBT0EsR0FoQkQ7O0FBa0JBLE1BQUlMLEVBQUVvQixjQUFGLENBQWlCLE9BQWpCLEtBQTZCLE9BQU9wQixFQUFFQyxLQUFULEtBQW1CLFFBQXBELEVBQThEO0FBQzdEQSxXQUFRRCxFQUFFQyxLQUFWO0FBQ0E7QUFDRCxNQUFJRCxFQUFFb0IsY0FBRixDQUFpQixVQUFqQixLQUFnQyxPQUFPcEIsRUFBRXFCLFFBQVQsS0FBc0IsUUFBMUQsRUFBb0U7QUFDbkVuQixTQUFNRixFQUFFcUIsUUFBUjtBQUNBbEI7QUFDQSxHQUhELE1BR08sSUFBSUgsRUFBRW9CLGNBQUYsQ0FBaUIsU0FBakIsQ0FBSixFQUFpQztBQUN2Q2xCLFNBQU1WLE1BQU04QixNQUFOLENBQWF0QixFQUFFdUIsT0FBZixFQUF3QmhCLEdBQTlCO0FBQ0FKO0FBQ0E7QUFDRCxFQWhDRDs7QUFrQ0EsS0FBSXFCLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCakMsYUFBV2tDLFNBQVgsQ0FBcUIsVUFBU3pCLENBQVQsRUFBWTtBQUNoQyxPQUFJQSxFQUFFMEIsSUFBRixLQUFXLFdBQWYsRUFBNEI7QUFDM0IzQixZQUFRQyxDQUFSO0FBQ0E7QUFDRCxHQUpEO0FBS0EsRUFORDs7QUFRQSxRQUFPO0FBQ053QixRQUFNQTtBQURBLEVBQVA7QUFHQSxDQW5ERCxnSiIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi4vdXRpbHMnLCAnLi4vc2Nyb2xsL3Njcm9sbC5zdG9yZScsICcuLi9yZXNpemUvYnJlYWtwb2ludC5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCB1dGlscywgc2Nyb2xsU3RvcmUsIGJyZWFrcG9pbnRTdG9yZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciByZW5kID0gYnJlYWtwb2ludFN0b3JlLmdldERhdGEoKS5icmVha3BvaW50Lm5hbWU7XG5cblx0dmFyIF9zY3JvbGwgPSBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIHNwZWVkID0gMC42O1xuXHRcdHZhciBwb3M7XG5cblx0XHR2YXIgYW5pbWF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0eTogMFxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2Nyb2xsUG9zID0gc2Nyb2xsU3RvcmUuZ2V0RGF0YSgpLnRvcDtcblx0XHRcdG9iai55ID0gc2Nyb2xsUG9zO1xuXHRcdFx0dmFyIHdpZHRoID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcblx0XHRcdFxuXHRcdFx0VHdlZW5NYXgudG8ob2JqLCBzcGVlZCwge1xuXHRcdFx0XHR5OiBwb3MsXG5cdFx0XHRcdGVhc2U6U2luZS5lYXNlSW5PdXQsXG5cdFx0XHRcdG9uVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgb2JqLnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoZS5oYXNPd25Qcm9wZXJ0eSgnc3BlZWQnKSAmJiB0eXBlb2YgZS5zcGVlZCA9PT0gJ251bWJlcicpIHtcblx0XHRcdHNwZWVkID0gZS5zcGVlZDtcblx0XHR9XG5cdFx0aWYgKGUuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykgJiYgdHlwZW9mIGUucG9zaXRpb24gPT09ICdudW1iZXInKSB7XG5cdFx0XHRwb3MgPSBlLnBvc2l0aW9uO1xuXHRcdFx0YW5pbWF0ZSgpO1xuXHRcdH0gZWxzZSBpZiAoZS5oYXNPd25Qcm9wZXJ0eSgnZWxlbWVudCcpKSB7XG5cdFx0XHRwb3MgPSB1dGlscy5vZmZzZXQoZS5lbGVtZW50KS50b3A7XG5cdFx0XHRhbmltYXRlKCk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpIHtcblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS50eXBlID09PSAnc2Nyb2xsLXRvJykge1xuXHRcdFx0XHRfc2Nyb2xsKGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvc3ludGhldGljLXNjcm9sbC9zeW50aGV0aWMtc2Nyb2xsLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange(e) {\n\t\tvar el = e.currentTarget;\n\t\tvar id = el.getAttribute(\"data-id\");\n\t\tdispatcher.dispatch({\n\t\t\telement: items[id].element,\n\t\t\ttype: 'scroll-to'\n\t\t});\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\tif (element.classList.contains(\"anchor-but\")) {\n\t\t\telement.addEventListener(\"click\", _handleChange);\n\t\t} else {\n\t\t\titems[id] = {\n\t\t\t\tid: id,\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements = [];\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar anchors = document.getElementsByClassName('anchor');\n\t\tvar buttons = document.getElementsByClassName('anchor-but');\n\t\tfor (var j = 0; j < anchors.length; j++) {\n\t\t\telements.push(anchors[j]);\n\t\t}\n\t\tfor (var s = 0; s < buttons.length; s++) {\n\t\t\telements.push(buttons[s]);\n\t\t}\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3N5bnRoZXRpYy1zY3JvbGwvc2Nyb2xsLWVsZW0udmlldy5qcz80ZjIxIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpdGVtcyIsImlkTmFtZSIsImlkTnVtIiwiX2hhbmRsZUNoYW5nZSIsImUiLCJlbCIsImN1cnJlbnRUYXJnZXQiLCJpZCIsImdldEF0dHJpYnV0ZSIsImRpc3BhdGNoIiwiZWxlbWVudCIsInR5cGUiLCJfYWRkIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiX3JlbW92ZSIsIml0ZW0iLCJfaGFuZGxlTXV0YXRlIiwiZWxlbWVudHMiLCJjaGVjayIsImZvdW5kIiwiaGFzT3duUHJvcGVydHkiLCJiYWNrQ2hlY2siLCJpIiwibGVuZ3RoIiwiYW5jaG9ycyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImJ1dHRvbnMiLCJqIiwicHVzaCIsInMiLCJpbml0Iiwic3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsQ0FBUCxrQ0FBMEIsVUFBU0EsVUFBVCxFQUFxQjs7QUFFOUM7O0FBRUEsS0FBSUMsUUFBUSxFQUFaOztBQUVBO0FBQ0EsS0FBSUMsU0FBUyxTQUFiO0FBQ0EsS0FBSUMsUUFBUyxDQUFiOztBQUdBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsQ0FBVCxFQUFZO0FBQy9CLE1BQUlDLEtBQUtELEVBQUVFLGFBQVg7QUFDQSxNQUFJQyxLQUFLRixHQUFHRyxZQUFILENBQWdCLFNBQWhCLENBQVQ7QUFDQ1QsYUFBV1UsUUFBWCxDQUFvQjtBQUNuQkMsWUFBU1YsTUFBTU8sRUFBTixFQUFVRyxPQURBO0FBRW5CQyxTQUFNO0FBRmEsR0FBcEI7QUFJRCxFQVBEOztBQVNBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFTWixLQUFULEVBQWdCVSxPQUFoQixFQUF5QjtBQUNuQyxN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QUFFQW5CLGFBQVdtQyxTQUFYLENBQXFCLFVBQVM5QixDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRU8sSUFBRixLQUFXLFFBQWYsRUFBeUI7QUFDeEJPO0FBQ0E7QUFDRCxHQUpEO0FBS0EsRUFSRDs7QUFVQSxRQUFPO0FBQ05lLFFBQU1BO0FBREEsRUFBUDtBQUdBLENBOUdEIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlciddLCBmdW5jdGlvbihkaXNwYXRjaGVyKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGl0ZW1zID0ge31cblxuXHQvLyEhIXJlcGxhY2UgaWYgc2V0dGluZyBkYXRhLWF0dHJpYnV0ZSFcblx0dmFyIGlkTmFtZSA9ICduZXctaWQtJztcblx0dmFyIGlkTnVtICA9IDE7XG5cblxuXHR2YXIgX2hhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgZWwgPSBlLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dmFyIGlkID0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKTtcblx0XHRcdGRpc3BhdGNoZXIuZGlzcGF0Y2goe1xuXHRcdFx0XHRlbGVtZW50OiBpdGVtc1tpZF0uZWxlbWVudCxcblx0XHRcdFx0dHlwZTogJ3Njcm9sbC10bydcblx0XHRcdH0pO1xuXHR9XG5cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXHRcdGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImFuY2hvci1idXRcIikpIHtcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF9oYW5kbGVDaGFuZ2UpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRcdGlkOiBpZCxcblx0XHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdGlmIChpdGVtc1tpZF0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9hZGQoaXRlbXMsIGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBiYWNrQ2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudHMsIGl0ZW0pIHtcblx0XHRcdHZhciBlbGVtZW50ID0gaXRlbS5lbGVtZW50O1xuXHRcdFx0dmFyIGZvdW5kICAgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHNbaV0gPT09IGl0ZW0uZWxlbWVudCkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9yZW1vdmUoaXRlbXMsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vLS0tLS0tLVxuXHRcdHZhciBhbmNob3JzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYW5jaG9yJyk7XG5cdFx0dmFyIGJ1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhbmNob3ItYnV0Jyk7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBhbmNob3JzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRlbGVtZW50cy5wdXNoKGFuY2hvcnNbal0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBzID0gMDsgcyA8IGJ1dHRvbnMubGVuZ3RoOyBzKyspIHtcblx0XHRcdGVsZW1lbnRzLnB1c2goYnV0dG9uc1tzXSk7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoZWNrKGl0ZW1zLCBlbGVtZW50c1tpXSk7XG5cdFx0fVxuXHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdGJhY2tDaGVjayhpdGVtcywgZWxlbWVudHMsIGl0ZW1zW2lkXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vLS0tLS0tLVxuXHR9XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpIHtcblx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS50eXBlID09PSAnbXV0YXRlJykge1xuXHRcdFx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9zeW50aGV0aWMtc2Nyb2xsL3Njcm9sbC1lbGVtLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(45), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\n\t\tvar checkItem = function checkItem(item) {\n\t\t\tvar id = item.id;\n\t\t\tif (!storeData.items.hasOwnProperty(id)) return;\n\n\t\t\tif (item.done === storeData.items[id].done) return;\n\n\t\t\titem.done = storeData.items[id].done;\n\n\t\t\tif (item.done) {\n\t\t\t\titem.element.classList.add('hidden');\n\t\t\t}\n\t\t};\n\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tcheckItem(items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(element) {\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar action = element.getAttribute('data-action');\n\n\t\tif (!id) {\n\t\t\tconsole.warn('data-id attribute is missing');\n\t\t\treturn;\n\t\t}\n\t\tif (!action) {\n\t\t\tconsole.warn('data-action attribute is missing');\n\t\t\treturn;\n\t\t}\n\n\t\telement.addEventListener('click', function (e) {\n\t\t\te.preventDefault();\n\t\t\tvar data = {};\n\t\t\tvar fd = new FormData();\n\n\t\t\titems[id].page++;\n\n\t\t\tdata.page = items[id].page;\n\t\t\tdata.id = id;\n\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'infinite-load-send'\n\t\t\t});\n\n\t\t\tfor (var key in data) {\n\t\t\t\tfd.append(key, data[key]);\n\t\t\t}\n\n\t\t\tutils.ajax.post(action, fd, function (e) {\n\t\t\t\tvar response = JSON.parse(e);\n\t\t\t\tvar done = response.hasOwnProperty('done') && (response.done === 'true' || response.done === true);\n\n\t\t\t\tif (!response.hasOwnProperty('status') || response.status === 'error') {\n\t\t\t\t\titems[id].page--;\n\t\t\t\t} else if (response.status === 'success') {\n\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\ttype: 'infinite-load',\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\tresponse: response.response,\n\t\t\t\t\t\tdone: done\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, true);\n\n\t\t\t//временная заглушка для клиента-----------------------\n\t\t\t// var testObj = {\n\t\t\t// \tstatus: 'success',\n\t\t\t// \tresponse: '<div class=\"item view-popup-toggle\" data-popup=\"feed-popup\"><img src=\"tmp/checkin.jpg\" alt=\"\"></div> <div class=\"item view-popup-toggle\" data-popup=\"feed-popup\"><img src=\"tmp/checkin.jpg\" alt=\"\"></div> <div class=\"item view-popup-toggle\" data-popup=\"feed-popup\"><img src=\"tmp/checkin.jpg\" alt=\"\"></div> <div class=\"item view-popup-toggle\" data-popup=\"feed-popup\"><img src=\"tmp/checkin.jpg\" alt=\"\"></div>',\n\t\t\t// \tdone: false\n\t\t\t// }\n\n\t\t\t// var testJSON = JSON.stringify(testObj);\n\n\t\t\t// setTimeout(function() {\n\t\t\t// \tif (testObj.status === 'success') {\n\t\t\t// \t\tdispatcher.dispatch({\n\t\t\t// \t\t\ttype: 'infinite-load',\n\t\t\t// \t\t\tid: id,\n\t\t\t// \t\t\tresponse: testObj.response,\n\t\t\t// \t\t\tdone: testObj.done\n\t\t\t// \t\t});\n\t\t\t// \t}\n\n\t\t\t// \tif (testObj.status === 'error') {\n\t\t\t// \t\titems[id].page--;\n\t\t\t// \t}\n\t\t\t// }, 2000);\n\t\t\t//----------------------------------------------------\n\t\t}, false);\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element,\n\t\t\tpage: 0,\n\t\t\tdone: false,\n\t\t\taction: action\n\t\t};\n\t};\n\n\tvar init = function init() {\n\t\tvar elements = document.querySelectorAll('.infinite-load-control');\n\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t_add(elements[i]);\n\t\t}\n\n\t\t_handleChange();\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\tvar initialized = false;\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === 'infinite-load') {\n\t\t\t;\n\n\t\t\tif (e.hasOwnProperty('done') && e.done && items.hasOwnProperty(e.id)) {\n\t\t\t\titems[e.id].done = true;\n\n\t\t\t\teventEmitter.dispatch({\n\t\t\t\t\ttype: 'change'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(element) {\n\t\tvar id = element.getAttribute('data-id');\n\t\tvar isDoneAttribute = element.getAttribute('data-done');\n\t\tvar isDone = false;\n\n\t\tif (isDoneAttribute && isDoneAttribute === 'true') {\n\t\t\tisDone = true;\n\t\t}\n\n\t\tif (!id) {\n\t\t\tconsole.warn('data-id attribute is missing');\n\t\t\treturn;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\tdone: isDone\n\t\t};\n\t};\n\n\tvar _init = function _init() {\n\t\tvar elements;\n\n\t\tif (initialized) return;\n\t\tinitialized = true;\n\n\t\telements = document.querySelectorAll('.infinite-load-container');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t_add(elements[i]);\n\t\t}\n\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\titems: items\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2luZmluaXRlLWxvYWQvaW5maW5pdGUtbG9hZC5zdG9yZS5qcz8yOWI2Il0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpdGVtcyIsImluaXRpYWxpemVkIiwiX2hhbmRsZUV2ZW50IiwiZSIsInR5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImRvbmUiLCJpZCIsImV2ZW50RW1pdHRlciIsImRpc3BhdGNoIiwiX2FkZCIsImVsZW1lbnQiLCJnZXRBdHRyaWJ1dGUiLCJpc0RvbmVBdHRyaWJ1dGUiLCJpc0RvbmUiLCJjb25zb2xlIiwid2FybiIsIl9pbml0IiwiZWxlbWVudHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwic3Vic2NyaWJlIiwiX2hhbmRsZXJzIiwiZXZlbnQiLCJoYW5kbGVyIiwicHVzaCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwiZ2V0RGF0YSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLFFBQVEsRUFBWjtBQUNBLEtBQUlDLGNBQWMsS0FBbEI7O0FBRUEsS0FBSUMsZUFBZSxTQUFmQSxZQUFlLENBQVNDLENBQVQsRUFBWTtBQUM5QixNQUFJQSxFQUFFQyxJQUFGLEtBQVcsZUFBZixFQUFnQztBQUFDOztBQUVoQyxPQUFJRCxFQUFFRSxjQUFGLENBQWlCLE1BQWpCLEtBQTRCRixFQUFFRyxJQUE5QixJQUFzQ04sTUFBTUssY0FBTixDQUFxQkYsRUFBRUksRUFBdkIsQ0FBMUMsRUFBc0U7QUFDckVQLFVBQU1HLEVBQUVJLEVBQVIsRUFBWUQsSUFBWixHQUFtQixJQUFuQjs7QUFFQUUsaUJBQWFDLFFBQWIsQ0FBc0I7QUFDckJMLFdBQU07QUFEZSxLQUF0QjtBQUdBO0FBQ0Q7QUFDRCxFQVhEOztBQWFBLEtBQUlNLE9BQU8sU0FBUEEsSUFBTyxDQUFTQyxPQUFULEVBQWtCO0FBQzVCLE1BQUlKLEtBQU1JLFFBQVFDLFlBQVIsQ0FBcUIsU0FBckIsQ0FBVjtBQUNBLE1BQUlDLGtCQUFrQkYsUUFBUUMsWUFBUixDQUFxQixXQUFyQixDQUF0QjtBQUNBLE1BQUlFLFNBQVMsS0FBYjs7QUFFQSxNQUFJRCxtQkFBbUJBLG9CQUFvQixNQUEzQyxFQUFtRDtBQUNsREMsWUFBUyxJQUFUO0FBQ0E7O0FBRUQsTUFBSSxDQUFDUCxFQUFMLEVBQVM7QUFDUlEsV0FBUUMsSUFBUixDQUFhLDhCQUFiO0FBQ0E7QUFDQTs7QUFFRGhCLFFBQU1PLEVBQU4sSUFBWTtBQUNYQSxPQUFJQSxFQURPO0FBRVhELFNBQU1RO0FBRkssR0FBWjtBQUlBLEVBbEJEOztBQW9CQSxLQUFJRyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUN0QixNQUFJQyxRQUFKOztBQUVBLE1BQUlqQixXQUFKLEVBQWlCO0FBQ2pCQSxnQkFBYyxJQUFkOztBQUVBaUIsYUFBV0MsU0FBU0MsZ0JBQVQsQ0FBMEIsMEJBQTFCLENBQVg7QUFDQSxPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsU0FBU0ksTUFBN0IsRUFBcUNELEdBQXJDLEVBQTBDO0FBQ3pDWCxRQUFLUSxTQUFTRyxDQUFULENBQUw7QUFDQTs7QUFFRHRCLGFBQVd3QixTQUFYLENBQXFCckIsWUFBckI7QUFDQSxFQVpEOztBQWNBLEtBQUlNLGVBQWUsWUFBVztBQUM3QixNQUFJZ0IsWUFBWSxFQUFoQjs7QUFFQSxNQUFJZixXQUFXLFNBQVhBLFFBQVcsQ0FBU2dCLEtBQVQsRUFBZ0I7QUFDOUIsUUFBSyxJQUFJSixJQUFJRyxVQUFVRixNQUFWLEdBQW1CLENBQWhDLEVBQW1DRCxLQUFLLENBQXhDLEVBQTJDQSxHQUEzQyxFQUFnRDtBQUMvQ0csY0FBVUgsQ0FBVixFQUFhSSxLQUFiO0FBQ0E7QUFDRCxHQUpEO0FBS0EsTUFBSUYsWUFBWSxTQUFaQSxTQUFZLENBQVNHLE9BQVQsRUFBa0I7QUFDakNGLGFBQVVHLElBQVYsQ0FBZUQsT0FBZjtBQUNBLEdBRkQ7QUFHQSxNQUFJRSxjQUFjLFNBQWRBLFdBQWMsQ0FBU0YsT0FBVCxFQUFrQjtBQUNuQyxRQUFLLElBQUlMLElBQUksQ0FBYixFQUFnQkEsS0FBS0csVUFBVUYsTUFBVixHQUFtQixDQUF4QyxFQUEyQ0QsR0FBM0MsRUFBZ0Q7QUFDL0MsUUFBSUcsVUFBVUgsQ0FBVixLQUFnQkssT0FBcEIsRUFBNkI7QUFDNUJGLGVBQVVLLE1BQVYsQ0FBaUJSLEdBQWpCLEVBQXNCLENBQXRCO0FBQ0E7QUFDRDtBQUNELEdBTkQ7O0FBUUEsU0FBTztBQUNOWixhQUFVQSxRQURKO0FBRU5jLGNBQVdBLFNBRkw7QUFHTkssZ0JBQWFBO0FBSFAsR0FBUDtBQUtBLEVBeEJrQixFQUFuQjs7QUEwQkEsS0FBSUUsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDeEIsU0FBTztBQUNOOUIsVUFBT0E7QUFERCxHQUFQO0FBR0EsRUFKRDs7QUFNQSxLQUFJLENBQUNDLFdBQUwsRUFBa0I7QUFDakJnQjtBQUNBOztBQUVELFFBQU87QUFDTlQsZ0JBQWNBLFlBRFI7QUFFTnNCLFdBQVNBO0FBRkgsRUFBUDtBQUlBLENBOUZEIiwiZmlsZSI6IjQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlciddLCBmdW5jdGlvbihkaXNwYXRjaGVyKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGl0ZW1zID0ge31cblx0dmFyIGluaXRpYWxpemVkID0gZmFsc2U7XG5cblx0dmFyIF9oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS50eXBlID09PSAnaW5maW5pdGUtbG9hZCcpIHs7XG5cblx0XHRcdGlmIChlLmhhc093blByb3BlcnR5KCdkb25lJykgJiYgZS5kb25lICYmIGl0ZW1zLmhhc093blByb3BlcnR5KGUuaWQpKSB7XG5cdFx0XHRcdGl0ZW1zW2UuaWRdLmRvbmUgPSB0cnVlO1xuXG5cdFx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdFx0dHlwZTogJ2NoYW5nZSdcblx0XHRcdFx0fSk7XG5cdFx0XHR9IFxuXHRcdH1cblx0fVxuXG5cdHZhciBfYWRkID0gZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHZhciBpZCAgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuXHRcdHZhciBpc0RvbmVBdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1kb25lJyk7XG5cdFx0dmFyIGlzRG9uZSA9IGZhbHNlO1xuXG5cdFx0aWYgKGlzRG9uZUF0dHJpYnV0ZSAmJiBpc0RvbmVBdHRyaWJ1dGUgPT09ICd0cnVlJykge1xuXHRcdFx0aXNEb25lID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ2RhdGEtaWQgYXR0cmlidXRlIGlzIG1pc3NpbmcnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRkb25lOiBpc0RvbmVcblx0XHR9XG5cdH1cblxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudHM7XG5cblx0XHRpZiAoaW5pdGlhbGl6ZWQpIHJldHVybjtcblx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHRlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbmZpbml0ZS1sb2FkLWNvbnRhaW5lcicpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdF9hZGQoZWxlbWVudHNbaV0pO1xuXHRcdH1cblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKF9oYW5kbGVFdmVudCk7XG5cdH1cblxuXHR2YXIgZXZlbnRFbWl0dGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIF9oYW5kbGVycyA9IFtdO1xuXG5cdFx0dmFyIGRpc3BhdGNoID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0X2hhbmRsZXJzW2ldKGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHN1YnNjcmliZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdF9oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuXHRcdH1cblx0XHR2YXIgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBfaGFuZGxlcnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdFx0XHRcdGlmIChfaGFuZGxlcnNbaV0gPT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdF9oYW5kbGVycy5zcGxpY2UoaS0tLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRkaXNwYXRjaDogZGlzcGF0Y2gsXG5cdFx0XHRzdWJzY3JpYmU6IHN1YnNjcmliZSxcblx0XHRcdHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuXHRcdH1cblx0fSgpO1xuXG5cdHZhciBnZXREYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGl0ZW1zOiBpdGVtc1xuXHRcdH1cblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRfaW5pdCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcixcblx0XHRnZXREYXRhOiBnZXREYXRhXG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvaW5maW5pdGUtbG9hZC9pbmZpbml0ZS1sb2FkLnN0b3JlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(45), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t};\n\n\tvar _insertData = function _insertData(item, data) {\n\t\tvar div = document.createElement('div');\n\n\t\tvar addElement = function addElement(element) {\n\t\t\telement.classList.add('hidden');\n\t\t\titem.element.appendChild(element);\n\n\t\t\tsetTimeout(function () {\n\t\t\t\telement.classList.remove('hidden');\n\t\t\t}, 100);\n\t\t};\n\n\t\tdiv.innerHTML = data;\n\n\t\tfor (var i = 0; i < div.childNodes.length; i++) {\n\t\t\taddElement(div.childNodes[i]);\n\t\t}\n\n\t\tdispatcher.dispatch({\n\t\t\ttype: 'content-mutate',\n\t\t\tme: 'infinite-load.view'\n\t\t});\n\t};\n\n\tvar _add = function _add(element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tconsole.warn('data-id attribute is missing');\n\t\t\treturn;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar init = function init() {\n\t\tvar elements = document.querySelectorAll('.infinite-load-container');\n\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t_add(elements[i]);\n\t\t}\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'infinite-load') {\n\t\t\t\tif (!items.hasOwnProperty(e.id)) return;\n\n\t\t\t\t_insertData(items[e.id], e.response);\n\n\t\t\t\tif (e.hasOwnProperty('done') && e.done) {\n\t\t\t\t\tdispatcher.dispatch({\n\t\t\t\t\t\ttype: 'infinite-load-done',\n\t\t\t\t\t\tid: e.id\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t_handleChange();\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2luZmluaXRlLWxvYWQvaW5maW5pdGUtbG9hZC52aWV3LmpzPzhmMjgiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsInN0b3JlIiwidXRpbHMiLCJpdGVtcyIsIl9oYW5kbGVDaGFuZ2UiLCJzdG9yZURhdGEiLCJnZXREYXRhIiwiX2luc2VydERhdGEiLCJpdGVtIiwiZGF0YSIsImRpdiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFkZEVsZW1lbnQiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJzZXRUaW1lb3V0IiwicmVtb3ZlIiwiaW5uZXJIVE1MIiwiaSIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJkaXNwYXRjaCIsInR5cGUiLCJtZSIsIl9hZGQiLCJpZCIsImdldEF0dHJpYnV0ZSIsImNvbnNvbGUiLCJ3YXJuIiwiaW5pdCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInN1YnNjcmliZSIsImUiLCJoYXNPd25Qcm9wZXJ0eSIsInJlc3BvbnNlIiwiZG9uZSIsImV2ZW50RW1pdHRlciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELEVBQWtCLHVCQUFsQixFQUEyQyxzQkFBM0MsQ0FBUCxrQ0FBK0QsVUFBU0EsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEJDLEtBQTVCLEVBQW1DOztBQUVqRzs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUEsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXO0FBQzlCLE1BQUlDLFlBQVlKLE1BQU1LLE9BQU4sRUFBaEI7QUFDQSxFQUZEOztBQUlBLEtBQUlDLGNBQWMsU0FBZEEsV0FBYyxDQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBcUI7QUFDdEMsTUFBSUMsTUFBTUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFWOztBQUVBLE1BQUlDLGFBQWEsU0FBYkEsVUFBYSxDQUFTQyxPQUFULEVBQWtCO0FBQ2xDQSxXQUFRQyxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixRQUF0QjtBQUNBUixRQUFLTSxPQUFMLENBQWFHLFdBQWIsQ0FBeUJILE9BQXpCOztBQUVBSSxjQUFXLFlBQVc7QUFDckJKLFlBQVFDLFNBQVIsQ0FBa0JJLE1BQWxCLENBQXlCLFFBQXpCO0FBQ0EsSUFGRCxFQUVHLEdBRkg7QUFHQSxHQVBEOztBQVNBVCxNQUFJVSxTQUFKLEdBQWdCWCxJQUFoQjs7QUFFQSxPQUFLLElBQUlZLElBQUksQ0FBYixFQUFnQkEsSUFBSVgsSUFBSVksVUFBSixDQUFlQyxNQUFuQyxFQUEyQ0YsR0FBM0MsRUFBZ0Q7QUFDL0NSLGNBQVdILElBQUlZLFVBQUosQ0FBZUQsQ0FBZixDQUFYO0FBQ0E7O0FBRURyQixhQUFXd0IsUUFBWCxDQUFvQjtBQUNuQkMsU0FBTSxnQkFEYTtBQUVuQkMsT0FBSTtBQUZlLEdBQXBCO0FBSUEsRUF0QkQ7O0FBd0JBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFTYixPQUFULEVBQWtCO0FBQzVCLE1BQUljLEtBQUtkLFFBQVFlLFlBQVIsQ0FBcUIsU0FBckIsQ0FBVDs7QUFFQSxNQUFJLENBQUNELEVBQUwsRUFBUztBQUNSRSxXQUFRQyxJQUFSLENBQWEsOEJBQWI7QUFDQTtBQUNBOztBQUVENUIsUUFBTXlCLEVBQU4sSUFBWTtBQUNYQSxPQUFJQSxFQURPO0FBRVhkLFlBQVNBO0FBRkUsR0FBWjtBQUlBLEVBWkQ7O0FBY0EsS0FBSWtCLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCLE1BQUlDLFdBQVd0QixTQUFTdUIsZ0JBQVQsQ0FBMEIsMEJBQTFCLENBQWY7O0FBRUEsT0FBSyxJQUFJYixJQUFJLENBQWIsRUFBZ0JBLElBQUlZLFNBQVNWLE1BQTdCLEVBQXFDRixHQUFyQyxFQUEwQztBQUN6Q00sUUFBS00sU0FBU1osQ0FBVCxDQUFMO0FBQ0E7O0FBRURyQixhQUFXbUMsU0FBWCxDQUFxQixVQUFTQyxDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRVgsSUFBRixLQUFXLGVBQWYsRUFBZ0M7QUFDL0IsUUFBSSxDQUFDdEIsTUFBTWtDLGNBQU4sQ0FBcUJELEVBQUVSLEVBQXZCLENBQUwsRUFBaUM7O0FBRWpDckIsZ0JBQVlKLE1BQU1pQyxFQUFFUixFQUFSLENBQVosRUFBeUJRLEVBQUVFLFFBQTNCOztBQUVBLFFBQUlGLEVBQUVDLGNBQUYsQ0FBaUIsTUFBakIsS0FBNEJELEVBQUVHLElBQWxDLEVBQXdDO0FBQ3ZDdkMsZ0JBQVd3QixRQUFYLENBQW9CO0FBQ25CQyxZQUFNLG9CQURhO0FBRW5CRyxVQUFJUSxFQUFFUjtBQUZhLE1BQXBCO0FBSUE7QUFDRDtBQUNELEdBYkQ7O0FBZUF4QjtBQUNBSCxRQUFNdUMsWUFBTixDQUFtQkwsU0FBbkIsQ0FBNkIvQixhQUE3QjtBQUNBLEVBeEJEOztBQTBCQSxRQUFPO0FBQ040QixRQUFNQTtBQURBLEVBQVA7QUFHQSxDQTdFRCIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi9pbmZpbml0ZS1sb2FkLnN0b3JlJywgJy4uL3V0aWxzJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIsIHN0b3JlLCB1dGlscykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RvcmVEYXRhID0gc3RvcmUuZ2V0RGF0YSgpO1xuXHR9XG5cblx0dmFyIF9pbnNlcnREYXRhID0gZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuXHRcdHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcblx0XHRcdGl0ZW0uZWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcblx0XHRcdH0sIDEwMCk7XG5cdFx0fVxuXG5cdFx0ZGl2LmlubmVySFRNTCA9IGRhdGE7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRpdi5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRhZGRFbGVtZW50KGRpdi5jaGlsZE5vZGVzW2ldKTtcblx0XHR9XG5cblx0XHRkaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHRcdHR5cGU6ICdjb250ZW50LW11dGF0ZScsXG5cdFx0XHRtZTogJ2luZmluaXRlLWxvYWQudmlldydcblx0XHR9KTtcblx0fVxuXG5cdHZhciBfYWRkID0gZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ2RhdGEtaWQgYXR0cmlidXRlIGlzIG1pc3NpbmcnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRlbGVtZW50OiBlbGVtZW50XG5cdFx0fVxuXHR9XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5maW5pdGUtbG9hZC1jb250YWluZXInKTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdF9hZGQoZWxlbWVudHNbaV0pO1xuXHRcdH1cblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdpbmZpbml0ZS1sb2FkJykge1xuXHRcdFx0XHRpZiAoIWl0ZW1zLmhhc093blByb3BlcnR5KGUuaWQpKSByZXR1cm47XG5cblx0XHRcdFx0X2luc2VydERhdGEoaXRlbXNbZS5pZF0sIGUucmVzcG9uc2UpO1xuXG5cdFx0XHRcdGlmIChlLmhhc093blByb3BlcnR5KCdkb25lJykgJiYgZS5kb25lKSB7XG5cdFx0XHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnaW5maW5pdGUtbG9hZC1kb25lJyxcblx0XHRcdFx0XHRcdGlkOiBlLmlkXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdF9oYW5kbGVDaGFuZ2UoKTtcblx0XHRzdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYW5kbGVDaGFuZ2UpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvaW5maW5pdGUtbG9hZC9pbmZpbml0ZS1sb2FkLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, breakpoint) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar point = \"\";\n\n\tvar _handlePoint = function _handlePoint() {\n\t\tpoint = breakpoint.getData().breakpoint.name;\n\t};\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t\tvar w = storeData.width;\n\t\tvar userText = document.getElementsByClassName('user-text')[0];\n\t\tif (!userText) {\n\t\t\treturn;\n\t\t}\n\t\tvar userTextW = userText.offsetWidth;\n\t\tvar delta = (w - userTextW) / 2;\n\n\t\tfor (var key in items) {\n\t\t\tif (items[key].element.parentNode.classList.contains('none-standart')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (point === \"desktop\") {\n\t\t\t\titems[key].element.style.width = \"100vw\";\n\t\t\t\titems[key].element.style.marginLeft = \"-\" + delta + \"px\";\n\t\t\t} else if (point === \"tablet\") {\n\t\t\t\titems[key].element.style.width = \"100vw\";\n\t\t\t\titems[key].element.style.marginLeft = \"-\" + delta + \"px\";\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar userText = document.getElementsByClassName('user-text')[0];\n\t\tif (!userText) {\n\t\t\treturn;\n\t\t}\n\t\telements = userText.getElementsByClassName('block-center');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handlePoint();\n\t\t_handleChange();\n\n\t\tbreakpoint.eventEmitter.subscribe(_handlePoint);\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Swiper) {'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(16), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, resizeStore) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\n\t\tfor (var key in items) {\n\t\t\tvar slider = new Swiper(items[key].element, {\n\t\t\t\tnextButton: '.swiper-button-next',\n\t\t\t\tprevButton: '.swiper-button-prev',\n\t\t\t\teffect: 'fade',\n\t\t\t\tspeed: 700,\n\t\t\t\tloop: true,\n\t\t\t\tpagination: '.swiper-pagination',\n\t\t\t\tpaginationClickable: true\n\t\t\t});\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('slider-text');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tresizeStore.eventEmitter.subscribe(_handleChange);\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3NsaWRlci9zbGlkZXIudmlldy5qcz83YmJlIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJzdG9yZSIsInJlc2l6ZVN0b3JlIiwiaXRlbXMiLCJpZE5hbWUiLCJpZE51bSIsIl9oYW5kbGVDaGFuZ2UiLCJrZXkiLCJzbGlkZXIiLCJTd2lwZXIiLCJlbGVtZW50IiwibmV4dEJ1dHRvbiIsInByZXZCdXR0b24iLCJlZmZlY3QiLCJzcGVlZCIsImxvb3AiLCJwYWdpbmF0aW9uIiwicGFnaW5hdGlvbkNsaWNrYWJsZSIsIl9hZGQiLCJpZCIsImdldEF0dHJpYnV0ZSIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImxlbmd0aCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJlIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELEVBQWtCLHVCQUFsQixFQUFpRCxzQkFBakQsQ0FBUCxrQ0FBbUYsVUFBU0EsVUFBVCxFQUFxQkMsS0FBckIsRUFBNEJDLFdBQTVCLEVBQXlDOztBQUUzSDs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUE7QUFDQSxLQUFJQyxTQUFTLFNBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7O0FBR0EsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXOztBQUU5QixPQUFLLElBQUlDLEdBQVQsSUFBZ0JKLEtBQWhCLEVBQXVCO0FBQ3RCLE9BQUlLLFNBQVMsSUFBSUMsTUFBSixDQUFXTixNQUFNSSxHQUFOLEVBQVdHLE9BQXRCLEVBQStCO0FBQzNDQyxnQkFBWSxxQkFEK0I7QUFFckNDLGdCQUFZLHFCQUZ5QjtBQUdyQ0MsWUFBUSxNQUg2QjtBQUly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QU1BO0FBREEsRUFBUDtBQUdBLENBaEhELGdKIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlcicsICcuLi9yZXNpemUvYnJlYWtwb2ludC5zdG9yZScgLCAnLi4vcmVzaXplL3Jlc2l6ZS5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCBzdG9yZSwgcmVzaXplU3RvcmUpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdC8vISEhcmVwbGFjZSBpZiBzZXR0aW5nIGRhdGEtYXR0cmlidXRlIVxuXHR2YXIgaWROYW1lID0gJ25ldy1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0Zm9yICh2YXIga2V5IGluIGl0ZW1zKSB7XG5cdFx0XHR2YXIgc2xpZGVyID0gbmV3IFN3aXBlcihpdGVtc1trZXldLmVsZW1lbnQsIHtcblx0XHRcdFx0bmV4dEJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLW5leHQnLFxuXHQgICAgICAgIFx0cHJldkJ1dHRvbjogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxuXHQgICAgICAgIFx0ZWZmZWN0OiAnZmFkZScsXG5cdCAgICAgICAgXHRzcGVlZDogNzAwLFxuXHQgICAgICAgIFx0bG9vcDogdHJ1ZSxcblx0ICAgICAgICBcdHBhZ2luYXRpb246ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxuXHQgICAgICAgIFx0cGFnaW5hdGlvbkNsaWNrYWJsZTogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXG5cdFx0aXRlbXNbaWRdID0ge1xuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLy0tLS0tLS1cblx0XHRlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NsaWRlci10ZXh0Jyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cblx0XHRyZXNpemVTdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYW5kbGVDaGFuZ2UpO1xuXHRcdHN0b3JlLmV2ZW50RW1pdHRlci5zdWJzY3JpYmUoX2hhbmRsZUNoYW5nZSk7XG5cblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdtdXRhdGUnKSB7XG5cdFx0XHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRcdFx0X2hhbmRsZUNoYW5nZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvc2xpZGVyL3NsaWRlci52aWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Swiper 3.3.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * \n * http://www.idangero.us/swiper/\n * \n * Copyright 2016, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n * \n * Licensed under MIT\n * \n * Released on: February 7, 2016\n */\n!function () {\n  \"use strict\";\n  function e(e) {\n    e.fn.swiper = function (a) {\n      var r;return e(this).each(function () {\n        var e = new t(this, a);r || (r = e);\n      }), r;\n    };\n  }var a,\n      t = function t(e, i) {\n    function s(e) {\n      return Math.floor(e);\n    }function n() {\n      b.autoplayTimeoutId = setTimeout(function () {\n        b.params.loop ? (b.fixLoop(), b._slideNext(), b.emit(\"onAutoplay\", b)) : b.isEnd ? i.autoplayStopOnLast ? b.stopAutoplay() : (b._slideTo(0), b.emit(\"onAutoplay\", b)) : (b._slideNext(), b.emit(\"onAutoplay\", b));\n      }, b.params.autoplay);\n    }function o(e, t) {\n      var r = a(e.target);if (!r.is(t)) if (\"string\" == typeof t) r = r.parents(t);else if (t.nodeType) {\n        var i;return r.parents().each(function (e, a) {\n          a === t && (i = t);\n        }), i ? t : void 0;\n      }if (0 !== r.length) return r[0];\n    }function l(e, a) {\n      a = a || {};var t = window.MutationObserver || window.WebkitMutationObserver,\n          r = new t(function (e) {\n        e.forEach(function (e) {\n          b.onResize(!0), b.emit(\"onObserverUpdate\", b, e);\n        });\n      });r.observe(e, { attributes: \"undefined\" == typeof a.attributes ? !0 : a.attributes, childList: \"undefined\" == typeof a.childList ? !0 : a.childList, characterData: \"undefined\" == typeof a.characterData ? !0 : a.characterData }), b.observers.push(r);\n    }function p(e) {\n      e.originalEvent && (e = e.originalEvent);var a = e.keyCode || e.charCode;if (!b.params.allowSwipeToNext && (b.isHorizontal() && 39 === a || !b.isHorizontal() && 40 === a)) return !1;if (!b.params.allowSwipeToPrev && (b.isHorizontal() && 37 === a || !b.isHorizontal() && 38 === a)) return !1;if (!(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey || document.activeElement && document.activeElement.nodeName && (\"input\" === document.activeElement.nodeName.toLowerCase() || \"textarea\" === document.activeElement.nodeName.toLowerCase()))) {\n        if (37 === a || 39 === a || 38 === a || 40 === a) {\n          var t = !1;if (b.container.parents(\".swiper-slide\").length > 0 && 0 === b.container.parents(\".swiper-slide-active\").length) return;var r = { left: window.pageXOffset, top: window.pageYOffset },\n              i = window.innerWidth,\n              s = window.innerHeight,\n              n = b.container.offset();b.rtl && (n.left = n.left - b.container[0].scrollLeft);for (var o = [[n.left, n.top], [n.left + b.width, n.top], [n.left, n.top + b.height], [n.left + b.width, n.top + b.height]], l = 0; l < o.length; l++) {\n            var p = o[l];p[0] >= r.left && p[0] <= r.left + i && p[1] >= r.top && p[1] <= r.top + s && (t = !0);\n          }if (!t) return;\n        }b.isHorizontal() ? ((37 === a || 39 === a) && (e.preventDefault ? e.preventDefault() : e.returnValue = !1), (39 === a && !b.rtl || 37 === a && b.rtl) && b.slideNext(), (37 === a && !b.rtl || 39 === a && b.rtl) && b.slidePrev()) : ((38 === a || 40 === a) && (e.preventDefault ? e.preventDefault() : e.returnValue = !1), 40 === a && b.slideNext(), 38 === a && b.slidePrev());\n      }\n    }function d(e) {\n      e.originalEvent && (e = e.originalEvent);var a = b.mousewheel.event,\n          t = 0,\n          r = b.rtl ? -1 : 1;if (\"mousewheel\" === a) {\n        if (b.params.mousewheelForceToAxis) {\n          if (b.isHorizontal()) {\n            if (!(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))) return;t = e.wheelDeltaX * r;\n          } else {\n            if (!(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))) return;t = e.wheelDeltaY;\n          }\n        } else t = Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY) ? -e.wheelDeltaX * r : -e.wheelDeltaY;\n      } else if (\"DOMMouseScroll\" === a) t = -e.detail;else if (\"wheel\" === a) if (b.params.mousewheelForceToAxis) {\n        if (b.isHorizontal()) {\n          if (!(Math.abs(e.deltaX) > Math.abs(e.deltaY))) return;t = -e.deltaX * r;\n        } else {\n          if (!(Math.abs(e.deltaY) > Math.abs(e.deltaX))) return;t = -e.deltaY;\n        }\n      } else t = Math.abs(e.deltaX) > Math.abs(e.deltaY) ? -e.deltaX * r : -e.deltaY;if (0 !== t) {\n        if (b.params.mousewheelInvert && (t = -t), b.params.freeMode) {\n          var i = b.getWrapperTranslate() + t * b.params.mousewheelSensitivity,\n              s = b.isBeginning,\n              n = b.isEnd;if (i >= b.minTranslate() && (i = b.minTranslate()), i <= b.maxTranslate() && (i = b.maxTranslate()), b.setWrapperTransition(0), b.setWrapperTranslate(i), b.updateProgress(), b.updateActiveIndex(), (!s && b.isBeginning || !n && b.isEnd) && b.updateClasses(), b.params.freeModeSticky ? (clearTimeout(b.mousewheel.timeout), b.mousewheel.timeout = setTimeout(function () {\n            b.slideReset();\n          }, 300)) : b.params.lazyLoading && b.lazy && b.lazy.load(), 0 === i || i === b.maxTranslate()) return;\n        } else {\n          if (new window.Date().getTime() - b.mousewheel.lastScrollTime > 60) if (0 > t) {\n            if (b.isEnd && !b.params.loop || b.animating) {\n              if (b.params.mousewheelReleaseOnEdges) return !0;\n            } else b.slideNext();\n          } else if (b.isBeginning && !b.params.loop || b.animating) {\n            if (b.params.mousewheelReleaseOnEdges) return !0;\n          } else b.slidePrev();b.mousewheel.lastScrollTime = new window.Date().getTime();\n        }return b.params.autoplay && b.stopAutoplay(), e.preventDefault ? e.preventDefault() : e.returnValue = !1, !1;\n      }\n    }function u(e, t) {\n      e = a(e);var r,\n          i,\n          s,\n          n = b.rtl ? -1 : 1;r = e.attr(\"data-swiper-parallax\") || \"0\", i = e.attr(\"data-swiper-parallax-x\"), s = e.attr(\"data-swiper-parallax-y\"), i || s ? (i = i || \"0\", s = s || \"0\") : b.isHorizontal() ? (i = r, s = \"0\") : (s = r, i = \"0\"), i = i.indexOf(\"%\") >= 0 ? parseInt(i, 10) * t * n + \"%\" : i * t * n + \"px\", s = s.indexOf(\"%\") >= 0 ? parseInt(s, 10) * t + \"%\" : s * t + \"px\", e.transform(\"translate3d(\" + i + \", \" + s + \",0px)\");\n    }function c(e) {\n      return 0 !== e.indexOf(\"on\") && (e = e[0] !== e[0].toUpperCase() ? \"on\" + e[0].toUpperCase() + e.substring(1) : \"on\" + e), e;\n    }if (!(this instanceof t)) return new t(e, i);var m = { direction: \"horizontal\", touchEventsTarget: \"container\", initialSlide: 0, speed: 300, autoplay: !1, autoplayDisableOnInteraction: !0, autoplayStopOnLast: !1, iOSEdgeSwipeDetection: !1, iOSEdgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: \"slide\", coverflow: { rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: !0 }, flip: { slideShadows: !0, limitRotation: !0 }, cube: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 }, fade: { crossFade: !1 }, parallax: !1, scrollbar: null, scrollbarHide: !0, scrollbarDraggable: !1, scrollbarSnapOnRelease: !1, keyboardControl: !1, mousewheelControl: !1, mousewheelReleaseOnEdges: !1, mousewheelInvert: !1, mousewheelForceToAxis: !1, mousewheelSensitivity: 1, hashnav: !1, breakpoints: void 0, spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: \"column\", slidesPerGroup: 1, centeredSlides: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, onlyExternal: !1, threshold: 0, touchMoveStopPropagation: !0, uniqueNavElements: !0, pagination: null, paginationElement: \"span\", paginationClickable: !1, paginationHide: !1, paginationBulletRender: null, paginationProgressRender: null, paginationFractionRender: null, paginationCustomRender: null, paginationType: \"bullets\", resistance: !0, resistanceRatio: .85, nextButton: null, prevButton: null, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, lazyLoading: !1, lazyLoadingInPrevNext: !1, lazyLoadingInPrevNextAmount: 1, lazyLoadingOnTransitionStart: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, control: void 0, controlInverse: !1, controlBy: \"slide\", allowSwipeToPrev: !0, allowSwipeToNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: \"swiper-no-swiping\", slideClass: \"swiper-slide\", slideActiveClass: \"swiper-slide-active\", slideVisibleClass: \"swiper-slide-visible\", slideDuplicateClass: \"swiper-slide-duplicate\", slideNextClass: \"swiper-slide-next\", slidePrevClass: \"swiper-slide-prev\", wrapperClass: \"swiper-wrapper\", bulletClass: \"swiper-pagination-bullet\", bulletActiveClass: \"swiper-pagination-bullet-active\", buttonDisabledClass: \"swiper-button-disabled\", paginationCurrentClass: \"swiper-pagination-current\", paginationTotalClass: \"swiper-pagination-total\", paginationHiddenClass: \"swiper-pagination-hidden\", paginationProgressbarClass: \"swiper-pagination-progressbar\", observer: !1, observeParents: !1, a11y: !1, prevSlideMessage: \"Previous slide\", nextSlideMessage: \"Next slide\", firstSlideMessage: \"This is the first slide\", lastSlideMessage: \"This is the last slide\", paginationBulletMessage: \"Go to slide {{index}}\", runCallbacksOnInit: !0 },\n        h = i && i.virtualTranslate;i = i || {};var f = {};for (var g in i) {\n      if (\"object\" != _typeof(i[g]) || null === i[g] || i[g].nodeType || i[g] === window || i[g] === document || \"undefined\" != typeof r && i[g] instanceof r || \"undefined\" != typeof jQuery && i[g] instanceof jQuery) f[g] = i[g];else {\n        f[g] = {};for (var v in i[g]) {\n          f[g][v] = i[g][v];\n        }\n      }\n    }for (var w in m) {\n      if (\"undefined\" == typeof i[w]) i[w] = m[w];else if (\"object\" == _typeof(i[w])) for (var y in m[w]) {\n        \"undefined\" == typeof i[w][y] && (i[w][y] = m[w][y]);\n      }\n    }var b = this;if (b.params = i, b.originalParams = f, b.classNames = [], \"undefined\" != typeof a && \"undefined\" != typeof r && (a = r), (\"undefined\" != typeof a || (a = \"undefined\" == typeof r ? window.Dom7 || window.Zepto || window.jQuery : r)) && (b.$ = a, b.currentBreakpoint = void 0, b.getActiveBreakpoint = function () {\n      if (!b.params.breakpoints) return !1;var e,\n          a = !1,\n          t = [];for (e in b.params.breakpoints) {\n        b.params.breakpoints.hasOwnProperty(e) && t.push(e);\n      }t.sort(function (e, a) {\n        return parseInt(e, 10) > parseInt(a, 10);\n      });for (var r = 0; r < t.length; r++) {\n        e = t[r], e >= window.innerWidth && !a && (a = e);\n      }return a || \"max\";\n    }, b.setBreakpoint = function () {\n      var e = b.getActiveBreakpoint();if (e && b.currentBreakpoint !== e) {\n        var a = e in b.params.breakpoints ? b.params.breakpoints[e] : b.originalParams,\n            t = b.params.loop && a.slidesPerView !== b.params.slidesPerView;for (var r in a) {\n          b.params[r] = a[r];\n        }b.currentBreakpoint = e, t && b.destroyLoop && b.reLoop(!0);\n      }\n    }, b.params.breakpoints && b.setBreakpoint(), b.container = a(e), 0 !== b.container.length)) {\n      if (b.container.length > 1) {\n        var x = [];return b.container.each(function () {\n          x.push(new t(this, i));\n        }), x;\n      }b.container[0].swiper = b, b.container.data(\"swiper\", b), b.classNames.push(\"swiper-container-\" + b.params.direction), b.params.freeMode && b.classNames.push(\"swiper-container-free-mode\"), b.support.flexbox || (b.classNames.push(\"swiper-container-no-flexbox\"), b.params.slidesPerColumn = 1), b.params.autoHeight && b.classNames.push(\"swiper-container-autoheight\"), (b.params.parallax || b.params.watchSlidesVisibility) && (b.params.watchSlidesProgress = !0), [\"cube\", \"coverflow\", \"flip\"].indexOf(b.params.effect) >= 0 && (b.support.transforms3d ? (b.params.watchSlidesProgress = !0, b.classNames.push(\"swiper-container-3d\")) : b.params.effect = \"slide\"), \"slide\" !== b.params.effect && b.classNames.push(\"swiper-container-\" + b.params.effect), \"cube\" === b.params.effect && (b.params.resistanceRatio = 0, b.params.slidesPerView = 1, b.params.slidesPerColumn = 1, b.params.slidesPerGroup = 1, b.params.centeredSlides = !1, b.params.spaceBetween = 0, b.params.virtualTranslate = !0, b.params.setWrapperSize = !1), (\"fade\" === b.params.effect || \"flip\" === b.params.effect) && (b.params.slidesPerView = 1, b.params.slidesPerColumn = 1, b.params.slidesPerGroup = 1, b.params.watchSlidesProgress = !0, b.params.spaceBetween = 0, b.params.setWrapperSize = !1, \"undefined\" == typeof h && (b.params.virtualTranslate = !0)), b.params.grabCursor && b.support.touch && (b.params.grabCursor = !1), b.wrapper = b.container.children(\".\" + b.params.wrapperClass), b.params.pagination && (b.paginationContainer = a(b.params.pagination), b.params.uniqueNavElements && \"string\" == typeof b.params.pagination && b.paginationContainer.length > 1 && 1 === b.container.find(b.params.pagination).length && (b.paginationContainer = b.container.find(b.params.pagination)), \"bullets\" === b.params.paginationType && b.params.paginationClickable ? b.paginationContainer.addClass(\"swiper-pagination-clickable\") : b.params.paginationClickable = !1, b.paginationContainer.addClass(\"swiper-pagination-\" + b.params.paginationType)), (b.params.nextButton || b.params.prevButton) && (b.params.nextButton && (b.nextButton = a(b.params.nextButton), b.params.uniqueNavElements && \"string\" == typeof b.params.nextButton && b.nextButton.length > 1 && 1 === b.container.find(b.params.nextButton).length && (b.nextButton = b.container.find(b.params.nextButton))), b.params.prevButton && (b.prevButton = a(b.params.prevButton), b.params.uniqueNavElements && \"string\" == typeof b.params.prevButton && b.prevButton.length > 1 && 1 === b.container.find(b.params.prevButton).length && (b.prevButton = b.container.find(b.params.prevButton)))), b.isHorizontal = function () {\n        return \"horizontal\" === b.params.direction;\n      }, b.rtl = b.isHorizontal() && (\"rtl\" === b.container[0].dir.toLowerCase() || \"rtl\" === b.container.css(\"direction\")), b.rtl && b.classNames.push(\"swiper-container-rtl\"), b.rtl && (b.wrongRTL = \"-webkit-box\" === b.wrapper.css(\"display\")), b.params.slidesPerColumn > 1 && b.classNames.push(\"swiper-container-multirow\"), b.device.android && b.classNames.push(\"swiper-container-android\"), b.container.addClass(b.classNames.join(\" \")), b.translate = 0, b.progress = 0, b.velocity = 0, b.lockSwipeToNext = function () {\n        b.params.allowSwipeToNext = !1;\n      }, b.lockSwipeToPrev = function () {\n        b.params.allowSwipeToPrev = !1;\n      }, b.lockSwipes = function () {\n        b.params.allowSwipeToNext = b.params.allowSwipeToPrev = !1;\n      }, b.unlockSwipeToNext = function () {\n        b.params.allowSwipeToNext = !0;\n      }, b.unlockSwipeToPrev = function () {\n        b.params.allowSwipeToPrev = !0;\n      }, b.unlockSwipes = function () {\n        b.params.allowSwipeToNext = b.params.allowSwipeToPrev = !0;\n      }, b.params.grabCursor && (b.container[0].style.cursor = \"move\", b.container[0].style.cursor = \"-webkit-grab\", b.container[0].style.cursor = \"-moz-grab\", b.container[0].style.cursor = \"grab\"), b.imagesToLoad = [], b.imagesLoaded = 0, b.loadImage = function (e, a, t, r, i) {\n        function s() {\n          i && i();\n        }var n;e.complete && r ? s() : a ? (n = new window.Image(), n.onload = s, n.onerror = s, t && (n.srcset = t), a && (n.src = a)) : s();\n      }, b.preloadImages = function () {\n        function e() {\n          \"undefined\" != typeof b && null !== b && (void 0 !== b.imagesLoaded && b.imagesLoaded++, b.imagesLoaded === b.imagesToLoad.length && (b.params.updateOnImagesReady && b.update(), b.emit(\"onImagesReady\", b)));\n        }b.imagesToLoad = b.container.find(\"img\");for (var a = 0; a < b.imagesToLoad.length; a++) {\n          b.loadImage(b.imagesToLoad[a], b.imagesToLoad[a].currentSrc || b.imagesToLoad[a].getAttribute(\"src\"), b.imagesToLoad[a].srcset || b.imagesToLoad[a].getAttribute(\"srcset\"), !0, e);\n        }\n      }, b.autoplayTimeoutId = void 0, b.autoplaying = !1, b.autoplayPaused = !1, b.startAutoplay = function () {\n        return \"undefined\" != typeof b.autoplayTimeoutId ? !1 : b.params.autoplay ? b.autoplaying ? !1 : (b.autoplaying = !0, b.emit(\"onAutoplayStart\", b), void n()) : !1;\n      }, b.stopAutoplay = function (e) {\n        b.autoplayTimeoutId && (b.autoplayTimeoutId && clearTimeout(b.autoplayTimeoutId), b.autoplaying = !1, b.autoplayTimeoutId = void 0, b.emit(\"onAutoplayStop\", b));\n      }, b.pauseAutoplay = function (e) {\n        b.autoplayPaused || (b.autoplayTimeoutId && clearTimeout(b.autoplayTimeoutId), b.autoplayPaused = !0, 0 === e ? (b.autoplayPaused = !1, n()) : b.wrapper.transitionEnd(function () {\n          b && (b.autoplayPaused = !1, b.autoplaying ? n() : b.stopAutoplay());\n        }));\n      }, b.minTranslate = function () {\n        return -b.snapGrid[0];\n      }, b.maxTranslate = function () {\n        return -b.snapGrid[b.snapGrid.length - 1];\n      }, b.updateAutoHeight = function () {\n        var e = b.slides.eq(b.activeIndex)[0];if (\"undefined\" != typeof e) {\n          var a = e.offsetHeight;a && b.wrapper.css(\"height\", a + \"px\");\n        }\n      }, b.updateContainerSize = function () {\n        var e, a;e = \"undefined\" != typeof b.params.width ? b.params.width : b.container[0].clientWidth, a = \"undefined\" != typeof b.params.height ? b.params.height : b.container[0].clientHeight, 0 === e && b.isHorizontal() || 0 === a && !b.isHorizontal() || (e = e - parseInt(b.container.css(\"padding-left\"), 10) - parseInt(b.container.css(\"padding-right\"), 10), a = a - parseInt(b.container.css(\"padding-top\"), 10) - parseInt(b.container.css(\"padding-bottom\"), 10), b.width = e, b.height = a, b.size = b.isHorizontal() ? b.width : b.height);\n      }, b.updateSlidesSize = function () {\n        b.slides = b.wrapper.children(\".\" + b.params.slideClass), b.snapGrid = [], b.slidesGrid = [], b.slidesSizesGrid = [];var e,\n            a = b.params.spaceBetween,\n            t = -b.params.slidesOffsetBefore,\n            r = 0,\n            i = 0;if (\"undefined\" != typeof b.size) {\n          \"string\" == typeof a && a.indexOf(\"%\") >= 0 && (a = parseFloat(a.replace(\"%\", \"\")) / 100 * b.size), b.virtualSize = -a, b.rtl ? b.slides.css({ marginLeft: \"\", marginTop: \"\" }) : b.slides.css({ marginRight: \"\", marginBottom: \"\" });var n;b.params.slidesPerColumn > 1 && (n = Math.floor(b.slides.length / b.params.slidesPerColumn) === b.slides.length / b.params.slidesPerColumn ? b.slides.length : Math.ceil(b.slides.length / b.params.slidesPerColumn) * b.params.slidesPerColumn, \"auto\" !== b.params.slidesPerView && \"row\" === b.params.slidesPerColumnFill && (n = Math.max(n, b.params.slidesPerView * b.params.slidesPerColumn)));var o,\n              l = b.params.slidesPerColumn,\n              p = n / l,\n              d = p - (b.params.slidesPerColumn * p - b.slides.length);for (e = 0; e < b.slides.length; e++) {\n            o = 0;var u = b.slides.eq(e);if (b.params.slidesPerColumn > 1) {\n              var c, m, h;\"column\" === b.params.slidesPerColumnFill ? (m = Math.floor(e / l), h = e - m * l, (m > d || m === d && h === l - 1) && ++h >= l && (h = 0, m++), c = m + h * n / l, u.css({ \"-webkit-box-ordinal-group\": c, \"-moz-box-ordinal-group\": c, \"-ms-flex-order\": c, \"-webkit-order\": c, order: c })) : (h = Math.floor(e / p), m = e - h * p), u.css({ \"margin-top\": 0 !== h && b.params.spaceBetween && b.params.spaceBetween + \"px\" }).attr(\"data-swiper-column\", m).attr(\"data-swiper-row\", h);\n            }\"none\" !== u.css(\"display\") && (\"auto\" === b.params.slidesPerView ? (o = b.isHorizontal() ? u.outerWidth(!0) : u.outerHeight(!0), b.params.roundLengths && (o = s(o))) : (o = (b.size - (b.params.slidesPerView - 1) * a) / b.params.slidesPerView, b.params.roundLengths && (o = s(o)), b.isHorizontal() ? b.slides[e].style.width = o + \"px\" : b.slides[e].style.height = o + \"px\"), b.slides[e].swiperSlideSize = o, b.slidesSizesGrid.push(o), b.params.centeredSlides ? (t = t + o / 2 + r / 2 + a, 0 === e && (t = t - b.size / 2 - a), Math.abs(t) < .001 && (t = 0), i % b.params.slidesPerGroup === 0 && b.snapGrid.push(t), b.slidesGrid.push(t)) : (i % b.params.slidesPerGroup === 0 && b.snapGrid.push(t), b.slidesGrid.push(t), t = t + o + a), b.virtualSize += o + a, r = o, i++);\n          }b.virtualSize = Math.max(b.virtualSize, b.size) + b.params.slidesOffsetAfter;var f;if (b.rtl && b.wrongRTL && (\"slide\" === b.params.effect || \"coverflow\" === b.params.effect) && b.wrapper.css({ width: b.virtualSize + b.params.spaceBetween + \"px\" }), (!b.support.flexbox || b.params.setWrapperSize) && (b.isHorizontal() ? b.wrapper.css({ width: b.virtualSize + b.params.spaceBetween + \"px\" }) : b.wrapper.css({ height: b.virtualSize + b.params.spaceBetween + \"px\" })), b.params.slidesPerColumn > 1 && (b.virtualSize = (o + b.params.spaceBetween) * n, b.virtualSize = Math.ceil(b.virtualSize / b.params.slidesPerColumn) - b.params.spaceBetween, b.wrapper.css({ width: b.virtualSize + b.params.spaceBetween + \"px\" }), b.params.centeredSlides)) {\n            for (f = [], e = 0; e < b.snapGrid.length; e++) {\n              b.snapGrid[e] < b.virtualSize + b.snapGrid[0] && f.push(b.snapGrid[e]);\n            }b.snapGrid = f;\n          }if (!b.params.centeredSlides) {\n            for (f = [], e = 0; e < b.snapGrid.length; e++) {\n              b.snapGrid[e] <= b.virtualSize - b.size && f.push(b.snapGrid[e]);\n            }b.snapGrid = f, Math.floor(b.virtualSize - b.size) - Math.floor(b.snapGrid[b.snapGrid.length - 1]) > 1 && b.snapGrid.push(b.virtualSize - b.size);\n          }0 === b.snapGrid.length && (b.snapGrid = [0]), 0 !== b.params.spaceBetween && (b.isHorizontal() ? b.rtl ? b.slides.css({ marginLeft: a + \"px\" }) : b.slides.css({ marginRight: a + \"px\" }) : b.slides.css({ marginBottom: a + \"px\" })), b.params.watchSlidesProgress && b.updateSlidesOffset();\n        }\n      }, b.updateSlidesOffset = function () {\n        for (var e = 0; e < b.slides.length; e++) {\n          b.slides[e].swiperSlideOffset = b.isHorizontal() ? b.slides[e].offsetLeft : b.slides[e].offsetTop;\n        }\n      }, b.updateSlidesProgress = function (e) {\n        if (\"undefined\" == typeof e && (e = b.translate || 0), 0 !== b.slides.length) {\n          \"undefined\" == typeof b.slides[0].swiperSlideOffset && b.updateSlidesOffset();var a = -e;b.rtl && (a = e), b.slides.removeClass(b.params.slideVisibleClass);for (var t = 0; t < b.slides.length; t++) {\n            var r = b.slides[t],\n                i = (a - r.swiperSlideOffset) / (r.swiperSlideSize + b.params.spaceBetween);if (b.params.watchSlidesVisibility) {\n              var s = -(a - r.swiperSlideOffset),\n                  n = s + b.slidesSizesGrid[t],\n                  o = s >= 0 && s < b.size || n > 0 && n <= b.size || 0 >= s && n >= b.size;o && b.slides.eq(t).addClass(b.params.slideVisibleClass);\n            }r.progress = b.rtl ? -i : i;\n          }\n        }\n      }, b.updateProgress = function (e) {\n        \"undefined\" == typeof e && (e = b.translate || 0);var a = b.maxTranslate() - b.minTranslate(),\n            t = b.isBeginning,\n            r = b.isEnd;0 === a ? (b.progress = 0, b.isBeginning = b.isEnd = !0) : (b.progress = (e - b.minTranslate()) / a, b.isBeginning = b.progress <= 0, b.isEnd = b.progress >= 1), b.isBeginning && !t && b.emit(\"onReachBeginning\", b), b.isEnd && !r && b.emit(\"onReachEnd\", b), b.params.watchSlidesProgress && b.updateSlidesProgress(e), b.emit(\"onProgress\", b, b.progress);\n      }, b.updateActiveIndex = function () {\n        var e,\n            a,\n            t,\n            r = b.rtl ? b.translate : -b.translate;for (a = 0; a < b.slidesGrid.length; a++) {\n          \"undefined\" != typeof b.slidesGrid[a + 1] ? r >= b.slidesGrid[a] && r < b.slidesGrid[a + 1] - (b.slidesGrid[a + 1] - b.slidesGrid[a]) / 2 ? e = a : r >= b.slidesGrid[a] && r < b.slidesGrid[a + 1] && (e = a + 1) : r >= b.slidesGrid[a] && (e = a);\n        }(0 > e || \"undefined\" == typeof e) && (e = 0), t = Math.floor(e / b.params.slidesPerGroup), t >= b.snapGrid.length && (t = b.snapGrid.length - 1), e !== b.activeIndex && (b.snapIndex = t, b.previousIndex = b.activeIndex, b.activeIndex = e, b.updateClasses());\n      }, b.updateClasses = function () {\n        b.slides.removeClass(b.params.slideActiveClass + \" \" + b.params.slideNextClass + \" \" + b.params.slidePrevClass);var e = b.slides.eq(b.activeIndex);e.addClass(b.params.slideActiveClass);var t = e.next(\".\" + b.params.slideClass).addClass(b.params.slideNextClass);b.params.loop && 0 === t.length && b.slides.eq(0).addClass(b.params.slideNextClass);var r = e.prev(\".\" + b.params.slideClass).addClass(b.params.slidePrevClass);if (b.params.loop && 0 === r.length && b.slides.eq(-1).addClass(b.params.slidePrevClass), b.paginationContainer && b.paginationContainer.length > 0) {\n          var i,\n              s = b.params.loop ? Math.ceil((b.slides.length - 2 * b.loopedSlides) / b.params.slidesPerGroup) : b.snapGrid.length;if (b.params.loop ? (i = Math.ceil((b.activeIndex - b.loopedSlides) / b.params.slidesPerGroup), i > b.slides.length - 1 - 2 * b.loopedSlides && (i -= b.slides.length - 2 * b.loopedSlides), i > s - 1 && (i -= s), 0 > i && \"bullets\" !== b.params.paginationType && (i = s + i)) : i = \"undefined\" != typeof b.snapIndex ? b.snapIndex : b.activeIndex || 0, \"bullets\" === b.params.paginationType && b.bullets && b.bullets.length > 0 && (b.bullets.removeClass(b.params.bulletActiveClass), b.paginationContainer.length > 1 ? b.bullets.each(function () {\n            a(this).index() === i && a(this).addClass(b.params.bulletActiveClass);\n          }) : b.bullets.eq(i).addClass(b.params.bulletActiveClass)), \"fraction\" === b.params.paginationType && (b.paginationContainer.find(\".\" + b.params.paginationCurrentClass).text(i + 1), b.paginationContainer.find(\".\" + b.params.paginationTotalClass).text(s)), \"progress\" === b.params.paginationType) {\n            var n = (i + 1) / s,\n                o = n,\n                l = 1;b.isHorizontal() || (l = n, o = 1), b.paginationContainer.find(\".\" + b.params.paginationProgressbarClass).transform(\"translate3d(0,0,0) scaleX(\" + o + \") scaleY(\" + l + \")\").transition(b.params.speed);\n          }\"custom\" === b.params.paginationType && b.params.paginationCustomRender && (b.paginationContainer.html(b.params.paginationCustomRender(b, i + 1, s)), b.emit(\"onPaginationRendered\", b, b.paginationContainer[0]));\n        }b.params.loop || (b.params.prevButton && b.prevButton && b.prevButton.length > 0 && (b.isBeginning ? (b.prevButton.addClass(b.params.buttonDisabledClass), b.params.a11y && b.a11y && b.a11y.disable(b.prevButton)) : (b.prevButton.removeClass(b.params.buttonDisabledClass), b.params.a11y && b.a11y && b.a11y.enable(b.prevButton))), b.params.nextButton && b.nextButton && b.nextButton.length > 0 && (b.isEnd ? (b.nextButton.addClass(b.params.buttonDisabledClass), b.params.a11y && b.a11y && b.a11y.disable(b.nextButton)) : (b.nextButton.removeClass(b.params.buttonDisabledClass), b.params.a11y && b.a11y && b.a11y.enable(b.nextButton))));\n      }, b.updatePagination = function () {\n        if (b.params.pagination && b.paginationContainer && b.paginationContainer.length > 0) {\n          var e = \"\";if (\"bullets\" === b.params.paginationType) {\n            for (var a = b.params.loop ? Math.ceil((b.slides.length - 2 * b.loopedSlides) / b.params.slidesPerGroup) : b.snapGrid.length, t = 0; a > t; t++) {\n              e += b.params.paginationBulletRender ? b.params.paginationBulletRender(t, b.params.bulletClass) : \"<\" + b.params.paginationElement + ' class=\"' + b.params.bulletClass + '\"></' + b.params.paginationElement + \">\";\n            }b.paginationContainer.html(e), b.bullets = b.paginationContainer.find(\".\" + b.params.bulletClass), b.params.paginationClickable && b.params.a11y && b.a11y && b.a11y.initPagination();\n          }\"fraction\" === b.params.paginationType && (e = b.params.paginationFractionRender ? b.params.paginationFractionRender(b, b.params.paginationCurrentClass, b.params.paginationTotalClass) : '<span class=\"' + b.params.paginationCurrentClass + '\"></span> / <span class=\"' + b.params.paginationTotalClass + '\"></span>', b.paginationContainer.html(e)), \"progress\" === b.params.paginationType && (e = b.params.paginationProgressRender ? b.params.paginationProgressRender(b, b.params.paginationProgressbarClass) : '<span class=\"' + b.params.paginationProgressbarClass + '\"></span>', b.paginationContainer.html(e)), \"custom\" !== b.params.paginationType && b.emit(\"onPaginationRendered\", b, b.paginationContainer[0]);\n        }\n      }, b.update = function (e) {\n        function a() {\n          r = Math.min(Math.max(b.translate, b.maxTranslate()), b.minTranslate()), b.setWrapperTranslate(r), b.updateActiveIndex(), b.updateClasses();\n        }if (b.updateContainerSize(), b.updateSlidesSize(), b.updateProgress(), b.updatePagination(), b.updateClasses(), b.params.scrollbar && b.scrollbar && b.scrollbar.set(), e) {\n          var t, r;b.controller && b.controller.spline && (b.controller.spline = void 0), b.params.freeMode ? (a(), b.params.autoHeight && b.updateAutoHeight()) : (t = (\"auto\" === b.params.slidesPerView || b.params.slidesPerView > 1) && b.isEnd && !b.params.centeredSlides ? b.slideTo(b.slides.length - 1, 0, !1, !0) : b.slideTo(b.activeIndex, 0, !1, !0), t || a());\n        } else b.params.autoHeight && b.updateAutoHeight();\n      }, b.onResize = function (e) {\n        b.params.breakpoints && b.setBreakpoint();var a = b.params.allowSwipeToPrev,\n            t = b.params.allowSwipeToNext;b.params.allowSwipeToPrev = b.params.allowSwipeToNext = !0, b.updateContainerSize(), b.updateSlidesSize(), (\"auto\" === b.params.slidesPerView || b.params.freeMode || e) && b.updatePagination(), b.params.scrollbar && b.scrollbar && b.scrollbar.set(), b.controller && b.controller.spline && (b.controller.spline = void 0);var r = !1;if (b.params.freeMode) {\n          var i = Math.min(Math.max(b.translate, b.maxTranslate()), b.minTranslate());b.setWrapperTranslate(i), b.updateActiveIndex(), b.updateClasses(), b.params.autoHeight && b.updateAutoHeight();\n        } else b.updateClasses(), r = (\"auto\" === b.params.slidesPerView || b.params.slidesPerView > 1) && b.isEnd && !b.params.centeredSlides ? b.slideTo(b.slides.length - 1, 0, !1, !0) : b.slideTo(b.activeIndex, 0, !1, !0);b.params.lazyLoading && !r && b.lazy && b.lazy.load(), b.params.allowSwipeToPrev = a, b.params.allowSwipeToNext = t;\n      };var T = [\"mousedown\", \"mousemove\", \"mouseup\"];window.navigator.pointerEnabled ? T = [\"pointerdown\", \"pointermove\", \"pointerup\"] : window.navigator.msPointerEnabled && (T = [\"MSPointerDown\", \"MSPointerMove\", \"MSPointerUp\"]), b.touchEvents = { start: b.support.touch || !b.params.simulateTouch ? \"touchstart\" : T[0], move: b.support.touch || !b.params.simulateTouch ? \"touchmove\" : T[1], end: b.support.touch || !b.params.simulateTouch ? \"touchend\" : T[2] }, (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) && (\"container\" === b.params.touchEventsTarget ? b.container : b.wrapper).addClass(\"swiper-wp8-\" + b.params.direction), b.initEvents = function (e) {\n        var a = e ? \"off\" : \"on\",\n            t = e ? \"removeEventListener\" : \"addEventListener\",\n            r = \"container\" === b.params.touchEventsTarget ? b.container[0] : b.wrapper[0],\n            s = b.support.touch ? r : document,\n            n = b.params.nested ? !0 : !1;b.browser.ie ? (r[t](b.touchEvents.start, b.onTouchStart, !1), s[t](b.touchEvents.move, b.onTouchMove, n), s[t](b.touchEvents.end, b.onTouchEnd, !1)) : (b.support.touch && (r[t](b.touchEvents.start, b.onTouchStart, !1), r[t](b.touchEvents.move, b.onTouchMove, n), r[t](b.touchEvents.end, b.onTouchEnd, !1)), !i.simulateTouch || b.device.ios || b.device.android || (r[t](\"mousedown\", b.onTouchStart, !1), document[t](\"mousemove\", b.onTouchMove, n), document[t](\"mouseup\", b.onTouchEnd, !1))), window[t](\"resize\", b.onResize), b.params.nextButton && b.nextButton && b.nextButton.length > 0 && (b.nextButton[a](\"click\", b.onClickNext), b.params.a11y && b.a11y && b.nextButton[a](\"keydown\", b.a11y.onEnterKey)), b.params.prevButton && b.prevButton && b.prevButton.length > 0 && (b.prevButton[a](\"click\", b.onClickPrev), b.params.a11y && b.a11y && b.prevButton[a](\"keydown\", b.a11y.onEnterKey)), b.params.pagination && b.params.paginationClickable && (b.paginationContainer[a](\"click\", \".\" + b.params.bulletClass, b.onClickIndex), b.params.a11y && b.a11y && b.paginationContainer[a](\"keydown\", \".\" + b.params.bulletClass, b.a11y.onEnterKey)), (b.params.preventClicks || b.params.preventClicksPropagation) && r[t](\"click\", b.preventClicks, !0);\n      }, b.attachEvents = function () {\n        b.initEvents();\n      }, b.detachEvents = function () {\n        b.initEvents(!0);\n      }, b.allowClick = !0, b.preventClicks = function (e) {\n        b.allowClick || (b.params.preventClicks && e.preventDefault(), b.params.preventClicksPropagation && b.animating && (e.stopPropagation(), e.stopImmediatePropagation()));\n      }, b.onClickNext = function (e) {\n        e.preventDefault(), (!b.isEnd || b.params.loop) && b.slideNext();\n      }, b.onClickPrev = function (e) {\n        e.preventDefault(), (!b.isBeginning || b.params.loop) && b.slidePrev();\n      }, b.onClickIndex = function (e) {\n        e.preventDefault();var t = a(this).index() * b.params.slidesPerGroup;b.params.loop && (t += b.loopedSlides), b.slideTo(t);\n      }, b.updateClickedSlide = function (e) {\n        var t = o(e, \".\" + b.params.slideClass),\n            r = !1;if (t) for (var i = 0; i < b.slides.length; i++) {\n          b.slides[i] === t && (r = !0);\n        }if (!t || !r) return b.clickedSlide = void 0, void (b.clickedIndex = void 0);if (b.clickedSlide = t, b.clickedIndex = a(t).index(), b.params.slideToClickedSlide && void 0 !== b.clickedIndex && b.clickedIndex !== b.activeIndex) {\n          var s,\n              n = b.clickedIndex;if (b.params.loop) {\n            if (b.animating) return;s = a(b.clickedSlide).attr(\"data-swiper-slide-index\"), b.params.centeredSlides ? n < b.loopedSlides - b.params.slidesPerView / 2 || n > b.slides.length - b.loopedSlides + b.params.slidesPerView / 2 ? (b.fixLoop(), n = b.wrapper.children(\".\" + b.params.slideClass + '[data-swiper-slide-index=\"' + s + '\"]:not(.swiper-slide-duplicate)').eq(0).index(), setTimeout(function () {\n              b.slideTo(n);\n            }, 0)) : b.slideTo(n) : n > b.slides.length - b.params.slidesPerView ? (b.fixLoop(), n = b.wrapper.children(\".\" + b.params.slideClass + '[data-swiper-slide-index=\"' + s + '\"]:not(.swiper-slide-duplicate)').eq(0).index(), setTimeout(function () {\n              b.slideTo(n);\n            }, 0)) : b.slideTo(n);\n          } else b.slideTo(n);\n        }\n      };var S,\n          C,\n          z,\n          M,\n          E,\n          P,\n          k,\n          I,\n          L,\n          B,\n          D = \"input, select, textarea, button\",\n          H = Date.now(),\n          A = [];b.animating = !1, b.touches = { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 };var G, O;if (b.onTouchStart = function (e) {\n        if (e.originalEvent && (e = e.originalEvent), G = \"touchstart\" === e.type, G || !(\"which\" in e) || 3 !== e.which) {\n          if (b.params.noSwiping && o(e, \".\" + b.params.noSwipingClass)) return void (b.allowClick = !0);if (!b.params.swipeHandler || o(e, b.params.swipeHandler)) {\n            var t = b.touches.currentX = \"touchstart\" === e.type ? e.targetTouches[0].pageX : e.pageX,\n                r = b.touches.currentY = \"touchstart\" === e.type ? e.targetTouches[0].pageY : e.pageY;if (!(b.device.ios && b.params.iOSEdgeSwipeDetection && t <= b.params.iOSEdgeSwipeThreshold)) {\n              if (S = !0, C = !1, z = !0, E = void 0, O = void 0, b.touches.startX = t, b.touches.startY = r, M = Date.now(), b.allowClick = !0, b.updateContainerSize(), b.swipeDirection = void 0, b.params.threshold > 0 && (I = !1), \"touchstart\" !== e.type) {\n                var i = !0;a(e.target).is(D) && (i = !1), document.activeElement && a(document.activeElement).is(D) && document.activeElement.blur(), i && e.preventDefault();\n              }b.emit(\"onTouchStart\", b, e);\n            }\n          }\n        }\n      }, b.onTouchMove = function (e) {\n        if (e.originalEvent && (e = e.originalEvent), !G || \"mousemove\" !== e.type) {\n          if (e.preventedByNestedSwiper) return b.touches.startX = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, void (b.touches.startY = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY);if (b.params.onlyExternal) return b.allowClick = !1, void (S && (b.touches.startX = b.touches.currentX = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, b.touches.startY = b.touches.currentY = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY, M = Date.now()));if (G && document.activeElement && e.target === document.activeElement && a(e.target).is(D)) return C = !0, void (b.allowClick = !1);if (z && b.emit(\"onTouchMove\", b, e), !(e.targetTouches && e.targetTouches.length > 1)) {\n            if (b.touches.currentX = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, b.touches.currentY = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY, \"undefined\" == typeof E) {\n              var t = 180 * Math.atan2(Math.abs(b.touches.currentY - b.touches.startY), Math.abs(b.touches.currentX - b.touches.startX)) / Math.PI;E = b.isHorizontal() ? t > b.params.touchAngle : 90 - t > b.params.touchAngle;\n            }if (E && b.emit(\"onTouchMoveOpposite\", b, e), \"undefined\" == typeof O && b.browser.ieTouch && (b.touches.currentX !== b.touches.startX || b.touches.currentY !== b.touches.startY) && (O = !0), S) {\n              if (E) return void (S = !1);if (O || !b.browser.ieTouch) {\n                b.allowClick = !1, b.emit(\"onSliderMove\", b, e), e.preventDefault(), b.params.touchMoveStopPropagation && !b.params.nested && e.stopPropagation(), C || (i.loop && b.fixLoop(), k = b.getWrapperTranslate(), b.setWrapperTransition(0), b.animating && b.wrapper.trigger(\"webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd\"), b.params.autoplay && b.autoplaying && (b.params.autoplayDisableOnInteraction ? b.stopAutoplay() : b.pauseAutoplay()), B = !1, b.params.grabCursor && (b.container[0].style.cursor = \"move\", b.container[0].style.cursor = \"-webkit-grabbing\", b.container[0].style.cursor = \"-moz-grabbin\", b.container[0].style.cursor = \"grabbing\")), C = !0;var r = b.touches.diff = b.isHorizontal() ? b.touches.currentX - b.touches.startX : b.touches.currentY - b.touches.startY;r *= b.params.touchRatio, b.rtl && (r = -r), b.swipeDirection = r > 0 ? \"prev\" : \"next\", P = r + k;var s = !0;if (r > 0 && P > b.minTranslate() ? (s = !1, b.params.resistance && (P = b.minTranslate() - 1 + Math.pow(-b.minTranslate() + k + r, b.params.resistanceRatio))) : 0 > r && P < b.maxTranslate() && (s = !1, b.params.resistance && (P = b.maxTranslate() + 1 - Math.pow(b.maxTranslate() - k - r, b.params.resistanceRatio))), s && (e.preventedByNestedSwiper = !0), !b.params.allowSwipeToNext && \"next\" === b.swipeDirection && k > P && (P = k), !b.params.allowSwipeToPrev && \"prev\" === b.swipeDirection && P > k && (P = k), b.params.followFinger) {\n                  if (b.params.threshold > 0) {\n                    if (!(Math.abs(r) > b.params.threshold || I)) return void (P = k);if (!I) return I = !0, b.touches.startX = b.touches.currentX, b.touches.startY = b.touches.currentY, P = k, void (b.touches.diff = b.isHorizontal() ? b.touches.currentX - b.touches.startX : b.touches.currentY - b.touches.startY);\n                  }(b.params.freeMode || b.params.watchSlidesProgress) && b.updateActiveIndex(), b.params.freeMode && (0 === A.length && A.push({ position: b.touches[b.isHorizontal() ? \"startX\" : \"startY\"], time: M }), A.push({ position: b.touches[b.isHorizontal() ? \"currentX\" : \"currentY\"], time: new window.Date().getTime() })), b.updateProgress(P), b.setWrapperTranslate(P);\n                }\n              }\n            }\n          }\n        }\n      }, b.onTouchEnd = function (e) {\n        if (e.originalEvent && (e = e.originalEvent), z && b.emit(\"onTouchEnd\", b, e), z = !1, S) {\n          b.params.grabCursor && C && S && (b.container[0].style.cursor = \"move\", b.container[0].style.cursor = \"-webkit-grab\", b.container[0].style.cursor = \"-moz-grab\", b.container[0].style.cursor = \"grab\");var t = Date.now(),\n              r = t - M;if (b.allowClick && (b.updateClickedSlide(e), b.emit(\"onTap\", b, e), 300 > r && t - H > 300 && (L && clearTimeout(L), L = setTimeout(function () {\n            b && (b.params.paginationHide && b.paginationContainer.length > 0 && !a(e.target).hasClass(b.params.bulletClass) && b.paginationContainer.toggleClass(b.params.paginationHiddenClass), b.emit(\"onClick\", b, e));\n          }, 300)), 300 > r && 300 > t - H && (L && clearTimeout(L), b.emit(\"onDoubleTap\", b, e))), H = Date.now(), setTimeout(function () {\n            b && (b.allowClick = !0);\n          }, 0), !S || !C || !b.swipeDirection || 0 === b.touches.diff || P === k) return void (S = C = !1);S = C = !1;var i;if (i = b.params.followFinger ? b.rtl ? b.translate : -b.translate : -P, b.params.freeMode) {\n            if (i < -b.minTranslate()) return void b.slideTo(b.activeIndex);if (i > -b.maxTranslate()) return void (b.slides.length < b.snapGrid.length ? b.slideTo(b.snapGrid.length - 1) : b.slideTo(b.slides.length - 1));if (b.params.freeModeMomentum) {\n              if (A.length > 1) {\n                var s = A.pop(),\n                    n = A.pop(),\n                    o = s.position - n.position,\n                    l = s.time - n.time;b.velocity = o / l, b.velocity = b.velocity / 2, Math.abs(b.velocity) < b.params.freeModeMinimumVelocity && (b.velocity = 0), (l > 150 || new window.Date().getTime() - s.time > 300) && (b.velocity = 0);\n              } else b.velocity = 0;A.length = 0;var p = 1e3 * b.params.freeModeMomentumRatio,\n                  d = b.velocity * p,\n                  u = b.translate + d;b.rtl && (u = -u);var c,\n                  m = !1,\n                  h = 20 * Math.abs(b.velocity) * b.params.freeModeMomentumBounceRatio;if (u < b.maxTranslate()) b.params.freeModeMomentumBounce ? (u + b.maxTranslate() < -h && (u = b.maxTranslate() - h), c = b.maxTranslate(), m = !0, B = !0) : u = b.maxTranslate();else if (u > b.minTranslate()) b.params.freeModeMomentumBounce ? (u - b.minTranslate() > h && (u = b.minTranslate() + h), c = b.minTranslate(), m = !0, B = !0) : u = b.minTranslate();else if (b.params.freeModeSticky) {\n                var f,\n                    g = 0;for (g = 0; g < b.snapGrid.length; g += 1) {\n                  if (b.snapGrid[g] > -u) {\n                    f = g;break;\n                  }\n                }u = Math.abs(b.snapGrid[f] - u) < Math.abs(b.snapGrid[f - 1] - u) || \"next\" === b.swipeDirection ? b.snapGrid[f] : b.snapGrid[f - 1], b.rtl || (u = -u);\n              }if (0 !== b.velocity) p = b.rtl ? Math.abs((-u - b.translate) / b.velocity) : Math.abs((u - b.translate) / b.velocity);else if (b.params.freeModeSticky) return void b.slideReset();b.params.freeModeMomentumBounce && m ? (b.updateProgress(c), b.setWrapperTransition(p), b.setWrapperTranslate(u), b.onTransitionStart(), b.animating = !0, b.wrapper.transitionEnd(function () {\n                b && B && (b.emit(\"onMomentumBounce\", b), b.setWrapperTransition(b.params.speed), b.setWrapperTranslate(c), b.wrapper.transitionEnd(function () {\n                  b && b.onTransitionEnd();\n                }));\n              })) : b.velocity ? (b.updateProgress(u), b.setWrapperTransition(p), b.setWrapperTranslate(u), b.onTransitionStart(), b.animating || (b.animating = !0, b.wrapper.transitionEnd(function () {\n                b && b.onTransitionEnd();\n              }))) : b.updateProgress(u), b.updateActiveIndex();\n            }return void ((!b.params.freeModeMomentum || r >= b.params.longSwipesMs) && (b.updateProgress(), b.updateActiveIndex()));\n          }var v,\n              w = 0,\n              y = b.slidesSizesGrid[0];for (v = 0; v < b.slidesGrid.length; v += b.params.slidesPerGroup) {\n            \"undefined\" != typeof b.slidesGrid[v + b.params.slidesPerGroup] ? i >= b.slidesGrid[v] && i < b.slidesGrid[v + b.params.slidesPerGroup] && (w = v, y = b.slidesGrid[v + b.params.slidesPerGroup] - b.slidesGrid[v]) : i >= b.slidesGrid[v] && (w = v, y = b.slidesGrid[b.slidesGrid.length - 1] - b.slidesGrid[b.slidesGrid.length - 2]);\n          }var x = (i - b.slidesGrid[w]) / y;if (r > b.params.longSwipesMs) {\n            if (!b.params.longSwipes) return void b.slideTo(b.activeIndex);\"next\" === b.swipeDirection && (x >= b.params.longSwipesRatio ? b.slideTo(w + b.params.slidesPerGroup) : b.slideTo(w)), \"prev\" === b.swipeDirection && (x > 1 - b.params.longSwipesRatio ? b.slideTo(w + b.params.slidesPerGroup) : b.slideTo(w));\n          } else {\n            if (!b.params.shortSwipes) return void b.slideTo(b.activeIndex);\"next\" === b.swipeDirection && b.slideTo(w + b.params.slidesPerGroup), \"prev\" === b.swipeDirection && b.slideTo(w);\n          }\n        }\n      }, b._slideTo = function (e, a) {\n        return b.slideTo(e, a, !0, !0);\n      }, b.slideTo = function (e, a, t, r) {\n        \"undefined\" == typeof t && (t = !0), \"undefined\" == typeof e && (e = 0), 0 > e && (e = 0), b.snapIndex = Math.floor(e / b.params.slidesPerGroup), b.snapIndex >= b.snapGrid.length && (b.snapIndex = b.snapGrid.length - 1);var i = -b.snapGrid[b.snapIndex];b.params.autoplay && b.autoplaying && (r || !b.params.autoplayDisableOnInteraction ? b.pauseAutoplay(a) : b.stopAutoplay()), b.updateProgress(i);for (var s = 0; s < b.slidesGrid.length; s++) {\n          -Math.floor(100 * i) >= Math.floor(100 * b.slidesGrid[s]) && (e = s);\n        }return !b.params.allowSwipeToNext && i < b.translate && i < b.minTranslate() ? !1 : !b.params.allowSwipeToPrev && i > b.translate && i > b.maxTranslate() && (b.activeIndex || 0) !== e ? !1 : (\"undefined\" == typeof a && (a = b.params.speed), b.previousIndex = b.activeIndex || 0, b.activeIndex = e, b.rtl && -i === b.translate || !b.rtl && i === b.translate ? (b.params.autoHeight && b.updateAutoHeight(), b.updateClasses(), \"slide\" !== b.params.effect && b.setWrapperTranslate(i), !1) : (b.updateClasses(), b.onTransitionStart(t), 0 === a ? (b.setWrapperTranslate(i), b.setWrapperTransition(0), b.onTransitionEnd(t)) : (b.setWrapperTranslate(i), b.setWrapperTransition(a), b.animating || (b.animating = !0, b.wrapper.transitionEnd(function () {\n          b && b.onTransitionEnd(t);\n        }))), !0));\n      }, b.onTransitionStart = function (e) {\n        \"undefined\" == typeof e && (e = !0), b.params.autoHeight && b.updateAutoHeight(), b.lazy && b.lazy.onTransitionStart(), e && (b.emit(\"onTransitionStart\", b), b.activeIndex !== b.previousIndex && (b.emit(\"onSlideChangeStart\", b), b.activeIndex > b.previousIndex ? b.emit(\"onSlideNextStart\", b) : b.emit(\"onSlidePrevStart\", b)));\n      }, b.onTransitionEnd = function (e) {\n        b.animating = !1, b.setWrapperTransition(0), \"undefined\" == typeof e && (e = !0), b.lazy && b.lazy.onTransitionEnd(), e && (b.emit(\"onTransitionEnd\", b), b.activeIndex !== b.previousIndex && (b.emit(\"onSlideChangeEnd\", b), b.activeIndex > b.previousIndex ? b.emit(\"onSlideNextEnd\", b) : b.emit(\"onSlidePrevEnd\", b))), b.params.hashnav && b.hashnav && b.hashnav.setHash();\n      }, b.slideNext = function (e, a, t) {\n        if (b.params.loop) {\n          if (b.animating) return !1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex + b.params.slidesPerGroup, a, e, t);\n        }return b.slideTo(b.activeIndex + b.params.slidesPerGroup, a, e, t);\n      }, b._slideNext = function (e) {\n        return b.slideNext(!0, e, !0);\n      }, b.slidePrev = function (e, a, t) {\n        if (b.params.loop) {\n          if (b.animating) return !1;b.fixLoop();b.container[0].clientLeft;return b.slideTo(b.activeIndex - 1, a, e, t);\n        }return b.slideTo(b.activeIndex - 1, a, e, t);\n      }, b._slidePrev = function (e) {\n        return b.slidePrev(!0, e, !0);\n      }, b.slideReset = function (e, a, t) {\n        return b.slideTo(b.activeIndex, a, e);\n      }, b.setWrapperTransition = function (e, a) {\n        b.wrapper.transition(e), \"slide\" !== b.params.effect && b.effects[b.params.effect] && b.effects[b.params.effect].setTransition(e), b.params.parallax && b.parallax && b.parallax.setTransition(e), b.params.scrollbar && b.scrollbar && b.scrollbar.setTransition(e), b.params.control && b.controller && b.controller.setTransition(e, a), b.emit(\"onSetTransition\", b, e);\n      }, b.setWrapperTranslate = function (e, a, t) {\n        var r = 0,\n            i = 0,\n            n = 0;b.isHorizontal() ? r = b.rtl ? -e : e : i = e, b.params.roundLengths && (r = s(r), i = s(i)), b.params.virtualTranslate || (b.support.transforms3d ? b.wrapper.transform(\"translate3d(\" + r + \"px, \" + i + \"px, \" + n + \"px)\") : b.wrapper.transform(\"translate(\" + r + \"px, \" + i + \"px)\")), b.translate = b.isHorizontal() ? r : i;var o,\n            l = b.maxTranslate() - b.minTranslate();o = 0 === l ? 0 : (e - b.minTranslate()) / l, o !== b.progress && b.updateProgress(e), a && b.updateActiveIndex(), \"slide\" !== b.params.effect && b.effects[b.params.effect] && b.effects[b.params.effect].setTranslate(b.translate), b.params.parallax && b.parallax && b.parallax.setTranslate(b.translate), b.params.scrollbar && b.scrollbar && b.scrollbar.setTranslate(b.translate), b.params.control && b.controller && b.controller.setTranslate(b.translate, t), b.emit(\"onSetTranslate\", b, b.translate);\n      }, b.getTranslate = function (e, a) {\n        var t, r, i, s;return \"undefined\" == typeof a && (a = \"x\"), b.params.virtualTranslate ? b.rtl ? -b.translate : b.translate : (i = window.getComputedStyle(e, null), window.WebKitCSSMatrix ? (r = i.transform || i.webkitTransform, r.split(\",\").length > 6 && (r = r.split(\", \").map(function (e) {\n          return e.replace(\",\", \".\");\n        }).join(\", \")), s = new window.WebKitCSSMatrix(\"none\" === r ? \"\" : r)) : (s = i.MozTransform || i.OTransform || i.MsTransform || i.msTransform || i.transform || i.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\"), t = s.toString().split(\",\")), \"x\" === a && (r = window.WebKitCSSMatrix ? s.m41 : 16 === t.length ? parseFloat(t[12]) : parseFloat(t[4])), \"y\" === a && (r = window.WebKitCSSMatrix ? s.m42 : 16 === t.length ? parseFloat(t[13]) : parseFloat(t[5])), b.rtl && r && (r = -r), r || 0);\n      }, b.getWrapperTranslate = function (e) {\n        return \"undefined\" == typeof e && (e = b.isHorizontal() ? \"x\" : \"y\"), b.getTranslate(b.wrapper[0], e);\n      }, b.observers = [], b.initObservers = function () {\n        if (b.params.observeParents) for (var e = b.container.parents(), a = 0; a < e.length; a++) {\n          l(e[a]);\n        }l(b.container[0], { childList: !1 }), l(b.wrapper[0], { attributes: !1 });\n      }, b.disconnectObservers = function () {\n        for (var e = 0; e < b.observers.length; e++) {\n          b.observers[e].disconnect();\n        }b.observers = [];\n      }, b.createLoop = function () {\n        b.wrapper.children(\".\" + b.params.slideClass + \".\" + b.params.slideDuplicateClass).remove();var e = b.wrapper.children(\".\" + b.params.slideClass);\"auto\" !== b.params.slidesPerView || b.params.loopedSlides || (b.params.loopedSlides = e.length), b.loopedSlides = parseInt(b.params.loopedSlides || b.params.slidesPerView, 10), b.loopedSlides = b.loopedSlides + b.params.loopAdditionalSlides, b.loopedSlides > e.length && (b.loopedSlides = e.length);var t,\n            r = [],\n            i = [];for (e.each(function (t, s) {\n          var n = a(this);t < b.loopedSlides && i.push(s), t < e.length && t >= e.length - b.loopedSlides && r.push(s), n.attr(\"data-swiper-slide-index\", t);\n        }), t = 0; t < i.length; t++) {\n          b.wrapper.append(a(i[t].cloneNode(!0)).addClass(b.params.slideDuplicateClass));\n        }for (t = r.length - 1; t >= 0; t--) {\n          b.wrapper.prepend(a(r[t].cloneNode(!0)).addClass(b.params.slideDuplicateClass));\n        }\n      }, b.destroyLoop = function () {\n        b.wrapper.children(\".\" + b.params.slideClass + \".\" + b.params.slideDuplicateClass).remove(), b.slides.removeAttr(\"data-swiper-slide-index\");\n      }, b.reLoop = function (e) {\n        var a = b.activeIndex - b.loopedSlides;b.destroyLoop(), b.createLoop(), b.updateSlidesSize(), e && b.slideTo(a + b.loopedSlides, 0, !1);\n      }, b.fixLoop = function () {\n        var e;b.activeIndex < b.loopedSlides ? (e = b.slides.length - 3 * b.loopedSlides + b.activeIndex, e += b.loopedSlides, b.slideTo(e, 0, !1, !0)) : (\"auto\" === b.params.slidesPerView && b.activeIndex >= 2 * b.loopedSlides || b.activeIndex > b.slides.length - 2 * b.params.slidesPerView) && (e = -b.slides.length + b.activeIndex + b.loopedSlides, e += b.loopedSlides, b.slideTo(e, 0, !1, !0));\n      }, b.appendSlide = function (e) {\n        if (b.params.loop && b.destroyLoop(), \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e.length) for (var a = 0; a < e.length; a++) {\n          e[a] && b.wrapper.append(e[a]);\n        } else b.wrapper.append(e);b.params.loop && b.createLoop(), b.params.observer && b.support.observer || b.update(!0);\n      }, b.prependSlide = function (e) {\n        b.params.loop && b.destroyLoop();var a = b.activeIndex + 1;if (\"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e.length) {\n          for (var t = 0; t < e.length; t++) {\n            e[t] && b.wrapper.prepend(e[t]);\n          }a = b.activeIndex + e.length;\n        } else b.wrapper.prepend(e);b.params.loop && b.createLoop(), b.params.observer && b.support.observer || b.update(!0), b.slideTo(a, 0, !1);\n      }, b.removeSlide = function (e) {\n        b.params.loop && (b.destroyLoop(), b.slides = b.wrapper.children(\".\" + b.params.slideClass));var a,\n            t = b.activeIndex;if (\"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) && e.length) {\n          for (var r = 0; r < e.length; r++) {\n            a = e[r], b.slides[a] && b.slides.eq(a).remove(), t > a && t--;\n          }t = Math.max(t, 0);\n        } else a = e, b.slides[a] && b.slides.eq(a).remove(), t > a && t--, t = Math.max(t, 0);b.params.loop && b.createLoop(), b.params.observer && b.support.observer || b.update(!0), b.params.loop ? b.slideTo(t + b.loopedSlides, 0, !1) : b.slideTo(t, 0, !1);\n      }, b.removeAllSlides = function () {\n        for (var e = [], a = 0; a < b.slides.length; a++) {\n          e.push(a);\n        }b.removeSlide(e);\n      }, b.effects = { fade: { setTranslate: function setTranslate() {\n            for (var e = 0; e < b.slides.length; e++) {\n              var a = b.slides.eq(e),\n                  t = a[0].swiperSlideOffset,\n                  r = -t;b.params.virtualTranslate || (r -= b.translate);var i = 0;b.isHorizontal() || (i = r, r = 0);var s = b.params.fade.crossFade ? Math.max(1 - Math.abs(a[0].progress), 0) : 1 + Math.min(Math.max(a[0].progress, -1), 0);a.css({ opacity: s }).transform(\"translate3d(\" + r + \"px, \" + i + \"px, 0px)\");\n            }\n          }, setTransition: function setTransition(e) {\n            if (b.slides.transition(e), b.params.virtualTranslate && 0 !== e) {\n              var a = !1;b.slides.transitionEnd(function () {\n                if (!a && b) {\n                  a = !0, b.animating = !1;for (var e = [\"webkitTransitionEnd\", \"transitionend\", \"oTransitionEnd\", \"MSTransitionEnd\", \"msTransitionEnd\"], t = 0; t < e.length; t++) {\n                    b.wrapper.trigger(e[t]);\n                  }\n                }\n              });\n            }\n          } }, flip: { setTranslate: function setTranslate() {\n            for (var e = 0; e < b.slides.length; e++) {\n              var t = b.slides.eq(e),\n                  r = t[0].progress;b.params.flip.limitRotation && (r = Math.max(Math.min(t[0].progress, 1), -1));var i = t[0].swiperSlideOffset,\n                  s = -180 * r,\n                  n = s,\n                  o = 0,\n                  l = -i,\n                  p = 0;if (b.isHorizontal() ? b.rtl && (n = -n) : (p = l, l = 0, o = -n, n = 0), t[0].style.zIndex = -Math.abs(Math.round(r)) + b.slides.length, b.params.flip.slideShadows) {\n                var d = b.isHorizontal() ? t.find(\".swiper-slide-shadow-left\") : t.find(\".swiper-slide-shadow-top\"),\n                    u = b.isHorizontal() ? t.find(\".swiper-slide-shadow-right\") : t.find(\".swiper-slide-shadow-bottom\");0 === d.length && (d = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), t.append(d)), 0 === u.length && (u = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), t.append(u)), d.length && (d[0].style.opacity = Math.max(-r, 0)), u.length && (u[0].style.opacity = Math.max(r, 0));\n              }t.transform(\"translate3d(\" + l + \"px, \" + p + \"px, 0px) rotateX(\" + o + \"deg) rotateY(\" + n + \"deg)\");\n            }\n          }, setTransition: function setTransition(e) {\n            if (b.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), b.params.virtualTranslate && 0 !== e) {\n              var t = !1;b.slides.eq(b.activeIndex).transitionEnd(function () {\n                if (!t && b && a(this).hasClass(b.params.slideActiveClass)) {\n                  t = !0, b.animating = !1;for (var e = [\"webkitTransitionEnd\", \"transitionend\", \"oTransitionEnd\", \"MSTransitionEnd\", \"msTransitionEnd\"], r = 0; r < e.length; r++) {\n                    b.wrapper.trigger(e[r]);\n                  }\n                }\n              });\n            }\n          } }, cube: { setTranslate: function setTranslate() {\n            var e,\n                t = 0;b.params.cube.shadow && (b.isHorizontal() ? (e = b.wrapper.find(\".swiper-cube-shadow\"), 0 === e.length && (e = a('<div class=\"swiper-cube-shadow\"></div>'), b.wrapper.append(e)), e.css({ height: b.width + \"px\" })) : (e = b.container.find(\".swiper-cube-shadow\"), 0 === e.length && (e = a('<div class=\"swiper-cube-shadow\"></div>'), b.container.append(e))));for (var r = 0; r < b.slides.length; r++) {\n              var i = b.slides.eq(r),\n                  s = 90 * r,\n                  n = Math.floor(s / 360);b.rtl && (s = -s, n = Math.floor(-s / 360));var o = Math.max(Math.min(i[0].progress, 1), -1),\n                  l = 0,\n                  p = 0,\n                  d = 0;r % 4 === 0 ? (l = 4 * -n * b.size, d = 0) : (r - 1) % 4 === 0 ? (l = 0, d = 4 * -n * b.size) : (r - 2) % 4 === 0 ? (l = b.size + 4 * n * b.size, d = b.size) : (r - 3) % 4 === 0 && (l = -b.size, d = 3 * b.size + 4 * b.size * n), b.rtl && (l = -l), b.isHorizontal() || (p = l, l = 0);var u = \"rotateX(\" + (b.isHorizontal() ? 0 : -s) + \"deg) rotateY(\" + (b.isHorizontal() ? s : 0) + \"deg) translate3d(\" + l + \"px, \" + p + \"px, \" + d + \"px)\";if (1 >= o && o > -1 && (t = 90 * r + 90 * o, b.rtl && (t = 90 * -r - 90 * o)), i.transform(u), b.params.cube.slideShadows) {\n                var c = b.isHorizontal() ? i.find(\".swiper-slide-shadow-left\") : i.find(\".swiper-slide-shadow-top\"),\n                    m = b.isHorizontal() ? i.find(\".swiper-slide-shadow-right\") : i.find(\".swiper-slide-shadow-bottom\");0 === c.length && (c = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), i.append(c)), 0 === m.length && (m = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), i.append(m)), c.length && (c[0].style.opacity = Math.max(-o, 0)), m.length && (m[0].style.opacity = Math.max(o, 0));\n              }\n            }if (b.wrapper.css({ \"-webkit-transform-origin\": \"50% 50% -\" + b.size / 2 + \"px\", \"-moz-transform-origin\": \"50% 50% -\" + b.size / 2 + \"px\", \"-ms-transform-origin\": \"50% 50% -\" + b.size / 2 + \"px\", \"transform-origin\": \"50% 50% -\" + b.size / 2 + \"px\" }), b.params.cube.shadow) if (b.isHorizontal()) e.transform(\"translate3d(0px, \" + (b.width / 2 + b.params.cube.shadowOffset) + \"px, \" + -b.width / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + b.params.cube.shadowScale + \")\");else {\n              var h = Math.abs(t) - 90 * Math.floor(Math.abs(t) / 90),\n                  f = 1.5 - (Math.sin(2 * h * Math.PI / 360) / 2 + Math.cos(2 * h * Math.PI / 360) / 2),\n                  g = b.params.cube.shadowScale,\n                  v = b.params.cube.shadowScale / f,\n                  w = b.params.cube.shadowOffset;e.transform(\"scale3d(\" + g + \", 1, \" + v + \") translate3d(0px, \" + (b.height / 2 + w) + \"px, \" + -b.height / 2 / v + \"px) rotateX(-90deg)\");\n            }var y = b.isSafari || b.isUiWebView ? -b.size / 2 : 0;b.wrapper.transform(\"translate3d(0px,0,\" + y + \"px) rotateX(\" + (b.isHorizontal() ? 0 : t) + \"deg) rotateY(\" + (b.isHorizontal() ? -t : 0) + \"deg)\");\n          }, setTransition: function setTransition(e) {\n            b.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), b.params.cube.shadow && !b.isHorizontal() && b.container.find(\".swiper-cube-shadow\").transition(e);\n          } }, coverflow: { setTranslate: function setTranslate() {\n            for (var e = b.translate, t = b.isHorizontal() ? -e + b.width / 2 : -e + b.height / 2, r = b.isHorizontal() ? b.params.coverflow.rotate : -b.params.coverflow.rotate, i = b.params.coverflow.depth, s = 0, n = b.slides.length; n > s; s++) {\n              var o = b.slides.eq(s),\n                  l = b.slidesSizesGrid[s],\n                  p = o[0].swiperSlideOffset,\n                  d = (t - p - l / 2) / l * b.params.coverflow.modifier,\n                  u = b.isHorizontal() ? r * d : 0,\n                  c = b.isHorizontal() ? 0 : r * d,\n                  m = -i * Math.abs(d),\n                  h = b.isHorizontal() ? 0 : b.params.coverflow.stretch * d,\n                  f = b.isHorizontal() ? b.params.coverflow.stretch * d : 0;Math.abs(f) < .001 && (f = 0), Math.abs(h) < .001 && (h = 0), Math.abs(m) < .001 && (m = 0), Math.abs(u) < .001 && (u = 0), Math.abs(c) < .001 && (c = 0);var g = \"translate3d(\" + f + \"px,\" + h + \"px,\" + m + \"px)  rotateX(\" + c + \"deg) rotateY(\" + u + \"deg)\";if (o.transform(g), o[0].style.zIndex = -Math.abs(Math.round(d)) + 1, b.params.coverflow.slideShadows) {\n                var v = b.isHorizontal() ? o.find(\".swiper-slide-shadow-left\") : o.find(\".swiper-slide-shadow-top\"),\n                    w = b.isHorizontal() ? o.find(\".swiper-slide-shadow-right\") : o.find(\".swiper-slide-shadow-bottom\");0 === v.length && (v = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), o.append(v)), 0 === w.length && (w = a('<div class=\"swiper-slide-shadow-' + (b.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), o.append(w)), v.length && (v[0].style.opacity = d > 0 ? d : 0), w.length && (w[0].style.opacity = -d > 0 ? -d : 0);\n              }\n            }if (b.browser.ie) {\n              var y = b.wrapper[0].style;y.perspectiveOrigin = t + \"px 50%\";\n            }\n          }, setTransition: function setTransition(e) {\n            b.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e);\n          } } }, b.lazy = { initialImageLoaded: !1, loadImageInSlide: function loadImageInSlide(e, t) {\n          if (\"undefined\" != typeof e && (\"undefined\" == typeof t && (t = !0), 0 !== b.slides.length)) {\n            var r = b.slides.eq(e),\n                i = r.find(\".swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)\");!r.hasClass(\"swiper-lazy\") || r.hasClass(\"swiper-lazy-loaded\") || r.hasClass(\"swiper-lazy-loading\") || (i = i.add(r[0])), 0 !== i.length && i.each(function () {\n              var e = a(this);e.addClass(\"swiper-lazy-loading\");var i = e.attr(\"data-background\"),\n                  s = e.attr(\"data-src\"),\n                  n = e.attr(\"data-srcset\");b.loadImage(e[0], s || i, n, !1, function () {\n                if (i ? (e.css(\"background-image\", 'url(\"' + i + '\")'), e.removeAttr(\"data-background\")) : (n && (e.attr(\"srcset\", n), e.removeAttr(\"data-srcset\")), s && (e.attr(\"src\", s), e.removeAttr(\"data-src\"))), e.addClass(\"swiper-lazy-loaded\").removeClass(\"swiper-lazy-loading\"), r.find(\".swiper-lazy-preloader, .preloader\").remove(), b.params.loop && t) {\n                  var a = r.attr(\"data-swiper-slide-index\");if (r.hasClass(b.params.slideDuplicateClass)) {\n                    var o = b.wrapper.children('[data-swiper-slide-index=\"' + a + '\"]:not(.' + b.params.slideDuplicateClass + \")\");b.lazy.loadImageInSlide(o.index(), !1);\n                  } else {\n                    var l = b.wrapper.children(\".\" + b.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + a + '\"]');b.lazy.loadImageInSlide(l.index(), !1);\n                  }\n                }b.emit(\"onLazyImageReady\", b, r[0], e[0]);\n              }), b.emit(\"onLazyImageLoad\", b, r[0], e[0]);\n            });\n          }\n        }, load: function load() {\n          var e;if (b.params.watchSlidesVisibility) b.wrapper.children(\".\" + b.params.slideVisibleClass).each(function () {\n            b.lazy.loadImageInSlide(a(this).index());\n          });else if (b.params.slidesPerView > 1) for (e = b.activeIndex; e < b.activeIndex + b.params.slidesPerView; e++) {\n            b.slides[e] && b.lazy.loadImageInSlide(e);\n          } else b.lazy.loadImageInSlide(b.activeIndex);if (b.params.lazyLoadingInPrevNext) if (b.params.slidesPerView > 1 || b.params.lazyLoadingInPrevNextAmount && b.params.lazyLoadingInPrevNextAmount > 1) {\n            var t = b.params.lazyLoadingInPrevNextAmount,\n                r = b.params.slidesPerView,\n                i = Math.min(b.activeIndex + r + Math.max(t, r), b.slides.length),\n                s = Math.max(b.activeIndex - Math.max(r, t), 0);for (e = b.activeIndex + b.params.slidesPerView; i > e; e++) {\n              b.slides[e] && b.lazy.loadImageInSlide(e);\n            }for (e = s; e < b.activeIndex; e++) {\n              b.slides[e] && b.lazy.loadImageInSlide(e);\n            }\n          } else {\n            var n = b.wrapper.children(\".\" + b.params.slideNextClass);n.length > 0 && b.lazy.loadImageInSlide(n.index());var o = b.wrapper.children(\".\" + b.params.slidePrevClass);o.length > 0 && b.lazy.loadImageInSlide(o.index());\n          }\n        }, onTransitionStart: function onTransitionStart() {\n          b.params.lazyLoading && (b.params.lazyLoadingOnTransitionStart || !b.params.lazyLoadingOnTransitionStart && !b.lazy.initialImageLoaded) && b.lazy.load();\n        }, onTransitionEnd: function onTransitionEnd() {\n          b.params.lazyLoading && !b.params.lazyLoadingOnTransitionStart && b.lazy.load();\n        } }, b.scrollbar = { isTouched: !1, setDragPosition: function setDragPosition(e) {\n          var a = b.scrollbar,\n              t = b.isHorizontal() ? \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY,\n              r = t - a.track.offset()[b.isHorizontal() ? \"left\" : \"top\"] - a.dragSize / 2,\n              i = -b.minTranslate() * a.moveDivider,\n              s = -b.maxTranslate() * a.moveDivider;i > r ? r = i : r > s && (r = s), r = -r / a.moveDivider, b.updateProgress(r), b.setWrapperTranslate(r, !0);\n        }, dragStart: function dragStart(e) {\n          var a = b.scrollbar;a.isTouched = !0, e.preventDefault(), e.stopPropagation(), a.setDragPosition(e), clearTimeout(a.dragTimeout), a.track.transition(0), b.params.scrollbarHide && a.track.css(\"opacity\", 1), b.wrapper.transition(100), a.drag.transition(100), b.emit(\"onScrollbarDragStart\", b);\n        }, dragMove: function dragMove(e) {\n          var a = b.scrollbar;a.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), b.wrapper.transition(0), a.track.transition(0), a.drag.transition(0), b.emit(\"onScrollbarDragMove\", b));\n        }, dragEnd: function dragEnd(e) {\n          var a = b.scrollbar;a.isTouched && (a.isTouched = !1, b.params.scrollbarHide && (clearTimeout(a.dragTimeout), a.dragTimeout = setTimeout(function () {\n            a.track.css(\"opacity\", 0), a.track.transition(400);\n          }, 1e3)), b.emit(\"onScrollbarDragEnd\", b), b.params.scrollbarSnapOnRelease && b.slideReset());\n        }, enableDraggable: function enableDraggable() {\n          var e = b.scrollbar,\n              t = b.support.touch ? e.track : document;a(e.track).on(b.touchEvents.start, e.dragStart), a(t).on(b.touchEvents.move, e.dragMove), a(t).on(b.touchEvents.end, e.dragEnd);\n        }, disableDraggable: function disableDraggable() {\n          var e = b.scrollbar,\n              t = b.support.touch ? e.track : document;a(e.track).off(b.touchEvents.start, e.dragStart), a(t).off(b.touchEvents.move, e.dragMove), a(t).off(b.touchEvents.end, e.dragEnd);\n        }, set: function set() {\n          if (b.params.scrollbar) {\n            var e = b.scrollbar;e.track = a(b.params.scrollbar), b.params.uniqueNavElements && \"string\" == typeof b.params.scrollbar && e.track.length > 1 && 1 === b.container.find(b.params.scrollbar).length && (e.track = b.container.find(b.params.scrollbar)), e.drag = e.track.find(\".swiper-scrollbar-drag\"), 0 === e.drag.length && (e.drag = a('<div class=\"swiper-scrollbar-drag\"></div>'), e.track.append(e.drag)), e.drag[0].style.width = \"\", e.drag[0].style.height = \"\", e.trackSize = b.isHorizontal() ? e.track[0].offsetWidth : e.track[0].offsetHeight, e.divider = b.size / b.virtualSize, e.moveDivider = e.divider * (e.trackSize / b.size), e.dragSize = e.trackSize * e.divider, b.isHorizontal() ? e.drag[0].style.width = e.dragSize + \"px\" : e.drag[0].style.height = e.dragSize + \"px\", e.divider >= 1 ? e.track[0].style.display = \"none\" : e.track[0].style.display = \"\", b.params.scrollbarHide && (e.track[0].style.opacity = 0);\n          }\n        }, setTranslate: function setTranslate() {\n          if (b.params.scrollbar) {\n            var e,\n                a = b.scrollbar,\n                t = (b.translate || 0, a.dragSize);e = (a.trackSize - a.dragSize) * b.progress, b.rtl && b.isHorizontal() ? (e = -e, e > 0 ? (t = a.dragSize - e, e = 0) : -e + a.dragSize > a.trackSize && (t = a.trackSize + e)) : 0 > e ? (t = a.dragSize + e, e = 0) : e + a.dragSize > a.trackSize && (t = a.trackSize - e), b.isHorizontal() ? (b.support.transforms3d ? a.drag.transform(\"translate3d(\" + e + \"px, 0, 0)\") : a.drag.transform(\"translateX(\" + e + \"px)\"), a.drag[0].style.width = t + \"px\") : (b.support.transforms3d ? a.drag.transform(\"translate3d(0px, \" + e + \"px, 0)\") : a.drag.transform(\"translateY(\" + e + \"px)\"), a.drag[0].style.height = t + \"px\"), b.params.scrollbarHide && (clearTimeout(a.timeout), a.track[0].style.opacity = 1, a.timeout = setTimeout(function () {\n              a.track[0].style.opacity = 0, a.track.transition(400);\n            }, 1e3));\n          }\n        }, setTransition: function setTransition(e) {\n          b.params.scrollbar && b.scrollbar.drag.transition(e);\n        } }, b.controller = { LinearSpline: function LinearSpline(e, a) {\n          this.x = e, this.y = a, this.lastIndex = e.length - 1;var t, r;this.x.length;this.interpolate = function (e) {\n            return e ? (r = i(this.x, e), t = r - 1, (e - this.x[t]) * (this.y[r] - this.y[t]) / (this.x[r] - this.x[t]) + this.y[t]) : 0;\n          };var i = function () {\n            var e, a, t;return function (r, i) {\n              for (a = -1, e = r.length; e - a > 1;) {\n                r[t = e + a >> 1] <= i ? a = t : e = t;\n              }return e;\n            };\n          }();\n        }, getInterpolateFunction: function getInterpolateFunction(e) {\n          b.controller.spline || (b.controller.spline = b.params.loop ? new b.controller.LinearSpline(b.slidesGrid, e.slidesGrid) : new b.controller.LinearSpline(b.snapGrid, e.snapGrid));\n        }, setTranslate: function setTranslate(e, a) {\n          function r(a) {\n            e = a.rtl && \"horizontal\" === a.params.direction ? -b.translate : b.translate, \"slide\" === b.params.controlBy && (b.controller.getInterpolateFunction(a), s = -b.controller.spline.interpolate(-e)), s && \"container\" !== b.params.controlBy || (i = (a.maxTranslate() - a.minTranslate()) / (b.maxTranslate() - b.minTranslate()), s = (e - b.minTranslate()) * i + a.minTranslate()), b.params.controlInverse && (s = a.maxTranslate() - s), a.updateProgress(s), a.setWrapperTranslate(s, !1, b), a.updateActiveIndex();\n          }var i,\n              s,\n              n = b.params.control;if (b.isArray(n)) for (var o = 0; o < n.length; o++) {\n            n[o] !== a && n[o] instanceof t && r(n[o]);\n          } else n instanceof t && a !== n && r(n);\n        }, setTransition: function setTransition(e, a) {\n          function r(a) {\n            a.setWrapperTransition(e, b), 0 !== e && (a.onTransitionStart(), a.wrapper.transitionEnd(function () {\n              s && (a.params.loop && \"slide\" === b.params.controlBy && a.fixLoop(), a.onTransitionEnd());\n            }));\n          }var i,\n              s = b.params.control;if (b.isArray(s)) for (i = 0; i < s.length; i++) {\n            s[i] !== a && s[i] instanceof t && r(s[i]);\n          } else s instanceof t && a !== s && r(s);\n        } }, b.hashnav = { init: function init() {\n          if (b.params.hashnav) {\n            b.hashnav.initialized = !0;var e = document.location.hash.replace(\"#\", \"\");if (e) for (var a = 0, t = 0, r = b.slides.length; r > t; t++) {\n              var i = b.slides.eq(t),\n                  s = i.attr(\"data-hash\");if (s === e && !i.hasClass(b.params.slideDuplicateClass)) {\n                var n = i.index();b.slideTo(n, a, b.params.runCallbacksOnInit, !0);\n              }\n            }\n          }\n        }, setHash: function setHash() {\n          b.hashnav.initialized && b.params.hashnav && (document.location.hash = b.slides.eq(b.activeIndex).attr(\"data-hash\") || \"\");\n        } }, b.disableKeyboardControl = function () {\n        b.params.keyboardControl = !1, a(document).off(\"keydown\", p);\n      }, b.enableKeyboardControl = function () {\n        b.params.keyboardControl = !0, a(document).on(\"keydown\", p);\n      }, b.mousewheel = { event: !1, lastScrollTime: new window.Date().getTime() }, b.params.mousewheelControl) {\n        try {\n          new window.WheelEvent(\"wheel\"), b.mousewheel.event = \"wheel\";\n        } catch (N) {\n          (window.WheelEvent || b.container[0] && \"wheel\" in b.container[0]) && (b.mousewheel.event = \"wheel\");\n        }!b.mousewheel.event && window.WheelEvent, b.mousewheel.event || void 0 === document.onmousewheel || (b.mousewheel.event = \"mousewheel\"), b.mousewheel.event || (b.mousewheel.event = \"DOMMouseScroll\");\n      }b.disableMousewheelControl = function () {\n        return b.mousewheel.event ? (b.container.off(b.mousewheel.event, d), !0) : !1;\n      }, b.enableMousewheelControl = function () {\n        return b.mousewheel.event ? (b.container.on(b.mousewheel.event, d), !0) : !1;\n      }, b.parallax = { setTranslate: function setTranslate() {\n          b.container.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function () {\n            u(this, b.progress);\n          }), b.slides.each(function () {\n            var e = a(this);e.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function () {\n              var a = Math.min(Math.max(e[0].progress, -1), 1);u(this, a);\n            });\n          });\n        }, setTransition: function setTransition(e) {\n          \"undefined\" == typeof e && (e = b.params.speed), b.container.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]\").each(function () {\n            var t = a(this),\n                r = parseInt(t.attr(\"data-swiper-parallax-duration\"), 10) || e;0 === e && (r = 0), t.transition(r);\n          });\n        } }, b._plugins = [];for (var R in b.plugins) {\n        var W = b.plugins[R](b, b.params[R]);W && b._plugins.push(W);\n      }return b.callPlugins = function (e) {\n        for (var a = 0; a < b._plugins.length; a++) {\n          e in b._plugins[a] && b._plugins[a][e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n      }, b.emitterEventListeners = {}, b.emit = function (e) {\n        b.params[e] && b.params[e](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);var a;if (b.emitterEventListeners[e]) for (a = 0; a < b.emitterEventListeners[e].length; a++) {\n          b.emitterEventListeners[e][a](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }b.callPlugins && b.callPlugins(e, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n      }, b.on = function (e, a) {\n        return e = c(e), b.emitterEventListeners[e] || (b.emitterEventListeners[e] = []), b.emitterEventListeners[e].push(a), b;\n      }, b.off = function (e, a) {\n        var t;if (e = c(e), \"undefined\" == typeof a) return b.emitterEventListeners[e] = [], b;if (b.emitterEventListeners[e] && 0 !== b.emitterEventListeners[e].length) {\n          for (t = 0; t < b.emitterEventListeners[e].length; t++) {\n            b.emitterEventListeners[e][t] === a && b.emitterEventListeners[e].splice(t, 1);\n          }return b;\n        }\n      }, b.once = function (e, a) {\n        e = c(e);var t = function t() {\n          a(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]), b.off(e, t);\n        };return b.on(e, t), b;\n      }, b.a11y = { makeFocusable: function makeFocusable(e) {\n          return e.attr(\"tabIndex\", \"0\"), e;\n        }, addRole: function addRole(e, a) {\n          return e.attr(\"role\", a), e;\n        }, addLabel: function addLabel(e, a) {\n          return e.attr(\"aria-label\", a), e;\n        }, disable: function disable(e) {\n          return e.attr(\"aria-disabled\", !0), e;\n        }, enable: function enable(e) {\n          return e.attr(\"aria-disabled\", !1), e;\n        }, onEnterKey: function onEnterKey(e) {\n          13 === e.keyCode && (a(e.target).is(b.params.nextButton) ? (b.onClickNext(e), b.isEnd ? b.a11y.notify(b.params.lastSlideMessage) : b.a11y.notify(b.params.nextSlideMessage)) : a(e.target).is(b.params.prevButton) && (b.onClickPrev(e), b.isBeginning ? b.a11y.notify(b.params.firstSlideMessage) : b.a11y.notify(b.params.prevSlideMessage)), a(e.target).is(\".\" + b.params.bulletClass) && a(e.target)[0].click());\n        }, liveRegion: a('<span class=\"swiper-notification\" aria-live=\"assertive\" aria-atomic=\"true\"></span>'), notify: function notify(e) {\n          var a = b.a11y.liveRegion;0 !== a.length && (a.html(\"\"), a.html(e));\n        }, init: function init() {\n          b.params.nextButton && b.nextButton && b.nextButton.length > 0 && (b.a11y.makeFocusable(b.nextButton), b.a11y.addRole(b.nextButton, \"button\"), b.a11y.addLabel(b.nextButton, b.params.nextSlideMessage)), b.params.prevButton && b.prevButton && b.prevButton.length > 0 && (b.a11y.makeFocusable(b.prevButton), b.a11y.addRole(b.prevButton, \"button\"), b.a11y.addLabel(b.prevButton, b.params.prevSlideMessage)), a(b.container).append(b.a11y.liveRegion);\n        }, initPagination: function initPagination() {\n          b.params.pagination && b.params.paginationClickable && b.bullets && b.bullets.length && b.bullets.each(function () {\n            var e = a(this);b.a11y.makeFocusable(e), b.a11y.addRole(e, \"button\"), b.a11y.addLabel(e, b.params.paginationBulletMessage.replace(/{{index}}/, e.index() + 1));\n          });\n        }, destroy: function destroy() {\n          b.a11y.liveRegion && b.a11y.liveRegion.length > 0 && b.a11y.liveRegion.remove();\n        } }, b.init = function () {\n        b.params.loop && b.createLoop(), b.updateContainerSize(), b.updateSlidesSize(), b.updatePagination(), b.params.scrollbar && b.scrollbar && (b.scrollbar.set(), b.params.scrollbarDraggable && b.scrollbar.enableDraggable()), \"slide\" !== b.params.effect && b.effects[b.params.effect] && (b.params.loop || b.updateProgress(), b.effects[b.params.effect].setTranslate()), b.params.loop ? b.slideTo(b.params.initialSlide + b.loopedSlides, 0, b.params.runCallbacksOnInit) : (b.slideTo(b.params.initialSlide, 0, b.params.runCallbacksOnInit), 0 === b.params.initialSlide && (b.parallax && b.params.parallax && b.parallax.setTranslate(), b.lazy && b.params.lazyLoading && (b.lazy.load(), b.lazy.initialImageLoaded = !0))), b.attachEvents(), b.params.observer && b.support.observer && b.initObservers(), b.params.preloadImages && !b.params.lazyLoading && b.preloadImages(), b.params.autoplay && b.startAutoplay(), b.params.keyboardControl && b.enableKeyboardControl && b.enableKeyboardControl(), b.params.mousewheelControl && b.enableMousewheelControl && b.enableMousewheelControl(), b.params.hashnav && b.hashnav && b.hashnav.init(), b.params.a11y && b.a11y && b.a11y.init(), b.emit(\"onInit\", b);\n      }, b.cleanupStyles = function () {\n        b.container.removeClass(b.classNames.join(\" \")).removeAttr(\"style\"), b.wrapper.removeAttr(\"style\"), b.slides && b.slides.length && b.slides.removeClass([b.params.slideVisibleClass, b.params.slideActiveClass, b.params.slideNextClass, b.params.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-column\").removeAttr(\"data-swiper-row\"), b.paginationContainer && b.paginationContainer.length && b.paginationContainer.removeClass(b.params.paginationHiddenClass), b.bullets && b.bullets.length && b.bullets.removeClass(b.params.bulletActiveClass), b.params.prevButton && a(b.params.prevButton).removeClass(b.params.buttonDisabledClass), b.params.nextButton && a(b.params.nextButton).removeClass(b.params.buttonDisabledClass), b.params.scrollbar && b.scrollbar && (b.scrollbar.track && b.scrollbar.track.length && b.scrollbar.track.removeAttr(\"style\"), b.scrollbar.drag && b.scrollbar.drag.length && b.scrollbar.drag.removeAttr(\"style\"));\n      }, b.destroy = function (e, a) {\n        b.detachEvents(), b.stopAutoplay(), b.params.scrollbar && b.scrollbar && b.params.scrollbarDraggable && b.scrollbar.disableDraggable(), b.params.loop && b.destroyLoop(), a && b.cleanupStyles(), b.disconnectObservers(), b.params.keyboardControl && b.disableKeyboardControl && b.disableKeyboardControl(), b.params.mousewheelControl && b.disableMousewheelControl && b.disableMousewheelControl(), b.params.a11y && b.a11y && b.a11y.destroy(), b.emit(\"onDestroy\"), e !== !1 && (b = null);\n      }, b.init(), b;\n    }\n  };t.prototype = { isSafari: function () {\n      var e = navigator.userAgent.toLowerCase();return e.indexOf(\"safari\") >= 0 && e.indexOf(\"chrome\") < 0 && e.indexOf(\"android\") < 0;\n    }(), isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent), isArray: function isArray(e) {\n      return \"[object Array]\" === Object.prototype.toString.apply(e);\n    }, browser: { ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled, ieTouch: window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1 }, device: function () {\n      var e = navigator.userAgent,\n          a = e.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\n          t = e.match(/(iPad).*OS\\s([\\d_]+)/),\n          r = e.match(/(iPod)(.*OS\\s([\\d_]+))?/),\n          i = !t && e.match(/(iPhone\\sOS)\\s([\\d_]+)/);return { ios: t || i || r, android: a };\n    }(), support: { touch: window.Modernizr && Modernizr.touch === !0 || function () {\n        return !!(\"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch);\n      }(), transforms3d: window.Modernizr && Modernizr.csstransforms3d === !0 || function () {\n        var e = document.createElement(\"div\").style;return \"webkitPerspective\" in e || \"MozPerspective\" in e || \"OPerspective\" in e || \"MsPerspective\" in e || \"perspective\" in e;\n      }(), flexbox: function () {\n        for (var e = document.createElement(\"div\").style, a = \"alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient\".split(\" \"), t = 0; t < a.length; t++) {\n          if (a[t] in e) return !0;\n        }\n      }(), observer: function () {\n        return \"MutationObserver\" in window || \"WebkitMutationObserver\" in window;\n      }() }, plugins: {} };for (var r = function () {\n    var e = function e(_e) {\n      var a = this,\n          t = 0;for (t = 0; t < _e.length; t++) {\n        a[t] = _e[t];\n      }return a.length = _e.length, this;\n    },\n        a = function a(_a, t) {\n      var r = [],\n          i = 0;if (_a && !t && _a instanceof e) return _a;if (_a) if (\"string\" == typeof _a) {\n        var s,\n            n,\n            o = _a.trim();if (o.indexOf(\"<\") >= 0 && o.indexOf(\">\") >= 0) {\n          var l = \"div\";for (0 === o.indexOf(\"<li\") && (l = \"ul\"), 0 === o.indexOf(\"<tr\") && (l = \"tbody\"), (0 === o.indexOf(\"<td\") || 0 === o.indexOf(\"<th\")) && (l = \"tr\"), 0 === o.indexOf(\"<tbody\") && (l = \"table\"), 0 === o.indexOf(\"<option\") && (l = \"select\"), n = document.createElement(l), n.innerHTML = _a, i = 0; i < n.childNodes.length; i++) {\n            r.push(n.childNodes[i]);\n          }\n        } else for (s = t || \"#\" !== _a[0] || _a.match(/[ .<>:~]/) ? (t || document).querySelectorAll(_a) : [document.getElementById(_a.split(\"#\")[1])], i = 0; i < s.length; i++) {\n          s[i] && r.push(s[i]);\n        }\n      } else if (_a.nodeType || _a === window || _a === document) r.push(_a);else if (_a.length > 0 && _a[0].nodeType) for (i = 0; i < _a.length; i++) {\n        r.push(_a[i]);\n      }return new e(r);\n    };return e.prototype = { addClass: function addClass(e) {\n        if (\"undefined\" == typeof e) return this;for (var a = e.split(\" \"), t = 0; t < a.length; t++) {\n          for (var r = 0; r < this.length; r++) {\n            this[r].classList.add(a[t]);\n          }\n        }return this;\n      }, removeClass: function removeClass(e) {\n        for (var a = e.split(\" \"), t = 0; t < a.length; t++) {\n          for (var r = 0; r < this.length; r++) {\n            this[r].classList.remove(a[t]);\n          }\n        }return this;\n      }, hasClass: function hasClass(e) {\n        return this[0] ? this[0].classList.contains(e) : !1;\n      }, toggleClass: function toggleClass(e) {\n        for (var a = e.split(\" \"), t = 0; t < a.length; t++) {\n          for (var r = 0; r < this.length; r++) {\n            this[r].classList.toggle(a[t]);\n          }\n        }return this;\n      }, attr: function attr(e, a) {\n        if (1 === arguments.length && \"string\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;for (var t = 0; t < this.length; t++) {\n          if (2 === arguments.length) this[t].setAttribute(e, a);else for (var r in e) {\n            this[t][r] = e[r], this[t].setAttribute(r, e[r]);\n          }\n        }return this;\n      }, removeAttr: function removeAttr(e) {\n        for (var a = 0; a < this.length; a++) {\n          this[a].removeAttribute(e);\n        }return this;\n      }, data: function data(e, a) {\n        if (\"undefined\" != typeof a) {\n          for (var t = 0; t < this.length; t++) {\n            var r = this[t];r.dom7ElementDataStorage || (r.dom7ElementDataStorage = {}), r.dom7ElementDataStorage[e] = a;\n          }return this;\n        }if (this[0]) {\n          var i = this[0].getAttribute(\"data-\" + e);return i ? i : this[0].dom7ElementDataStorage && (e in this[0].dom7ElementDataStorage) ? this[0].dom7ElementDataStorage[e] : void 0;\n        }\n      }, transform: function transform(e) {\n        for (var a = 0; a < this.length; a++) {\n          var t = this[a].style;t.webkitTransform = t.MsTransform = t.msTransform = t.MozTransform = t.OTransform = t.transform = e;\n        }return this;\n      }, transition: function transition(e) {\n        \"string\" != typeof e && (e += \"ms\");for (var a = 0; a < this.length; a++) {\n          var t = this[a].style;t.webkitTransitionDuration = t.MsTransitionDuration = t.msTransitionDuration = t.MozTransitionDuration = t.OTransitionDuration = t.transitionDuration = e;\n        }return this;\n      }, on: function on(e, t, r, i) {\n        function s(e) {\n          var i = e.target;if (a(i).is(t)) r.call(i, e);else for (var s = a(i).parents(), n = 0; n < s.length; n++) {\n            a(s[n]).is(t) && r.call(s[n], e);\n          }\n        }var n,\n            o,\n            l = e.split(\" \");for (n = 0; n < this.length; n++) {\n          if (\"function\" == typeof t || t === !1) for (\"function\" == typeof t && (r = arguments[1], i = arguments[2] || !1), o = 0; o < l.length; o++) {\n            this[n].addEventListener(l[o], r, i);\n          } else for (o = 0; o < l.length; o++) {\n            this[n].dom7LiveListeners || (this[n].dom7LiveListeners = []), this[n].dom7LiveListeners.push({ listener: r, liveListener: s }), this[n].addEventListener(l[o], s, i);\n          }\n        }return this;\n      }, off: function off(e, a, t, r) {\n        for (var i = e.split(\" \"), s = 0; s < i.length; s++) {\n          for (var n = 0; n < this.length; n++) {\n            if (\"function\" == typeof a || a === !1) \"function\" == typeof a && (t = arguments[1], r = arguments[2] || !1), this[n].removeEventListener(i[s], t, r);else if (this[n].dom7LiveListeners) for (var o = 0; o < this[n].dom7LiveListeners.length; o++) {\n              this[n].dom7LiveListeners[o].listener === t && this[n].removeEventListener(i[s], this[n].dom7LiveListeners[o].liveListener, r);\n            }\n          }\n        }return this;\n      }, once: function once(e, a, t, r) {\n        function i(n) {\n          t(n), s.off(e, a, i, r);\n        }var s = this;\"function\" == typeof a && (a = !1, t = arguments[1], r = arguments[2]), s.on(e, a, i, r);\n      }, trigger: function trigger(e, a) {\n        for (var t = 0; t < this.length; t++) {\n          var r;try {\n            r = new window.CustomEvent(e, { detail: a, bubbles: !0, cancelable: !0 });\n          } catch (i) {\n            r = document.createEvent(\"Event\"), r.initEvent(e, !0, !0), r.detail = a;\n          }this[t].dispatchEvent(r);\n        }return this;\n      }, transitionEnd: function transitionEnd(e) {\n        function a(s) {\n          if (s.target === this) for (e.call(this, s), t = 0; t < r.length; t++) {\n            i.off(r[t], a);\n          }\n        }var t,\n            r = [\"webkitTransitionEnd\", \"transitionend\", \"oTransitionEnd\", \"MSTransitionEnd\", \"msTransitionEnd\"],\n            i = this;if (e) for (t = 0; t < r.length; t++) {\n          i.on(r[t], a);\n        }return this;\n      }, width: function width() {\n        return this[0] === window ? window.innerWidth : this.length > 0 ? parseFloat(this.css(\"width\")) : null;\n      }, outerWidth: function outerWidth(e) {\n        return this.length > 0 ? e ? this[0].offsetWidth + parseFloat(this.css(\"margin-right\")) + parseFloat(this.css(\"margin-left\")) : this[0].offsetWidth : null;\n      }, height: function height() {\n        return this[0] === window ? window.innerHeight : this.length > 0 ? parseFloat(this.css(\"height\")) : null;\n      }, outerHeight: function outerHeight(e) {\n        return this.length > 0 ? e ? this[0].offsetHeight + parseFloat(this.css(\"margin-top\")) + parseFloat(this.css(\"margin-bottom\")) : this[0].offsetHeight : null;\n      }, offset: function offset() {\n        if (this.length > 0) {\n          var e = this[0],\n              a = e.getBoundingClientRect(),\n              t = document.body,\n              r = e.clientTop || t.clientTop || 0,\n              i = e.clientLeft || t.clientLeft || 0,\n              s = window.pageYOffset || e.scrollTop,\n              n = window.pageXOffset || e.scrollLeft;return { top: a.top + s - r, left: a.left + n - i };\n        }return null;\n      }, css: function css(e, a) {\n        var t;if (1 === arguments.length) {\n          if (\"string\" != typeof e) {\n            for (t = 0; t < this.length; t++) {\n              for (var r in e) {\n                this[t].style[r] = e[r];\n              }\n            }return this;\n          }if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(e);\n        }if (2 === arguments.length && \"string\" == typeof e) {\n          for (t = 0; t < this.length; t++) {\n            this[t].style[e] = a;\n          }return this;\n        }return this;\n      }, each: function each(e) {\n        for (var a = 0; a < this.length; a++) {\n          e.call(this[a], a, this[a]);\n        }return this;\n      }, html: function html(e) {\n        if (\"undefined\" == typeof e) return this[0] ? this[0].innerHTML : void 0;for (var a = 0; a < this.length; a++) {\n          this[a].innerHTML = e;\n        }return this;\n      }, text: function text(e) {\n        if (\"undefined\" == typeof e) return this[0] ? this[0].textContent.trim() : null;for (var a = 0; a < this.length; a++) {\n          this[a].textContent = e;\n        }return this;\n      }, is: function is(t) {\n        if (!this[0]) return !1;var r, i;if (\"string\" == typeof t) {\n          var s = this[0];if (s === document) return t === document;if (s === window) return t === window;if (s.matches) return s.matches(t);if (s.webkitMatchesSelector) return s.webkitMatchesSelector(t);if (s.mozMatchesSelector) return s.mozMatchesSelector(t);if (s.msMatchesSelector) return s.msMatchesSelector(t);for (r = a(t), i = 0; i < r.length; i++) {\n            if (r[i] === this[0]) return !0;\n          }return !1;\n        }if (t === document) return this[0] === document;if (t === window) return this[0] === window;if (t.nodeType || t instanceof e) {\n          for (r = t.nodeType ? [t] : t, i = 0; i < r.length; i++) {\n            if (r[i] === this[0]) return !0;\n          }return !1;\n        }return !1;\n      }, index: function index() {\n        if (this[0]) {\n          for (var e = this[0], a = 0; null !== (e = e.previousSibling);) {\n            1 === e.nodeType && a++;\n          }return a;\n        }\n      }, eq: function eq(a) {\n        if (\"undefined\" == typeof a) return this;var t,\n            r = this.length;return a > r - 1 ? new e([]) : 0 > a ? (t = r + a, new e(0 > t ? [] : [this[t]])) : new e([this[a]]);\n      }, append: function append(a) {\n        var t, r;for (t = 0; t < this.length; t++) {\n          if (\"string\" == typeof a) {\n            var i = document.createElement(\"div\");for (i.innerHTML = a; i.firstChild;) {\n              this[t].appendChild(i.firstChild);\n            }\n          } else if (a instanceof e) for (r = 0; r < a.length; r++) {\n            this[t].appendChild(a[r]);\n          } else this[t].appendChild(a);\n        }return this;\n      }, prepend: function prepend(a) {\n        var t, r;for (t = 0; t < this.length; t++) {\n          if (\"string\" == typeof a) {\n            var i = document.createElement(\"div\");for (i.innerHTML = a, r = i.childNodes.length - 1; r >= 0; r--) {\n              this[t].insertBefore(i.childNodes[r], this[t].childNodes[0]);\n            }\n          } else if (a instanceof e) for (r = 0; r < a.length; r++) {\n            this[t].insertBefore(a[r], this[t].childNodes[0]);\n          } else this[t].insertBefore(a, this[t].childNodes[0]);\n        }return this;\n      }, insertBefore: function insertBefore(e) {\n        for (var t = a(e), r = 0; r < this.length; r++) {\n          if (1 === t.length) t[0].parentNode.insertBefore(this[r], t[0]);else if (t.length > 1) for (var i = 0; i < t.length; i++) {\n            t[i].parentNode.insertBefore(this[r].cloneNode(!0), t[i]);\n          }\n        }\n      }, insertAfter: function insertAfter(e) {\n        for (var t = a(e), r = 0; r < this.length; r++) {\n          if (1 === t.length) t[0].parentNode.insertBefore(this[r], t[0].nextSibling);else if (t.length > 1) for (var i = 0; i < t.length; i++) {\n            t[i].parentNode.insertBefore(this[r].cloneNode(!0), t[i].nextSibling);\n          }\n        }\n      }, next: function next(t) {\n        return new e(this.length > 0 ? t ? this[0].nextElementSibling && a(this[0].nextElementSibling).is(t) ? [this[0].nextElementSibling] : [] : this[0].nextElementSibling ? [this[0].nextElementSibling] : [] : []);\n      }, nextAll: function nextAll(t) {\n        var r = [],\n            i = this[0];if (!i) return new e([]);for (; i.nextElementSibling;) {\n          var s = i.nextElementSibling;t ? a(s).is(t) && r.push(s) : r.push(s), i = s;\n        }return new e(r);\n      }, prev: function prev(t) {\n        return new e(this.length > 0 ? t ? this[0].previousElementSibling && a(this[0].previousElementSibling).is(t) ? [this[0].previousElementSibling] : [] : this[0].previousElementSibling ? [this[0].previousElementSibling] : [] : []);\n      }, prevAll: function prevAll(t) {\n        var r = [],\n            i = this[0];if (!i) return new e([]);for (; i.previousElementSibling;) {\n          var s = i.previousElementSibling;t ? a(s).is(t) && r.push(s) : r.push(s), i = s;\n        }return new e(r);\n      }, parent: function parent(e) {\n        for (var t = [], r = 0; r < this.length; r++) {\n          e ? a(this[r].parentNode).is(e) && t.push(this[r].parentNode) : t.push(this[r].parentNode);\n        }return a(a.unique(t));\n      }, parents: function parents(e) {\n        for (var t = [], r = 0; r < this.length; r++) {\n          for (var i = this[r].parentNode; i;) {\n            e ? a(i).is(e) && t.push(i) : t.push(i), i = i.parentNode;\n          }\n        }return a(a.unique(t));\n      }, find: function find(a) {\n        for (var t = [], r = 0; r < this.length; r++) {\n          for (var i = this[r].querySelectorAll(a), s = 0; s < i.length; s++) {\n            t.push(i[s]);\n          }\n        }return new e(t);\n      }, children: function children(t) {\n        for (var r = [], i = 0; i < this.length; i++) {\n          for (var s = this[i].childNodes, n = 0; n < s.length; n++) {\n            t ? 1 === s[n].nodeType && a(s[n]).is(t) && r.push(s[n]) : 1 === s[n].nodeType && r.push(s[n]);\n          }\n        }return new e(a.unique(r));\n      }, remove: function remove() {\n        for (var e = 0; e < this.length; e++) {\n          this[e].parentNode && this[e].parentNode.removeChild(this[e]);\n        }return this;\n      }, add: function add() {\n        var e,\n            t,\n            r = this;for (e = 0; e < arguments.length; e++) {\n          var i = a(arguments[e]);for (t = 0; t < i.length; t++) {\n            r[r.length] = i[t], r.length++;\n          }\n        }return r;\n      } }, a.fn = e.prototype, a.unique = function (e) {\n      for (var a = [], t = 0; t < e.length; t++) {\n        -1 === a.indexOf(e[t]) && a.push(e[t]);\n      }return a;\n    }, a;\n  }(), i = [\"jQuery\", \"Zepto\", \"Dom7\"], s = 0; s < i.length; s++) {\n    window[i[s]] && e(window[i[s]]);\n  }var n;n = \"undefined\" == typeof r ? window.Dom7 || window.Zepto || window.jQuery : r, n && (\"transitionEnd\" in n.fn || (n.fn.transitionEnd = function (e) {\n    function a(s) {\n      if (s.target === this) for (e.call(this, s), t = 0; t < r.length; t++) {\n        i.off(r[t], a);\n      }\n    }var t,\n        r = [\"webkitTransitionEnd\", \"transitionend\", \"oTransitionEnd\", \"MSTransitionEnd\", \"msTransitionEnd\"],\n        i = this;if (e) for (t = 0; t < r.length; t++) {\n      i.on(r[t], a);\n    }return this;\n  }), \"transform\" in n.fn || (n.fn.transform = function (e) {\n    for (var a = 0; a < this.length; a++) {\n      var t = this[a].style;t.webkitTransform = t.MsTransform = t.msTransform = t.MozTransform = t.OTransform = t.transform = e;\n    }return this;\n  }), \"transition\" in n.fn || (n.fn.transition = function (e) {\n    \"string\" != typeof e && (e += \"ms\");for (var a = 0; a < this.length; a++) {\n      var t = this[a].style;t.webkitTransitionDuration = t.MsTransitionDuration = t.msTransitionDuration = t.MozTransitionDuration = t.OTransitionDuration = t.transitionDuration = e;\n    }return this;\n  })), window.Swiper = t;\n}(),  true ? module.exports = window.Swiper : \"function\" == typeof define && define.amd && define([], function () {\n  \"use strict\";\n  return window.Swiper;\n});\n//# sourceMappingURL=maps/swiper.min.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, resizeStore) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\tvar idName = 'share-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\n\t\telement.addEventListener('click', function (e) {\n\t\t\tvar wh = resizeStore.getData().height;\n\t\t\tvar ww = resizeStore.getData().width;\n\t\t\tvar top, left;\n\t\t\tvar width = 600;\n\t\t\tvar height = 400;\n\n\t\t\te.preventDefault();\n\n\t\t\ttop = (wh - height) / 2;\n\t\t\tleft = (ww - width) / 2;\n\n\t\t\twindow.open(element.href, 'Share', 'top=' + top + ',left=' + left + ',width=' + width + ',height=' + height + '');\n\t\t});\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\telements = document.getElementsByClassName('view-share');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL3NoYXJlL3NoYXJlLnZpZXcuanM/MTQwNSJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwicmVzaXplU3RvcmUiLCJpdGVtcyIsImlkTmFtZSIsImlkTnVtIiwiX2hhbmRsZUNoYW5nZSIsInN0b3JlRGF0YSIsInN0b3JlIiwiZ2V0RGF0YSIsIl9hZGQiLCJlbGVtZW50IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIndoIiwiaGVpZ2h0Iiwid3ciLCJ3aWR0aCIsInRvcCIsImxlZnQiLCJwcmV2ZW50RGVmYXVsdCIsIndpbmRvdyIsIm9wZW4iLCJocmVmIiwiX3JlbW92ZSIsIml0ZW0iLCJfaGFuZGxlTXV0YXRlIiwiZWxlbWVudHMiLCJjaGVjayIsImZvdW5kIiwiaGFzT3duUHJvcGVydHkiLCJiYWNrQ2hlY2siLCJpIiwibGVuZ3RoIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5pdCIsInN1YnNjcmliZSIsInR5cGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxFQUFrQixzQkFBbEIsQ0FBUCxrQ0FBb0QsVUFBU0EsVUFBVCxFQUFxQkMsV0FBckIsRUFBa0M7O0FBRXJGOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQSxLQUFJQyxTQUFTLFdBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7O0FBRUEsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXO0FBQzlCLE1BQUlDLFlBQVlDLE1BQU1DLE9BQU4sRUFBaEI7QUFDQSxFQUZEOztBQUlBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFTUCxLQUFULEVBQWdCUSxPQUFoQixFQUF5QjtBQUNuQyxNQUFJQyxLQUFLRCxRQUFRRSxZQUFSLENBQXFCLFNBQXJCLENBQVQ7O0FBRUEsTUFBSSxDQUFDRCxFQUFMLEVBQVM7QUFDUkEsUUFBS1IsU0FBU0MsS0FBZDtBQUNBQTtBQUNBOztBQUVERixRQUFNUyxFQUFOLElBQVk7QUFDWEEsT0FBSUEsRUFETztBQUVYRCxZQUFTQTtBQUZFLEdBQVo7O0FBS0FBLFVBQVFHLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLFVBQVNDLENBQVQsRUFBWTtBQUM3QyxPQUFJQyxLQUFLZCxZQUFZTyxPQUFaLEdBQXNCUSxNQUEvQjtBQUNBLE9BQUlDLEtBQUtoQixZQUFZTyxPQUFaLEdBQXNCVSxLQUEvQjtBQUNBLE9BQUlDLEdBQUosRUFBU0MsSUFBVDtBQUNBLE9BQUlGLFFBQVMsR0FBYjtBQUNBLE9BQUlGLFNBQVMsR0FBYjs7QUFFQUYsS0FBRU8sY0FBRjs7QUFFQUYsU0FBTyxDQUFDSixLQUFLQyxNQUFOLElBQWMsQ0FBckI7QUFDQUksVUFBTyxDQUFDSCxLQUFLQyxLQUFOLElBQWEsQ0FBcEI7O0FBRUFJLFVBQU9DLElBQVAsQ0FBWWIsUUFBUWMsSUFBcEIsRUFBeUIsT0FBekIsRUFBaUMsU0FBU0wsR0FBVCxHQUFlLFFBQWYsR0FBMEJDLElBQTFCLEdBQWlDLFNBQWpDLEdBQTZDRixLQUE3QyxHQUFxRCxVQUFyRCxHQUFrRUYsTUFBbEUsR0FBMkUsRUFBNUc7QUFDQSxHQWJEO0FBY0EsRUEzQkQ7O0FBNkJBLEtBQUlTLFVBQVUsU0FBVkEsT0FBVSxDQUFTdkIsS0FBVCxFQUFnQndCLElBQWhCLEVBQXNCO0FBQ25DLFNBQU94QixNQUFNd0IsS0FBS2YsRUFBWCxDQUFQO0FBQ0EsRUFGRDs7QUFJQSxLQUFJZ0IsZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXO0FBQzlCLE1BQUlDLFFBQUo7O0FBRUEsTUFBSUMsUUFBUSxTQUFSQSxLQUFRLENBQVMzQixLQUFULEVBQWdCUSxPQUFoQixFQUF5QjtBQUNwQyxPQUFJb0IsUUFBUSxLQUFaO0FBQ0EsUUFBSyxJQUFJbkIsRUFBVCxJQUFlVCxLQUFmLEVBQXNCO0FBQ3JCLFFBQUlBLE1BQU02QixjQUFOLENBQXFCcEIsRUFBckIsQ0FBSixFQUE4QjtBQUM3QixTQUFJVCxNQUFNUyxFQUFOLEVBQVVELE9BQVYsS0FBc0JBLE9BQTFCLEVBQW1DO0FBQ2xDb0IsY0FBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxPQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNYckIsU0FBS1AsS0FBTCxFQUFZUSxPQUFaO0FBQ0E7QUFDRCxHQWJEOztBQWVBLE1BQUlzQixZQUFZLFNBQVpBLFNBQVksQ0FBUzlCLEtBQVQsRUFBZ0IwQixRQUFoQixFQUEwQkYsSUFBMUIsRUFBZ0M7QUFDL0MsT0FBSWhCLFVBQVVnQixLQUFLaEIsT0FBbkI7QUFDQSxPQUFJb0IsUUFBVSxLQUFkOztBQUVBLFFBQUssSUFBSUcsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxTQUFTTSxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDekMsUUFBSUwsU0FBU0ssQ0FBVCxNQUFnQlAsS0FBS2hCLE9BQXpCLEVBQWtDO0FBQ2pDb0IsYUFBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEOztBQUVELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hMLFlBQVF2QixLQUFSLEVBQWV3QixJQUFmO0FBQ0E7QUFDRCxHQWREOztBQWlCQUUsYUFBV08sU0FBU0Msc0JBQVQsQ0FBZ0MsWUFBaEMsQ0FBWDtBQUNBLE9BQUssSUFBSUgsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxTQUFTTSxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDekNKLFNBQU0zQixLQUFOLEVBQWEwQixTQUFTSyxDQUFULENBQWI7QUFDQTtBQUNELE9BQUssSUFBSXRCLEVBQVQsSUFBZVQsS0FBZixFQUFzQjtBQUNyQixPQUFJQSxNQUFNNkIsY0FBTixDQUFxQnBCLEVBQXJCLENBQUosRUFBOEI7QUFDN0JxQixjQUFVOUIsS0FBVixFQUFpQjBCLFFBQWpCLEVBQTJCMUIsTUFBTVMsRUFBTixDQUEzQjtBQUNBO0FBQ0Q7QUFDRCxFQTVDRDs7QUE4Q0EsS0FBSTBCLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCVjs7QUFFQTNCLGFBQVdzQyxTQUFYLENBQXFCLFVBQVN4QixDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRXlCLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCWjtBQUNBO0FBQ0QsR0FKRDtBQUtBLEVBUkQ7O0FBVUEsUUFBTztBQUNOVSxRQUFNQTtBQURBLEVBQVA7QUFHQSxDQXpHRCIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi4vcmVzaXplL3Jlc2l6ZS5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCByZXNpemVTdG9yZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0dmFyIGlkTmFtZSA9ICdzaGFyZS1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXHR2YXIgX2hhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzdG9yZURhdGEgPSBzdG9yZS5nZXREYXRhKCk7XG5cdH1cblxuXHR2YXIgX2FkZCA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0dmFyIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcblxuXHRcdGlmICghaWQpIHtcblx0XHRcdGlkID0gaWROYW1lICsgaWROdW07XG5cdFx0XHRpZE51bSsrO1xuXHRcdH1cblxuXHRcdGl0ZW1zW2lkXSA9IHtcblx0XHRcdGlkOiBpZCxcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRcblx0XHR9XG5cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIHdoID0gcmVzaXplU3RvcmUuZ2V0RGF0YSgpLmhlaWdodDtcblx0XHRcdHZhciB3dyA9IHJlc2l6ZVN0b3JlLmdldERhdGEoKS53aWR0aDtcblx0XHRcdHZhciB0b3AsIGxlZnQ7XG5cdFx0XHR2YXIgd2lkdGggID0gNjAwO1xuXHRcdFx0dmFyIGhlaWdodCA9IDQwMDtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0b3AgID0gKHdoIC0gaGVpZ2h0KS8yO1xuXHRcdFx0bGVmdCA9ICh3dyAtIHdpZHRoKS8yO1xuXG5cdFx0XHR3aW5kb3cub3BlbihlbGVtZW50LmhyZWYsJ1NoYXJlJywndG9wPScgKyB0b3AgKyAnLGxlZnQ9JyArIGxlZnQgKyAnLHdpZHRoPScgKyB3aWR0aCArICcsaGVpZ2h0PScgKyBoZWlnaHQgKyAnJyk7XG5cdFx0fSk7XG5cdH1cblxuXHR2YXIgX3JlbW92ZSA9IGZ1bmN0aW9uKGl0ZW1zLCBpdGVtKSB7XG5cdFx0ZGVsZXRlIGl0ZW1zW2l0ZW0uaWRdO1xuXHR9XG5cblx0dmFyIF9oYW5kbGVNdXRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudHM7XG5cblx0XHR2YXIgY2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdFx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdFx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW1zW2lkXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG5cdFx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X2FkZChpdGVtcywgZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGJhY2tDaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50cywgaXRlbSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBpdGVtLmVsZW1lbnQ7XG5cdFx0XHR2YXIgZm91bmQgICA9IGZhbHNlO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50c1tpXSA9PT0gaXRlbS5lbGVtZW50KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X3JlbW92ZShpdGVtcywgaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0XHRlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3ZpZXctc2hhcmUnKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGVjayhpdGVtcywgZWxlbWVudHNbaV0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRiYWNrQ2hlY2soaXRlbXMsIGVsZW1lbnRzLCBpdGVtc1tpZF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZU11dGF0ZSgpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0XG5cdH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Zyb250ZW5kL2pzL21vZHVsZXMvc2hhcmUvc2hhcmUudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8), __webpack_require__(16)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store, breakpoint) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar point = \"\";\n\n\tvar _handlePoint = function _handlePoint() {\n\t\tpoint = breakpoint.getData().breakpoint.name;\n\t};\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t\tvar wrapper = document.getElementsByClassName('wrapper')[0];\n\t\tvar userText = document.getElementsByClassName('user-text')[0];\n\t\tif (wrapper && userText) {\n\t\t\tvar wrapperW = wrapper.offsetWidth;\n\t\t\tvar userTextW = userText.offsetWidth;\n\t\t\tvar delta = (wrapperW - userTextW) / 2;\n\t\t}\n\n\t\tfor (var key in items) {\n\t\t\tif (items[key].element.parentNode.classList.contains('none-standart')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (point === \"desktop\") {\n\t\t\t\titems[key].element.style.width = wrapperW + \"px\";\n\t\t\t\titems[key].element.style.marginLeft = \"-\" + delta + \"px\";\n\t\t\t} else if (point === \"tablet\" || point === 'mobile') {\n\t\t\t\titems[key].element.style.width = \"\";\n\t\t\t\titems[key].element.style.marginLeft = \"\";\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements = [];\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar userText = document.getElementsByClassName('user-text')[0];\n\t\tif (!userText) {\n\t\t\treturn;\n\t\t}\n\t\tvar left = userText.getElementsByClassName('block-left');\n\t\tvar right = userText.getElementsByClassName('block-right');\n\t\tfor (var m = 0; m < left.length; m++) {\n\t\t\telements.push(left[m]);\n\t\t}\n\t\tfor (var j = 0; j < right.length; j++) {\n\t\t\telements.push(right[j]);\n\t\t}\n\t\tfor (var u = 0; u < elements.length; u++) {\n\t\t\tcheck(items, elements[u]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handlePoint();\n\t\t_handleChange();\n\n\t\tbreakpoint.eventEmitter.subscribe(_handlePoint);\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(53)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar container;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\t\tvar active = store.getData().active;\n\n\t\tif (container) {\n\t\t\tcontainer.children[0].children[0].innerHTML = items[active].element.children[0].innerHTML;\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\telement.addEventListener('click', function () {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'country-toggle',\n\t\t\t\tid: id\n\t\t\t});\n\t\t\tvar map = document.getElementsByClassName(\"map-view\")[0];\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'scroll-to',\n\t\t\t\telement: map,\n\t\t\t\tspeed: 0.5\n\t\t\t});\n\t\t});\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tcontainer = document.getElementsByClassName('head-agcy')[0];\n\t\telements = document.getElementsByClassName('item-agcy');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL2NvdW50cnkudmlldy5qcz82ZjJiIl0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJzdG9yZSIsIml0ZW1zIiwiaWROYW1lIiwiaWROdW0iLCJjb250YWluZXIiLCJfaGFuZGxlQ2hhbmdlIiwic3RvcmVEYXRhIiwiZ2V0RGF0YSIsImFjdGl2ZSIsImNoaWxkcmVuIiwiaW5uZXJIVE1MIiwiZWxlbWVudCIsIl9hZGQiLCJpZCIsImdldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaCIsInR5cGUiLCJtYXAiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzcGVlZCIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImxlbmd0aCIsImluaXQiLCJldmVudEVtaXR0ZXIiLCJzdWJzY3JpYmUiLCJlIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsRUFBa0IsdUJBQWxCLENBQVAsa0NBQTZDLFVBQVNBLFVBQVQsRUFBcUJDLEtBQXJCLEVBQTRCOztBQUV4RTs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUE7QUFDQSxLQUFJQyxTQUFTLFNBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7QUFDQSxLQUFJQyxTQUFKOztBQUVBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJQyxZQUFZTixNQUFNTyxPQUFOLEVBQWhCO0FBQ0EsTUFBSUMsU0FBU1IsTUFBTU8sT0FBTixHQUFnQkMsTUFBN0I7O0FBRUEsTUFBSUosU0FBSixFQUFlO0FBQ2RBLGFBQVVLLFFBQVYsQ0FBbUIsQ0FBbkIsRUFBc0JBLFFBQXRCLENBQStCLENBQS9CLEVBQWtDQyxTQUFsQyxHQUE4Q1QsTUFBTU8sTUFBTixFQUFjRyxPQUFkLENBQXNCRixRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsU0FBaEY7QUFDQTtBQUNELEVBUEQ7O0FBU0EsS0FBSUUsT0FBTyxTQUFQQSxJQUFPLENBQVNYLEtBQVQsRUFBZ0JVLE9BQWhCLEVBQXlCO0FBQ25DLE1BQUlFLEtBQUtGLFFBQVFHLFlBQVIsQ0FBcUIsU0FBckIsQ0FBVDs7QUFFQSxNQUFJLENBQUNELEVBQUwsRUFBUztBQUNSQSxRQUFLWCxTQUFTQyxLQUFkO0FBQ0FBOztBQUVBO0FBQ0E7QUFDRFEsVUFBUUksZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0MsWUFBWTtBQUM3Q2hCLGNBQVdpQixRQUFYLENBQW9CO0FBQ25CQyxVQUFNLGdCQURhO0FBRW5CSixRQUFJQTtBQUZlLElBQXBCO0FBSUEsT0FBSUssTUFBTUMsU0FBU0Msc0JBQVQsQ0FBZ0MsVUFBaEMsRUFBNEMsQ0FBNUMsQ0FBVjtBQUNBckIsY0FBV2lCLFFBQVgsQ0FBb0I7QUFDbkJDLFVBQVMsV0FEVTtBQUVuQk4sYUFBU08sR0FGVTtBQUduQkcsV0FBUztBQUhVLElBQXBCO0FBTUEsR0FaRDtBQWFBcEIsUUFBTVksRUFBTixJQUFZO0FBQ1hBLE9BQUlBLEVBRE87QUFFWEYsWUFBU0E7QUFGRSxHQUFaO0FBSUEsRUExQkQ7O0FBNEJBLEtBQUlXLFVBQVUsU0FBVkEsT0FBVSxDQUFTckIsS0FBVCxFQUFnQnNCLElBQWhCLEVBQXNCO0FBQ25DLFNBQU90QixNQUFNc0IsS0FBS1YsRUFBWCxDQUFQO0FBQ0EsRUFGRDs7QUFJQSxLQUFJVyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDOUIsTUFBSUMsUUFBSjs7QUFFQSxNQUFJQyxRQUFRLFNBQVJBLEtBQVEsQ0FBU3pCLEtBQVQsRUFBZ0JVLE9BQWhCLEVBQXlCO0FBQ3BDLE9BQUlnQixRQUFRLEtBQVo7QUFDQSxRQUFLLElBQUlkLEVBQVQsSUFBZVosS0FBZixFQUFzQjtBQUNyQixRQUFJQSxNQUFNMkIsY0FBTixDQUFxQmYsRUFBckIsQ0FBSixFQUE4QjtBQUM3QixTQUFJWixNQUFNWSxFQUFOLEVBQVVGLE9BQVYsS0FBc0JBLE9BQTFCLEVBQW1DO0FBQ2xDZ0IsY0FBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEO0FBQ0Q7QUFDRCxPQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNYZixTQUFLWCxLQUFMLEVBQVlVLE9BQVo7QUFDQTtBQUNELEdBYkQ7O0FBZUEsTUFBSWtCLFlBQVksU0FBWkEsU0FBWSxDQUFTNUIsS0FBVCxFQUFnQndCLFFBQWhCLEVBQTBCRixJQUExQixFQUFnQztBQUMvQyxPQUFJWixVQUFVWSxLQUFLWixPQUFuQjtBQUNBLE9BQUlnQixRQUFVLEtBQWQ7O0FBRUEsUUFBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN6QyxRQUFJTCxTQUFTSyxDQUFULE1BQWdCUCxLQUFLWixPQUF6QixFQUFrQztBQUNqQ2dCLGFBQVEsSUFBUjtBQUNBO0FBQ0E7QUFDRDs7QUFFRCxPQUFJLENBQUNBLEtBQUwsRUFBWTtBQUNYTCxZQUFRckIsS0FBUixFQUFlc0IsSUFBZjtBQUNBO0FBQ0QsR0FkRDs7QUFnQkE7QUFDQW5CLGNBQVllLFNBQVNDLHNCQUFULENBQWdDLFdBQWhDLEVBQTZDLENBQTdDLENBQVo7QUFDQUssYUFBV04sU0FBU0Msc0JBQVQsQ0FBZ0MsV0FBaEMsQ0FBWDtBQUNBLE9BQUssSUFBSVUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxTQUFTTSxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDekNKLFNBQU16QixLQUFOLEVBQWF3QixTQUFTSyxDQUFULENBQWI7QUFDQTtBQUNELE9BQUssSUFBSWpCLEVBQVQsSUFBZVosS0FBZixFQUFzQjtBQUNyQixPQUFJQSxNQUFNMkIsY0FBTixDQUFxQmYsRUFBckIsQ0FBSixFQUE4QjtBQUM3QmdCLGNBQVU1QixLQUFWLEVBQWlCd0IsUUFBakIsRUFBMkJ4QixNQUFNWSxFQUFOLENBQTNCO0FBQ0E7QUFDRDtBQUNEO0FBQ0EsRUE5Q0Q7O0FBZ0RBLEtBQUltQixPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNyQlI7QUFDQW5COztBQUVBTCxRQUFNaUMsWUFBTixDQUFtQkMsU0FBbkIsQ0FBNkI3QixhQUE3Qjs7QUFFQU4sYUFBV21DLFNBQVgsQ0FBcUIsVUFBU0MsQ0FBVCxFQUFZO0FBQ2hDLE9BQUlBLEVBQUVsQixJQUFGLEtBQVcsUUFBZixFQUF5QjtBQUN4Qk87QUFDQW5CO0FBQ0E7QUFDRCxHQUxEO0FBTUEsRUFaRDs7QUFjQSxRQUFPO0FBQ04yQixRQUFNQTtBQURBLEVBQVA7QUFHQSxDQXJIRCIsImZpbGUiOiI1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInLCAnLi9jb3VudHJ5LnN0b3JlJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIsIHN0b3JlKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGl0ZW1zID0ge31cblxuXHQvLyEhIXJlcGxhY2UgaWYgc2V0dGluZyBkYXRhLWF0dHJpYnV0ZSFcblx0dmFyIGlkTmFtZSA9ICduZXctaWQtJztcblx0dmFyIGlkTnVtICA9IDE7XG5cdHZhciBjb250YWluZXI7XG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RvcmVEYXRhID0gc3RvcmUuZ2V0RGF0YSgpO1xuXHRcdHZhciBhY3RpdmUgPSBzdG9yZS5nZXREYXRhKCkuYWN0aXZlO1xuIFxuXHRcdGlmIChjb250YWluZXIpIHtcblx0XHRcdGNvbnRhaW5lci5jaGlsZHJlblswXS5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBpdGVtc1thY3RpdmVdLmVsZW1lbnQuY2hpbGRyZW5bMF0uaW5uZXJIVE1MO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfYWRkID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHR2YXIgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuXG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0aWQgPSBpZE5hbWUgKyBpZE51bTtcblx0XHRcdGlkTnVtKys7XG5cblx0XHRcdC8vc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWQpO1xuXHRcdH1cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjb3VudHJ5LXRvZ2dsZScsXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgbWFwID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm1hcC12aWV3XCIpWzBdO1xuXHRcdFx0ZGlzcGF0Y2hlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICAgICdzY3JvbGwtdG8nLFxuXHRcdFx0XHRlbGVtZW50OiBtYXAsXG5cdFx0XHRcdHNwZWVkOiAgIDAuNVxuXHRcdFx0fSk7XG5cblx0XHR9KVxuXHRcdGl0ZW1zW2lkXSA9IHtcblx0XHRcdGlkOiBpZCxcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRcblx0XHR9XG5cdH1cblxuXHR2YXIgX3JlbW92ZSA9IGZ1bmN0aW9uKGl0ZW1zLCBpdGVtKSB7XG5cdFx0ZGVsZXRlIGl0ZW1zW2l0ZW0uaWRdO1xuXHR9XG5cblx0dmFyIF9oYW5kbGVNdXRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudHM7XG5cblx0XHR2YXIgY2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdFx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdFx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW1zW2lkXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG5cdFx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X2FkZChpdGVtcywgZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGJhY2tDaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50cywgaXRlbSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBpdGVtLmVsZW1lbnQ7XG5cdFx0XHR2YXIgZm91bmQgICA9IGZhbHNlO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50c1tpXSA9PT0gaXRlbS5lbGVtZW50KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X3JlbW92ZShpdGVtcywgaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8tLS0tLS0tXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaGVhZC1hZ2N5JylbMF07XG5cdFx0ZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpdGVtLWFnY3knKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGVjayhpdGVtcywgZWxlbWVudHNbaV0pO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRiYWNrQ2hlY2soaXRlbXMsIGVsZW1lbnRzLCBpdGVtc1tpZF0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLy0tLS0tLS1cblx0fVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdF9oYW5kbGVDaGFuZ2UoKTtcblxuXHRcdHN0b3JlLmV2ZW50RW1pdHRlci5zdWJzY3JpYmUoX2hhbmRsZUNoYW5nZSk7XG5cblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS50eXBlID09PSAnbXV0YXRlJykge1xuXHRcdFx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0XHRcdF9oYW5kbGVDaGFuZ2UoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL2NvdW50cnkudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar initialized = false;\n\tvar active = \"id-1\";\n\n\tvar _handleEvent = function _handleEvent(e) {\n\t\tif (e.type === \"country-toggle\") {\n\t\t\tif (e.id === active) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactive = e.id;\n\n\t\t\teventEmitter.dispatch({\n\t\t\t\ttype: 'change'\n\t\t\t});\n\t\t}\n\t};\n\n\tvar _init = function _init() {\n\t\tdispatcher.subscribe(_handleEvent);\n\t};\n\n\tvar eventEmitter = function () {\n\t\tvar _handlers = [];\n\n\t\tvar dispatch = function dispatch(event) {\n\t\t\tfor (var i = _handlers.length - 1; i >= 0; i--) {\n\t\t\t\t_handlers[i](event);\n\t\t\t}\n\t\t};\n\t\tvar subscribe = function subscribe(handler) {\n\t\t\t_handlers.push(handler);\n\t\t};\n\t\tvar unsubscribe = function unsubscribe(handler) {\n\t\t\tfor (var i = 0; i <= _handlers.length - 1; i++) {\n\t\t\t\tif (_handlers[i] == handler) {\n\t\t\t\t\t_handlers.splice(i--, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tdispatch: dispatch,\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}();\n\n\tvar getData = function getData() {\n\t\treturn {\n\t\t\tactive: active\n\t\t};\n\t};\n\n\tif (!initialized) {\n\t\tinitialized = true;\n\t\t_init();\n\t}\n\n\treturn {\n\t\teventEmitter: eventEmitter,\n\t\tgetData: getData\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL2NvdW50cnkuc3RvcmUuanM/NmU4NyJdLCJuYW1lcyI6WyJkaXNwYXRjaGVyIiwiaW5pdGlhbGl6ZWQiLCJhY3RpdmUiLCJfaGFuZGxlRXZlbnQiLCJlIiwidHlwZSIsImlkIiwiZXZlbnRFbWl0dGVyIiwiZGlzcGF0Y2giLCJfaW5pdCIsInN1YnNjcmliZSIsIl9oYW5kbGVycyIsImV2ZW50IiwiaSIsImxlbmd0aCIsImhhbmRsZXIiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJnZXREYXRhIl0sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFPLENBQUMsc0JBQUQsQ0FBUCxrQ0FBMEIsVUFBU0EsVUFBVCxFQUFxQjs7QUFFOUM7O0FBRUEsS0FBSUMsY0FBYyxLQUFsQjtBQUNBLEtBQUlDLFNBQVMsTUFBYjs7QUFFQSxLQUFJQyxlQUFlLFNBQWZBLFlBQWUsQ0FBU0MsQ0FBVCxFQUFZO0FBQzlCLE1BQUlBLEVBQUVDLElBQUYsS0FBVyxnQkFBZixFQUFpQztBQUNoQyxPQUFJRCxFQUFFRSxFQUFGLEtBQVNKLE1BQWIsRUFBcUI7QUFDcEI7QUFDQTtBQUNEQSxZQUFTRSxFQUFFRSxFQUFYOztBQUVBQyxnQkFBYUMsUUFBYixDQUFzQjtBQUNyQkgsVUFBTTtBQURlLElBQXRCO0FBR0E7QUFDRCxFQVhEOztBQWFBLEtBQUlJLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCVCxhQUFXVSxTQUFYLENBQXFCUCxZQUFyQjtBQUNBLEVBRkQ7O0FBSUEsS0FBSUksZUFBZSxZQUFXO0FBQzdCLE1BQUlJLFlBQVksRUFBaEI7O0FBRUEsTUFBSUgsV0FBVyxTQUFYQSxRQUFXLENBQVNJLEtBQVQsRUFBZ0I7QUFDOUIsUUFBSyxJQUFJQyxJQUFJRixVQUFVRyxNQUFWLEdBQW1CLENBQWhDLEVBQW1DRCxLQUFLLENBQXhDLEVBQTJDQSxHQUEzQyxFQUFnRDtBQUMvQ0YsY0FBVUUsQ0FBVixFQUFhRCxLQUFiO0FBQ0E7QUFDRCxHQUpEO0FBS0EsTUFBSUYsWUFBWSxTQUFaQSxTQUFZLENBQVNLLE9BQVQsRUFBa0I7QUFDakNKLGFBQVVLLElBQVYsQ0FBZUQsT0FBZjtBQUNBLEdBRkQ7QUFHQSxNQUFJRSxjQUFjLFNBQWRBLFdBQWMsQ0FBU0YsT0FBVCxFQUFrQjtBQUNuQyxRQUFLLElBQUlGLElBQUksQ0FBYixFQUFnQkEsS0FBS0YsVUFBVUcsTUFBVixHQUFtQixDQUF4QyxFQUEyQ0QsR0FBM0MsRUFBZ0Q7QUFDL0MsUUFBSUYsVUFBVUUsQ0FBVixLQUFnQkUsT0FBcEIsRUFBNkI7QUFDNUJKLGVBQVVPLE1BQVYsQ0FBaUJMLEdBQWpCLEVBQXNCLENBQXRCO0FBQ0E7QUFDRDtBQUNELEdBTkQ7O0FBUUEsU0FBTztBQUNOTCxhQUFVQSxRQURKO0FBRU5FLGNBQVdBLFNBRkw7QUFHTk8sZ0JBQWFBO0FBSFAsR0FBUDtBQUtBLEVBeEJrQixFQUFuQjs7QUEwQkEsS0FBSUUsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDeEIsU0FBTztBQUNOakIsV0FBUUE7QUFERixHQUFQO0FBR0EsRUFKRDs7QUFNQSxLQUFJLENBQUNELFdBQUwsRUFBa0I7QUFDakJBLGdCQUFjLElBQWQ7QUFDQVE7QUFDQTs7QUFFRCxRQUFPO0FBQ05GLGdCQUFjQSxZQURSO0FBRU5ZLFdBQVNBO0FBRkgsRUFBUDtBQUlBLENBakVEIiwiZmlsZSI6IjUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlciddLCBmdW5jdGlvbihkaXNwYXRjaGVyKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIGluaXRpYWxpemVkID0gZmFsc2U7XG5cdHZhciBhY3RpdmUgPSBcImlkLTFcIjtcblxuXHR2YXIgX2hhbmRsZUV2ZW50ID0gZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnR5cGUgPT09IFwiY291bnRyeS10b2dnbGVcIikge1xuXHRcdFx0aWYgKGUuaWQgPT09IGFjdGl2ZSkge1xuXHRcdFx0XHRyZXR1cm5cblx0XHRcdH1cblx0XHRcdGFjdGl2ZSA9IGUuaWQ7XG5cblx0XHRcdGV2ZW50RW1pdHRlci5kaXNwYXRjaCh7XG5cdFx0XHRcdHR5cGU6ICdjaGFuZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcblx0XHRkaXNwYXRjaGVyLnN1YnNjcmliZShfaGFuZGxlRXZlbnQpO1xuXHR9XG5cblx0dmFyIGV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBfaGFuZGxlcnMgPSBbXTtcblxuXHRcdHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRmb3IgKHZhciBpID0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdF9oYW5kbGVyc1tpXShldmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBzdWJzY3JpYmUgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG5cdFx0XHRfaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcblx0XHR9XG5cdFx0dmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gX2hhbmRsZXJzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0XHRpZiAoX2hhbmRsZXJzW2ldID09IGhhbmRsZXIpIHtcblx0XHRcdFx0XHRfaGFuZGxlcnMuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZGlzcGF0Y2g6IGRpc3BhdGNoLFxuXHRcdFx0c3Vic2NyaWJlOiBzdWJzY3JpYmUsXG5cdFx0XHR1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcblx0XHR9XG5cdH0oKTtcblxuXHR2YXIgZ2V0RGF0YSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhY3RpdmU6IGFjdGl2ZVxuXHRcdH1cblx0fVxuXG5cdGlmICghaW5pdGlhbGl6ZWQpIHtcblx0XHRpbml0aWFsaXplZCA9IHRydWU7XG5cdFx0X2luaXQoKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZXZlbnRFbWl0dGVyOiBldmVudEVtaXR0ZXIsXG5cdFx0Z2V0RGF0YTogZ2V0RGF0YVxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL2NvdW50cnkuc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar active = 'id-1';\n\n\tvar _handleChange = function _handleChange(e) {\n\t\te.preventDefault();\n\t\tvar id = e.currentTarget.getAttribute('data-id');\n\t\tif (id === active) {\n\t\t\treturn;\n\t\t};\n\t\tif (!items[active]) {\n\t\t\treturn;\n\t\t}\n\t\titems[active].element.style.display = 'none';\n\t\titems[active].element.classList.remove('active');\n\n\t\tactive = id;\n\n\t\titems[id].element.style.display = 'block';\n\t\tsetTimeout(function () {\n\t\t\titems[id].element.classList.add('active');\n\t\t}, 1000 / 60);\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\tif (element.classList.contains(\"tab\")) {\n\t\t\telement.addEventListener('click', _handleChange);\n\t\t} else {\n\t\t\titems[id] = {\n\t\t\t\tid: id,\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements = [];\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar tabBut = document.getElementsByClassName('tab');\n\t\tvar tubCont = document.getElementsByClassName('tab-content');\n\t\tfor (var j = 0; j < tabBut.length; j++) {\n\t\t\telements.push(tabBut[j]);\n\t\t}\n\t\tfor (var s = 0; s < tubCont.length; s++) {\n\t\t\telements.push(tubCont[s]);\n\t\t}\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange(e) {\n\t\tconsole.log(e.currentTarget);\n\t\te.currentTarget.classList.toggle(\"active\");\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\telement.addEventListener(\"click\", _handleChange);\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\tvar container = document.getElementsByClassName(\"qa\")[0];\n\t\tif (!container) {\n\t\t\treturn;\n\t\t}\n\t\telements = container.getElementsByClassName('item');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL3VuY292ZXIudmlldy5qcz84YWQ2Il0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpdGVtcyIsImlkTmFtZSIsImlkTnVtIiwiX2hhbmRsZUNoYW5nZSIsImUiLCJjb25zb2xlIiwibG9nIiwiY3VycmVudFRhcmdldCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIl9hZGQiLCJlbGVtZW50IiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiX3JlbW92ZSIsIml0ZW0iLCJfaGFuZGxlTXV0YXRlIiwiZWxlbWVudHMiLCJjaGVjayIsImZvdW5kIiwiaGFzT3duUHJvcGVydHkiLCJiYWNrQ2hlY2siLCJpIiwibGVuZ3RoIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiaW5pdCIsInN1YnNjcmliZSIsInR5cGUiXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQU8sQ0FBQyxzQkFBRCxDQUFQLGtDQUEwQixVQUFTQSxVQUFULEVBQXFCOztBQUU5Qzs7QUFFQSxLQUFJQyxRQUFRLEVBQVo7O0FBRUE7QUFDQSxLQUFJQyxTQUFTLFNBQWI7QUFDQSxLQUFJQyxRQUFTLENBQWI7O0FBR0EsS0FBSUMsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFTQyxDQUFULEVBQVk7QUFDL0JDLFVBQVFDLEdBQVIsQ0FBWUYsRUFBRUcsYUFBZDtBQUNBSCxJQUFFRyxhQUFGLENBQWdCQyxTQUFoQixDQUEwQkMsTUFBMUIsQ0FBaUMsUUFBakM7QUFDQSxFQUhEOztBQUtBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFTVixLQUFULEVBQWdCVyxPQUFoQixFQUF5QjtBQUNuQyxNQUFJQyxLQUFLRCxRQUFRRSxZQUFSLENBQXFCLFNBQXJCLENBQVQ7O0FBRUEsTUFBSSxDQUFDRCxFQUFMLEVBQVM7QUFDUkEsUUFBS1gsU0FBU0MsS0FBZDtBQUNBQTs7QUFFQTtBQUNBO0FBQ0RTLFVBQVFHLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDWCxhQUFsQzs7QUFFQUgsUUFBTVksRUFBTixJQUFZO0FBQ1hBLE9BQUlBLEVBRE87QUFFWEQsWUFBU0E7QUFGRSxHQUFaO0FBSUEsRUFmRDs7QUFpQkEsS0FBSUksVUFBVSxTQUFWQSxPQUFVLENBQVNmLEtBQVQsRUFBZ0JnQixJQUFoQixFQUFzQjtBQUNuQyxTQUFPaEIsTUFBTWdCLEtBQUtKLEVBQVgsQ0FBUDtBQUNBLEVBRkQ7O0FBSUEsS0FBSUssZ0JBQWdCLFNBQWhCQSxhQUFnQixHQUFXO0FBQzlCLE1BQUlDLFFBQUo7O0FBRUEsTUFBSUMsUUFBUSxTQUFSQSxLQUFRLENBQVNuQixLQUFULEVBQWdCVyxPQUFoQixFQUF5QjtBQUNwQyxPQUFJUyxRQUFRLEtBQVo7QUFDQSxRQUFLLElBQUlSLEVBQVQsSUFBZVosS0FBZixFQUFzQjtBQUNyQixRQUFJQSxNQUFNcUIsY0FBTixDQUFxQlQsRUFBckIsQ0FBSixFQUE4QjtBQUM3QixTQUFJWixNQUFNWSxFQUFOLEVBQVVELE9BQVYsS0FBc0JBLE9BQTFCLEVBQW1DO0FBQ2xDUyxjQUFRLElBQVI7QUFDQTtBQUNBO0FBQ0Q7QUFDRDtBQUNELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hWLFNBQUtWLEtBQUwsRUFBWVcsT0FBWjtBQUNBO0FBQ0QsR0FiRDs7QUFlQSxNQUFJVyxZQUFZLFNBQVpBLFNBQVksQ0FBU3RCLEtBQVQsRUFBZ0JrQixRQUFoQixFQUEwQkYsSUFBMUIsRUFBZ0M7QUFDL0MsT0FBSUwsVUFBVUssS0FBS0wsT0FBbkI7QUFDQSxPQUFJUyxRQUFVLEtBQWQ7O0FBRUEsUUFBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlMLFNBQVNNLE1BQTdCLEVBQXFDRCxHQUFyQyxFQUEwQztBQUN6QyxRQUFJTCxTQUFTSyxDQUFULE1BQWdCUCxLQUFLTCxPQUF6QixFQUFrQztBQUNqQ1MsYUFBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEOztBQUVELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hMLFlBQVFmLEtBQVIsRUFBZWdCLElBQWY7QUFDQTtBQUNELEdBZEQ7O0FBZ0JBO0FBQ0EsTUFBSVMsWUFBWUMsU0FBU0Msc0JBQVQsQ0FBZ0MsSUFBaEMsRUFBc0MsQ0FBdEMsQ0FBaEI7QUFDQSxNQUFJLENBQUNGLFNBQUwsRUFBZ0I7QUFDZjtBQUNBO0FBQ0RQLGFBQVdPLFVBQVVFLHNCQUFWLENBQWlDLE1BQWpDLENBQVg7QUFDQSxPQUFLLElBQUlKLElBQUksQ0FBYixFQUFnQkEsSUFBSUwsU0FBU00sTUFBN0IsRUFBcUNELEdBQXJDLEVBQTBDO0FBQ3pDSixTQUFNbkIsS0FBTixFQUFha0IsU0FBU0ssQ0FBVCxDQUFiO0FBQ0E7QUFDRCxPQUFLLElBQUlYLEVBQVQsSUFBZVosS0FBZixFQUFzQjtBQUNyQixPQUFJQSxNQUFNcUIsY0FBTixDQUFxQlQsRUFBckIsQ0FBSixFQUE4QjtBQUM3QlUsY0FBVXRCLEtBQVYsRUFBaUJrQixRQUFqQixFQUEyQmxCLE1BQU1ZLEVBQU4sQ0FBM0I7QUFDQTtBQUNEO0FBQ0Q7QUFDQSxFQWpERDs7QUFtREEsS0FBSWdCLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ3JCWDs7QUFFQWxCLGFBQVc4QixTQUFYLENBQXFCLFVBQVN6QixDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRTBCLElBQUYsS0FBVyxRQUFmLEVBQXlCO0FBQ3hCYjtBQUNBO0FBQ0QsR0FKRDtBQUtBLEVBUkQ7O0FBVUEsUUFBTztBQUNOVyxRQUFNQTtBQURBLEVBQVA7QUFHQSxDQXJHRCIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uL2Rpc3BhdGNoZXInXSwgZnVuY3Rpb24oZGlzcGF0Y2hlcikge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0Ly8hISFyZXBsYWNlIGlmIHNldHRpbmcgZGF0YS1hdHRyaWJ1dGUhXG5cdHZhciBpZE5hbWUgPSAnbmV3LWlkLSc7XG5cdHZhciBpZE51bSAgPSAxO1xuXG5cblx0dmFyIF9oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG5cdFx0Y29uc29sZS5sb2coZS5jdXJyZW50VGFyZ2V0KVxuXHRcdGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpO1xuXHR9XG5cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIF9oYW5kbGVDaGFuZ2UpXG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRlbGVtZW50OiBlbGVtZW50XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fVxuXG5cdHZhciBfaGFuZGxlTXV0YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzO1xuXG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdGlmIChpdGVtc1tpZF0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9hZGQoaXRlbXMsIGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBiYWNrQ2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudHMsIGl0ZW0pIHtcblx0XHRcdHZhciBlbGVtZW50ID0gaXRlbS5lbGVtZW50O1xuXHRcdFx0dmFyIGZvdW5kICAgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHNbaV0gPT09IGl0ZW0uZWxlbWVudCkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9yZW1vdmUoaXRlbXMsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vLS0tLS0tLVxuXHRcdHZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicWFcIilbMF07XG5cdFx0aWYgKCFjb250YWluZXIpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblx0XHRlbGVtZW50cyA9IGNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdpdGVtJyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdtdXRhdGUnKSB7XG5cdFx0XHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL3VuY292ZXIudmlldy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tfor (var key in items) {\n\t\t\tvar textEl = items[key].element.children;\n\t\t\tfor (var i = 0; i < textEl.length; i++) {\n\t\t\t\tif (textEl[i].parentElement.classList.contains(\"user-text\")) {\n\t\t\t\t\ttextEl[i].classList.add(\"scroll-block\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('user-text');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2RlY29yL2FkZC1jbGFzcy1zY3JvbGwudmlldy5qcz9iNTQ3Il0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJpdGVtcyIsImlkTmFtZSIsImlkTnVtIiwiX2hhbmRsZUNoYW5nZSIsImtleSIsInRleHRFbCIsImVsZW1lbnQiLCJjaGlsZHJlbiIsImkiLCJsZW5ndGgiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiLCJfYWRkIiwiaWQiLCJnZXRBdHRyaWJ1dGUiLCJfcmVtb3ZlIiwiaXRlbSIsIl9oYW5kbGVNdXRhdGUiLCJlbGVtZW50cyIsImNoZWNrIiwiZm91bmQiLCJoYXNPd25Qcm9wZXJ0eSIsImJhY2tDaGVjayIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImluaXQiLCJzdWJzY3JpYmUiLCJlIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQTtBQUNBLEtBQUlDLFNBQVMsU0FBYjtBQUNBLEtBQUlDLFFBQVMsQ0FBYjs7QUFHQSxLQUFJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDOUIsT0FBSyxJQUFJQyxHQUFULElBQWdCSixLQUFoQixFQUF1QjtBQUN0QixPQUFJSyxTQUFTTCxNQUFNSSxHQUFOLEVBQVdFLE9BQVgsQ0FBbUJDLFFBQWhDO0FBQ0EsUUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILE9BQU9JLE1BQTNCLEVBQW1DRCxHQUFuQyxFQUF3QztBQUN2QyxRQUFJSCxPQUFPRyxDQUFQLEVBQVVFLGFBQVYsQ0FBd0JDLFNBQXhCLENBQWtDQyxRQUFsQyxDQUEyQyxXQUEzQyxDQUFKLEVBQTZEO0FBQzVEUCxZQUFPRyxDQUFQLEVBQVVHLFNBQVYsQ0FBb0JFLEdBQXBCLENBQXdCLGNBQXhCO0FBQ0E7QUFDRDtBQUNEO0FBQ0QsRUFURDs7QUFXQSxLQUFJQyxPQUFPLFNBQVBBLElBQU8sQ0FBU2QsS0FBVCxFQUFnQk0sT0FBaEIsRUFBeUI7QUFDbkMsTUFBSVMsS0FBS1QsUUFBUVUsWUFBUixDQUFxQixTQUFyQixDQUFUOztBQUVBLE1BQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1JBLFFBQUtkLFNBQVNDLEtBQWQ7QUFDQUE7O0FBRUE7QUFDQTs7QUFFREYsUUFBTWUsRUFBTixJQUFZO0FBQ1hBLE9BQUlBLEVBRE87QUFFWFQsWUFBU0E7QUFGRSxHQUFaO0FBSUEsRUFkRDs7QUFnQkEsS0FBSVcsVUFBVSxTQUFWQSxPQUFVLENBQVNqQixLQUFULEVBQWdCa0IsSUFBaEIsRUFBc0I7QUFDbkMsU0FBT2xCLE1BQU1rQixLQUFLSCxFQUFYLENBQVA7QUFDQSxFQUZEOztBQUlBLEtBQUlJLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJQyxRQUFKOztBQUVBLE1BQUlDLFFBQVEsU0FBUkEsS0FBUSxDQUFTckIsS0FBVCxFQUFnQk0sT0FBaEIsRUFBeUI7QUFDcEMsT0FBSWdCLFFBQVEsS0FBWjtBQUNBLFFBQUssSUFBSVAsRUFBVCxJQUFlZixLQUFmLEVBQXNCO0FBQ3JCLFFBQUlBLE1BQU11QixjQUFOLENBQXFCUixFQUFyQixDQUFKLEVBQThCO0FBQzdCLFNBQUlmLE1BQU1lLEVBQU4sRUFBVVQsT0FBVixLQUFzQkEsT0FBMUIsRUFBbUM7QUFDbENnQixjQUFRLElBQVI7QUFDQTtBQUNBO0FBQ0Q7QUFDRDtBQUNELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hSLFNBQUtkLEtBQUwsRUFBWU0sT0FBWjtBQUNBO0FBQ0QsR0FiRDs7QUFlQSxNQUFJa0IsWUFBWSxTQUFaQSxTQUFZLENBQVN4QixLQUFULEVBQWdCb0IsUUFBaEIsRUFBMEJGLElBQTFCLEVBQWdDO0FBQy9DLE9BQUlaLFVBQVVZLEtBQUtaLE9BQW5CO0FBQ0EsT0FBSWdCLFFBQVUsS0FBZDs7QUFFQSxRQUFLLElBQUlkLElBQUksQ0FBYixFQUFnQkEsSUFBSVksU0FBU1gsTUFBN0IsRUFBcUNELEdBQXJDLEVBQTBDO0FBQ3pDLFFBQUlZLFNBQVNaLENBQVQsTUFBZ0JVLEtBQUtaLE9BQXpCLEVBQWtDO0FBQ2pDZ0IsYUFBUSxJQUFSO0FBQ0E7QUFDQTtBQUNEOztBQUVELE9BQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1hMLFlBQVFqQixLQUFSLEVBQWVrQixJQUFmO0FBQ0E7QUFDRCxHQWREOztBQWdCQTtBQUNBRSxhQUFXSyxTQUFTQyxzQkFBVCxDQUFnQyxXQUFoQyxDQUFYO0FBQ0EsT0FBSyxJQUFJbEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJWSxTQUFTWCxNQUE3QixFQUFxQ0QsR0FBckMsRUFBMEM7QUFDekNhLFNBQU1yQixLQUFOLEVBQWFvQixTQUFTWixDQUFULENBQWI7QUFDQTtBQUNELE9BQUssSUFBSU8sRUFBVCxJQUFlZixLQUFmLEVBQXNCO0FBQ3JCLE9BQUlBLE1BQU11QixjQUFOLENBQXFCUixFQUFyQixDQUFKLEVBQThCO0FBQzdCUyxjQUFVeEIsS0FBVixFQUFpQm9CLFFBQWpCLEVBQTJCcEIsTUFBTWUsRUFBTixDQUEzQjtBQUNBO0FBQ0Q7QUFDRDtBQUNBLEVBN0NEOztBQStDQSxLQUFJWSxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNyQlI7QUFDQWhCOztBQUVBSixhQUFXNkIsU0FBWCxDQUFxQixVQUFTQyxDQUFULEVBQVk7QUFDaEMsT0FBSUEsRUFBRUMsSUFBRixLQUFXLFFBQWYsRUFBeUI7QUFDeEJYO0FBQ0FoQjtBQUNBO0FBQ0QsR0FMRDtBQU1BLEVBVkQ7O0FBWUEsUUFBTztBQUNOd0IsUUFBTUE7QUFEQSxFQUFQO0FBR0EsQ0F4R0QiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi9kaXNwYXRjaGVyJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdC8vISEhcmVwbGFjZSBpZiBzZXR0aW5nIGRhdGEtYXR0cmlidXRlIVxuXHR2YXIgaWROYW1lID0gJ25ldy1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICh2YXIga2V5IGluIGl0ZW1zKSB7XG5cdFx0XHR2YXIgdGV4dEVsID0gaXRlbXNba2V5XS5lbGVtZW50LmNoaWxkcmVuO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0RWwubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHRleHRFbFtpXS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInVzZXItdGV4dFwiKSkge1xuXHRcdFx0XHRcdHRleHRFbFtpXS5jbGFzc0xpc3QuYWRkKFwic2Nyb2xsLWJsb2NrXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9hZGQgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdHZhciBpZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XG5cblx0XHRpZiAoIWlkKSB7XG5cdFx0XHRpZCA9IGlkTmFtZSArIGlkTnVtO1xuXHRcdFx0aWROdW0rKztcblxuXHRcdFx0Ly9zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCBpZCk7XG5cdFx0fVxuXG5cdFx0aXRlbXNbaWRdID0ge1xuXHRcdFx0aWQ6IGlkLFxuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdH1cblx0fVxuXG5cdHZhciBfcmVtb3ZlID0gZnVuY3Rpb24oaXRlbXMsIGl0ZW0pIHtcblx0XHRkZWxldGUgaXRlbXNbaXRlbS5pZF07XG5cdH1cblxuXHR2YXIgX2hhbmRsZU11dGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50cztcblxuXHRcdHZhciBjaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0XHRpZiAoaXRlbXNbaWRdLmVsZW1lbnQgPT09IGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfYWRkKGl0ZW1zLCBlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgYmFja0NoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnRzLCBpdGVtKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGl0ZW0uZWxlbWVudDtcblx0XHRcdHZhciBmb3VuZCAgID0gZmFsc2U7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGVsZW1lbnRzW2ldID09PSBpdGVtLmVsZW1lbnQpIHtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHRfcmVtb3ZlKGl0ZW1zLCBpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLy0tLS0tLS1cblx0XHRlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3VzZXItdGV4dCcpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoZWNrKGl0ZW1zLCBlbGVtZW50c1tpXSk7XG5cdFx0fVxuXHRcdGZvciAodmFyIGlkIGluIGl0ZW1zKSB7XG5cdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdGJhY2tDaGVjayhpdGVtcywgZWxlbWVudHMsIGl0ZW1zW2lkXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vLS0tLS0tLVxuXHR9XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpIHtcblx0XHRfaGFuZGxlTXV0YXRlKCk7XG5cdFx0X2hhbmRsZUNoYW5nZSgpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9kZWNvci9hZGQtY2xhc3Mtc2Nyb2xsLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(8), __webpack_require__(5), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, resizeStore, scrollStore, utils) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar block, height, width, scrollTop;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar show = function show(el) {\n\t\t\tif (scrollTop >= utils.offset(el.element).top - height / 1.2) {\n\t\t\t\tel.element.classList.add('show');\n\t\t\t}\n\t\t\tif (utils.offset(el.element).top <= height) {\n\t\t\t\tel.element.classList.add('show');\n\t\t\t}\n\t\t\tif (el.element.classList.contains('next-service') || el.element.classList.contains('next-blog') || el.element.classList.contains('next-case')) {\n\t\t\t\tif (scrollTop >= utils.offset(el.element).top - height / 1.2) {\n\t\t\t\t\tel.element.classList.add('show');\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfor (var id in items) {\n\t\t\tshow(items[id]);\n\t\t}\n\t};\n\n\tvar _scroll = function _scroll() {\n\t\tvar storeData = scrollStore.getData();\n\t\tscrollTop = storeData.top;\n\t};\n\n\tvar _resize = function _resize() {\n\t\tvar storeData = resizeStore.getData();\n\t\theight = storeData.height;\n\t\twidth = storeData.width;\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-ide');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('scroll-block');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_resize();\n\t\t_scroll();\n\t\t_handleChange();\n\n\t\tresizeStore.eventEmitter.subscribe(_resize);\n\t\tscrollStore.eventEmitter.subscribe(_scroll);\n\t\tresizeStore.eventEmitter.subscribe(_handleChange);\n\t\tscrollStore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_resize();\n\t\t\t\t_scroll();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, store) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar storeData = store.getData();\n\n\t\tif (storeData.activeYes === true || storeData.activeNo === true) {\n\t\t\titems['close'].element.style.opacity = \"1\";\n\t\t} else {\n\t\t\titems['close'].element.style.opacity = \"0\";\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\t\telement.addEventListener('click', function () {\n\t\t\tdispatcher.dispatch({\n\t\t\t\ttype: 'footer-close'\n\t\t\t});\n\t\t});\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('footer-close');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleChange();\n\n\t\tstore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvb3Rlci9mb290ZXItY2xvc2Uudmlldy5qcz83NDg5Il0sIm5hbWVzIjpbImRpc3BhdGNoZXIiLCJzdG9yZSIsIml0ZW1zIiwiaWROYW1lIiwiaWROdW0iLCJfaGFuZGxlQ2hhbmdlIiwic3RvcmVEYXRhIiwiZ2V0RGF0YSIsImFjdGl2ZVllcyIsImFjdGl2ZU5vIiwiZWxlbWVudCIsInN0eWxlIiwib3BhY2l0eSIsIl9hZGQiLCJpZCIsImdldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaCIsInR5cGUiLCJfcmVtb3ZlIiwiaXRlbSIsIl9oYW5kbGVNdXRhdGUiLCJlbGVtZW50cyIsImNoZWNrIiwiZm91bmQiLCJoYXNPd25Qcm9wZXJ0eSIsImJhY2tDaGVjayIsImkiLCJsZW5ndGgiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbml0IiwiZXZlbnRFbWl0dGVyIiwic3Vic2NyaWJlIiwiZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELEVBQWtCLHVCQUFsQixDQUFQLGtDQUE0QyxVQUFTQSxVQUFULEVBQXFCQyxLQUFyQixFQUE0Qjs7QUFFdkU7O0FBRUEsS0FBSUMsUUFBUSxFQUFaOztBQUVBO0FBQ0EsS0FBSUMsU0FBUyxTQUFiO0FBQ0EsS0FBSUMsUUFBUyxDQUFiOztBQUVBLEtBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUM5QixNQUFJQyxZQUFZTCxNQUFNTSxPQUFOLEVBQWhCOztBQUVBLE1BQUlELFVBQVVFLFNBQVYsS0FBd0IsSUFBeEIsSUFBZ0NGLFVBQVVHLFFBQVYsS0FBdUIsSUFBM0QsRUFBaUU7QUFDaEVQLFNBQU0sT0FBTixFQUFlUSxPQUFmLENBQXVCQyxLQUF2QixDQUE2QkMsT0FBN0IsR0FBdUMsR0FBdkM7QUFDQSxHQUZELE1BRU87QUFDTlYsU0FBTSxPQUFOLEVBQWVRLE9BQWYsQ0FB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QU1BO0FBREEsRUFBUDtBQUdBLENBN0dEIiwiZmlsZSI6IjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vZGlzcGF0Y2hlcicsICcuL2Zvb3Rlci5zdG9yZSddLCBmdW5jdGlvbihkaXNwYXRjaGVyLCBzdG9yZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhciBpdGVtcyA9IHt9XG5cblx0Ly8hISFyZXBsYWNlIGlmIHNldHRpbmcgZGF0YS1hdHRyaWJ1dGUhXG5cdHZhciBpZE5hbWUgPSAnbmV3LWlkLSc7XG5cdHZhciBpZE51bSAgPSAxO1xuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHN0b3JlRGF0YSA9IHN0b3JlLmdldERhdGEoKTtcblxuXHRcdGlmIChzdG9yZURhdGEuYWN0aXZlWWVzID09PSB0cnVlIHx8IHN0b3JlRGF0YS5hY3RpdmVObyA9PT0gdHJ1ZSkge1xuXHRcdFx0aXRlbXNbJ2Nsb3NlJ10uZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGl0ZW1zWydjbG9zZSddLmVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfYWRkID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHR2YXIgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuXG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0aWQgPSBpZE5hbWUgKyBpZE51bTtcblx0XHRcdGlkTnVtKys7XG5cblx0XHRcdC8vc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWQpO1xuXHRcdH1cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRkaXNwYXRjaGVyLmRpc3BhdGNoKHtcblx0XHRcdFx0dHlwZTogJ2Zvb3Rlci1jbG9zZSdcblx0XHRcdH0pO1xuXHRcdH0pXG5cblx0XHRpdGVtc1tpZF0gPSB7XG5cdFx0XHRpZDogaWQsXG5cdFx0XHRlbGVtZW50OiBlbGVtZW50XG5cdFx0fVxuXHR9XG5cblx0dmFyIF9yZW1vdmUgPSBmdW5jdGlvbihpdGVtcywgaXRlbSkge1xuXHRcdGRlbGV0ZSBpdGVtc1tpdGVtLmlkXTtcblx0fVxuXG5cdHZhciBfaGFuZGxlTXV0YXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnRzO1xuXG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHRcdHZhciBmb3VuZCA9IGZhbHNlO1xuXHRcdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdFx0aWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdGlmIChpdGVtc1tpZF0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9hZGQoaXRlbXMsIGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBiYWNrQ2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudHMsIGl0ZW0pIHtcblx0XHRcdHZhciBlbGVtZW50ID0gaXRlbS5lbGVtZW50O1xuXHRcdFx0dmFyIGZvdW5kICAgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoZWxlbWVudHNbaV0gPT09IGl0ZW0uZWxlbWVudCkge1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdF9yZW1vdmUoaXRlbXMsIGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vLS0tLS0tLVxuXHRcdGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZm9vdGVyLWNsb3NlJyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hlY2soaXRlbXMsIGVsZW1lbnRzW2ldKTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cblx0XHRzdG9yZS5ldmVudEVtaXR0ZXIuc3Vic2NyaWJlKF9oYW5kbGVDaGFuZ2UpO1xuXG5cdFx0ZGlzcGF0Y2hlci5zdWJzY3JpYmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ211dGF0ZScpIHtcblx0XHRcdFx0X2hhbmRsZU11dGF0ZSgpO1xuXHRcdFx0XHRfaGFuZGxlQ2hhbmdlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXRcblx0fVxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZnJvbnRlbmQvanMvbW9kdWxlcy9mb290ZXIvZm9vdGVyLWNsb3NlLnZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(TweenMax) {'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher, scrollStore, resizeStore) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\tvar scrollHeight;\n\tvar active = false;\n\tvar timer;\n\n\tvar _handleChange = function _handleChange() {\n\t\tif (Object.keys(items).length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar storeData = scrollStore.getData().top;\n\n\t\tfor (var key in items) {\n\t\t\tvar el = items[key].element;\n\t\t}\n\n\t\tif (storeData === scrollHeight - window.innerHeight && active === false) {\n\t\t\tTweenMax.to(el, 5, {\n\t\t\t\tstrokeDashoffset: 0,\n\t\t\t\tease: Linear.easeNone\n\t\t\t});\n\t\t\tactive = true;\n\t\t\ttimer = setTimeout(function () {\n\t\t\t\tdocument.getElementsByClassName('project-preview')[0].click();\n\t\t\t}, 4500);\n\t\t} else if (storeData !== scrollHeight - window.innerHeight && active === true) {\n\t\t\tclearTimeout(timer);\n\t\t\tTweenMax.to(el, 0.3, {\n\t\t\t\tstrokeDashoffset: '360%',\n\t\t\t\tease: Linear.easeNone\n\t\t\t});\n\t\t\tactive = false;\n\t\t}\n\t};\n\tvar _handleResize = function _handleResize() {\n\t\tscrollHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('progress');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\t\t_handleResize();\n\t\t_handleChange();\n\n\t\tresizeStore.eventEmitter.subscribe(_handleResize);\n\t\tscrollStore.eventEmitter.subscribe(_handleChange);\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t\t_handleResize();\n\t\t\t\t_handleChange();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (dispatcher) {\n\n\t\"use strict\";\n\n\tvar items = {};\n\n\t//!!!replace if setting data-attribute!\n\tvar idName = 'new-id-';\n\tvar idNum = 1;\n\n\tvar _handleChange = function _handleChange() {\n\t\tvar container = document.getElementsByClassName('upload-done')[0];\n\t\tvar name = document.getElementsByClassName('upload-done')[0].getElementsByTagName('span')[0];\n\n\t\tif (items[\"file-add\"].element.files.length !== 0) {\n\t\t\tname.innerHTML = items[\"file-add\"].element.files[0].name;\n\t\t\tcontainer.classList.add('added');\n\t\t}\n\t};\n\n\tvar _add = function _add(items, element) {\n\t\tvar id = element.getAttribute('data-id');\n\n\t\tif (!id) {\n\t\t\tid = idName + idNum;\n\t\t\tidNum++;\n\n\t\t\t//setAttribute('data-id', id);\n\t\t}\n\n\t\titems[id] = {\n\t\t\tid: id,\n\t\t\telement: element\n\t\t};\n\n\t\telement.addEventListener(\"change\", _handleChange);\n\t};\n\n\tvar _remove = function _remove(items, item) {\n\t\tdelete items[item.id];\n\t};\n\n\tvar _handleMutate = function _handleMutate() {\n\t\tvar elements;\n\n\t\tvar check = function check(items, element) {\n\t\t\tvar found = false;\n\t\t\tfor (var id in items) {\n\t\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\t\tif (items[id].element === element) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\t_add(items, element);\n\t\t\t}\n\t\t};\n\n\t\tvar backCheck = function backCheck(items, elements, item) {\n\t\t\tvar element = item.element;\n\t\t\tvar found = false;\n\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tif (elements[i] === item.element) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!found) {\n\t\t\t\t_remove(items, item);\n\t\t\t}\n\t\t};\n\n\t\t//-------\n\t\telements = document.getElementsByClassName('file-add');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tcheck(items, elements[i]);\n\t\t}\n\n\t\tfor (var id in items) {\n\t\t\tif (items.hasOwnProperty(id)) {\n\t\t\t\tbackCheck(items, elements, items[id]);\n\t\t\t}\n\t\t}\n\t\t//-------\n\t};\n\n\tvar init = function init() {\n\t\t_handleMutate();\n\n\t\tdispatcher.subscribe(function (e) {\n\t\t\tif (e.type === 'mutate') {\n\t\t\t\t_handleMutate();\n\t\t\t}\n\t\t});\n\t};\n\n\treturn {\n\t\tinit: init\n\t};\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZmlsZS52aWV3LmpzPzBmOGQiXSwibmFtZXMiOlsiZGlzcGF0Y2hlciIsIml0ZW1zIiwiaWROYW1lIiwiaWROdW0iLCJfaGFuZGxlQ2hhbmdlIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwibmFtZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZWxlbWVudCIsImZpbGVzIiwibGVuZ3RoIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiYWRkIiwiX2FkZCIsImlkIiwiZ2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9yZW1vdmUiLCJpdGVtIiwiX2hhbmRsZU11dGF0ZSIsImVsZW1lbnRzIiwiY2hlY2siLCJmb3VuZCIsImhhc093blByb3BlcnR5IiwiYmFja0NoZWNrIiwiaSIsImluaXQiLCJzdWJzY3JpYmUiLCJlIiwidHlwZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBTyxDQUFDLHNCQUFELENBQVAsa0NBQTBCLFVBQVNBLFVBQVQsRUFBcUI7O0FBRTlDOztBQUVBLEtBQUlDLFFBQVEsRUFBWjs7QUFFQTtBQUNBLEtBQUlDLFNBQVMsU0FBYjtBQUNBLEtBQUlDLFFBQVMsQ0FBYjs7QUFHQSxLQUFJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDOUIsTUFBSUMsWUFBWUMsU0FBU0Msc0JBQVQsQ0FBZ0MsYUFBaEMsRUFBK0MsQ0FBL0MsQ0FBaEI7QUFDQSxNQUFJQyxPQUFPRixTQUFTQyxzQkFBVCxDQUFnQyxhQUFoQyxFQUErQyxDQUEvQyxFQUFrREUsb0JBQWxELENBQXVFLE1BQXZFLEVBQStFLENBQS9FLENBQVg7O0FBRUEsTUFBSVIsTUFBTSxVQUFOLEVBQWtCUyxPQUFsQixDQUEwQkMsS0FBMUIsQ0FBZ0NDLE1BQWhDLEtBQTJDLENBQS9DLEVBQWtEO0FBQ2pESixRQUFLSyxTQUFMLEdBQWlCWixNQUFNLFVBQU4s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Q29udGVudCI6WyJkZWZpbmUoWycuLi9kaXNwYXRjaGVyJ10sIGZ1bmN0aW9uKGRpc3BhdGNoZXIpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgaXRlbXMgPSB7fVxuXG5cdC8vISEhcmVwbGFjZSBpZiBzZXR0aW5nIGRhdGEtYXR0cmlidXRlIVxuXHR2YXIgaWROYW1lID0gJ25ldy1pZC0nO1xuXHR2YXIgaWROdW0gID0gMTtcblxuXG5cdHZhciBfaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3VwbG9hZC1kb25lJylbMF07XG5cdFx0dmFyIG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd1cGxvYWQtZG9uZScpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzcGFuJylbMF07XG5cblx0XHRpZiAoaXRlbXNbXCJmaWxlLWFkZFwiXS5lbGVtZW50LmZpbGVzLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0bmFtZS5pbm5lckhUTUwgPSBpdGVtc1tcImZpbGUtYWRkXCJdLmVsZW1lbnQuZmlsZXNbMF0ubmFtZTtcblx0XHRcdGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhZGRlZCcpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBfYWRkID0gZnVuY3Rpb24oaXRlbXMsIGVsZW1lbnQpIHtcblx0XHR2YXIgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1pZCcpO1xuXG5cdFx0aWYgKCFpZCkge1xuXHRcdFx0aWQgPSBpZE5hbWUgKyBpZE51bTtcblx0XHRcdGlkTnVtKys7XG5cblx0XHRcdC8vc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgaWQpO1xuXHRcdH1cblxuXHRcdGl0ZW1zW2lkXSA9IHtcblx0XHRcdGlkOiBpZCxcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnRcblx0XHR9XG5cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgX2hhbmRsZUNoYW5nZSk7XG5cdH1cblxuXHR2YXIgX3JlbW92ZSA9IGZ1bmN0aW9uKGl0ZW1zLCBpdGVtKSB7XG5cdFx0ZGVsZXRlIGl0ZW1zW2l0ZW0uaWRdO1xuXHR9XG5cblx0dmFyIF9oYW5kbGVNdXRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudHM7XG5cblx0XHR2YXIgY2hlY2sgPSBmdW5jdGlvbihpdGVtcywgZWxlbWVudCkge1xuXHRcdFx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdFx0XHRmb3IgKHZhciBpZCBpbiBpdGVtcykge1xuXHRcdFx0XHRpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW1zW2lkXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG5cdFx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X2FkZChpdGVtcywgZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGJhY2tDaGVjayA9IGZ1bmN0aW9uKGl0ZW1zLCBlbGVtZW50cywgaXRlbSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBpdGVtLmVsZW1lbnQ7XG5cdFx0XHR2YXIgZm91bmQgICA9IGZhbHNlO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50c1tpXSA9PT0gaXRlbS5lbGVtZW50KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0X3JlbW92ZShpdGVtcywgaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8tLS0tLS0tXG5cdFx0ZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdmaWxlLWFkZCcpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNoZWNrKGl0ZW1zLCBlbGVtZW50c1tpXSk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaWQgaW4gaXRlbXMpIHtcblx0XHRcdGlmIChpdGVtcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcblx0XHRcdFx0YmFja0NoZWNrKGl0ZW1zLCBlbGVtZW50cywgaXRlbXNbaWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8tLS0tLS0tXG5cdH1cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9oYW5kbGVNdXRhdGUoKTtcblxuXHRcdGRpc3BhdGNoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLnR5cGUgPT09ICdtdXRhdGUnKSB7XG5cdFx0XHRcdF9oYW5kbGVNdXRhdGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdFxuXHR9XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9mcm9udGVuZC9qcy9tb2R1bGVzL2Zvcm0vZmlsZS52aWV3LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);